import "classpath:/btdesign/export/metamac-core-common-entity.btdesign"
import "classpath:/btdesign/metamac-core-common-enum.btdesign"
import "classpath:/btdesign/statistic-sdmx-core-codes.btdesign"
import "classpath:/btdesign/statistic-sdmx-core-base.btdesign"
import "classpath:/btdesign/metamac-srm-core-enum.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-enums.btdesign"
import "classpath:/btdesign/metamac-srm-core-base.btdesign"
import "classpath:/btdesign/metamac-srm-core-codes-enum.btdesign"
import "classpath:/btdesign/metamac-srm-core-concepts.btdesign"


Application CodesMetamac {
	basePackage=unused

	Module domain_codes_metamac {
		basePackage=org.siemac.metamac.srm.core.code

		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------  
		"Provides access to Codelists Artefacts"
		Service CodesMetamacService {

			> @CodelistVersionMetamacRepository
			> @CodeMetamacRepository
			> @CodelistFamilyRepository
			> @VariableFamilyRepository
			> @VariableRepository
			> @VariableElementRepository
			> @VariableElementOperationRepository
			> @CodelistOrderVisualisationRepository
			> @CodelistOpennessVisualisationRepository

			// CODELISTS

			"Creates codelist"
			@CodelistVersionMetamac createCodelist(@CodelistVersionMetamac codelistVersion) throws MetamacException;
			"Pre-Create code list"
			@CodelistVersionMetamac preCreateCodelist(@CodelistVersionMetamac codelistVersion) throws MetamacException;
			"post-Create code list"
			@CodelistVersionMetamac postCreateCodelist(@CodelistVersionMetamac codelistVersion, List<@CodelistVersionMetamac> replaceTo) throws MetamacException
			"Updates codelist"
			@CodelistVersionMetamac updateCodelist(@CodelistVersionMetamac codelistVersion) throws MetamacException;
			"Retrieves codelist by urn"
			@CodelistVersionMetamac retrieveCodelistByUrn(String urn) throws MetamacException;
			"Retrieves all codelists versions"
			List<@CodelistVersionMetamac> retrieveCodelistVersions(String urn) throws MetamacException;
			"Finds codelists by criteria"
    		PagedResult<@CodelistVersionMetamac> findCodelistsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		"Sends codelist to production validation"
    		@CodelistVersionMetamac sendCodelistToProductionValidation(String urn) throws MetamacException;
    		"Sends codelist to diffusion validation"
    		@CodelistVersionMetamac sendCodelistToDiffusionValidation(String urn) throws MetamacException;
	    	"Rejects production validation of codelist"    		
	    	@CodelistVersionMetamac rejectCodelistProductionValidation(String urn) throws MetamacException;
	    	"Rejects diffusion validation of codelist"
	    	@CodelistVersionMetamac rejectCodelistDiffusionValidation(String urn) throws MetamacException;
	    	"Publish internally a codelist"
	    	TaskInfo publishInternallyCodelist(String urn, Boolean forceLatestFinal, Boolean canBeBackground) throws MetamacException;
	    	"Publish externally a codelist"
	    	@CodelistVersionMetamac publishExternallyCodelist(String urn) throws MetamacException;
			"Deletes codelist version. This must be last version and no published"
    		deleteCodelist(String urn) throws MetamacException;
    		"Creates a new version of a codelist, copying metadata from version with provided urn"
    		TaskInfo versioningCodelist(String urnToCopy, Boolean versioningCodes, @VersionTypeEnum versionType) throws MetamacException;
    		"Creates a temporal version of a codelist, copying metadata from version with provided urn"
    		TaskInfo createTemporalCodelist(String urnToCopy) throws MetamacException;
    		"Creates a new version of a code list from temporal version with provided urn"
    		TaskInfo createVersionFromTemporalCodelist(String urnToCopy, @VersionTypeEnum versionTypeEnum) throws MetamacException;
    		"Merge temporal version into published version"
    		@CodelistVersionMetamac mergeTemporalVersion(String urnTemporal) throws MetamacException;
    		"Ends the codelist validity"
    		@CodelistVersionMetamac endCodelistValidity(String urn) throws MetamacException;
    		"Retrieves codelist by code urn"
    		@CodelistVersionMetamac retrieveCodelistByCodeUrn(String codeUrn) throws MetamacException;
			"Checks translations for codelist"
    		List<MetamacExceptionItem> checkCodelistVersionTranslations(Long itemSchemeVersionId, String locale);
    		
			// CODES

			"Creates code"
			@CodeMetamac createCode(String codelistUrn, @CodeMetamac code) throws MetamacException;
			"Precreate code"
    		@CodeMetamac preCreateCode(@CodelistVersionMetamac codelistVersion, @CodeMetamac code) throws MetamacException; 
			"Updates code"
			@CodeMetamac updateCode(@CodeMetamac code) throws MetamacException;
			"Change variable element to code"
			@CodeMetamac updateCodeVariableElement(String codeUrn, String variableElementUrn) throws MetamacException;
			"Change variable elements to codes"
			updateCodesVariableElements(String codelistUrn, Map<Long,Long> variableElementsIdByCodeId) throws MetamacException;
			"Updates parent of code. parentUrn is null when code is moved to first level. Code is moved at the end of new level"
			updateCodeParent(String codeUrn, String newParentUrn) throws MetamacException;
			"Updates position of code to visualisation requested"
			updateCodeInOrderVisualisation(String codeUrn, String codelistOrderVisualisationUrn, Integer newCodeIndex) throws MetamacException;
			"Updates openness of code to visualisation requested"
			updateCodesInOpennessVisualisation(String codelistOpennessVisualisationUrn, Map<String, Boolean> openness) throws MetamacException;
    		"Retrieves code by urn"
    		@CodeMetamac retrieveCodeByUrn(String urn) throws MetamacException;
    		"Finds codes by criteria"
    		PagedResult<@CodeMetamac> findCodesByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Deletes code"
    		deleteCode(String urn) throws MetamacException;
    		"Retrieves codes by codelist in locale and visualisation requested. If visualisation is not provided, tries retrieve codes in default visualisations"
    		List<CodeMetamacVisualisationResult> retrieveCodesByCodelistUrn(String codelistUrn, String locale, String codelistOrderVisualisationUrn, String codelistOpennessVisualisationUrn) throws MetamacException;
			"Copy codes to another codelist"
	   		copyCodesInCodelist(String codelistSourceUrn, String codelistTargetUrn, List<CodeToCopy> codesToCopy) throws MetamacException;
			"Imports codes in csv format"
    		importCodesCsv(String codelistUrn, InputStream csvStream, String charset, String fileName, boolean updateAlreadyExisting, List<MetamacExceptionItem> informationItems) throws MetamacException;
			"Imports code orders in csv format"
    		importCodeOrdersCsv(String codelistUrn, InputStream csvStream, String charset, String fileName) throws MetamacException;
	   		"Propuses a normalisation of variable elements to codes"
	   		List<CodeVariableElementNormalisationResult> normaliseVariableElementsToCodes(String codelistUrn, String locale) throws MetamacException;
	   		    		
    		// VISUALISATIONS
    		
    		"Creates order visualisation"
    		@CodelistOrderVisualisation createCodelistOrderVisualisation(String codelistUrn, @CodelistOrderVisualisation codelistOrderVisualisation) throws MetamacException;
    		"Creates alphabetical order visualisation"
    		@CodelistVersionMetamac createCodelistOrderVisualisationAlphabetical(@CodelistVersionMetamac codelistVersion) throws MetamacException;
			"Updates order visualisation"
			@CodelistOrderVisualisation updateCodelistOrderVisualisation(@CodelistOrderVisualisation codelistOrderVisualisation) throws MetamacException;
    		"Retrieves order visualisation by identifier"
    		@CodelistOrderVisualisation retrieveCodelistOrderVisualisationByUrn(String urn) throws MetamacException;
    		"Retrieve order visualisations by codelist"
    		List<@CodelistOrderVisualisation> retrieveCodelistOrderVisualisationsByCodelist(String codelistUrn)  throws MetamacException;
			"Deletes order visualisation"
    		deleteCodelistOrderVisualisation(String urn) throws MetamacException;
    		@CodelistVersionMetamac versioningCodelistOrderVisualisations(@CodelistVersionMetamac source, @CodelistVersionMetamac target) throws MetamacException;

			"Creates openness visualisation"
    		@CodelistOpennessVisualisation createCodelistOpennessVisualisation(String codelistUrn, @CodelistOpennessVisualisation codelistOpennessVisualisation) throws MetamacException;
    		"Creates openness visualisation with all levels opened"
    		@CodelistVersionMetamac createCodelistOpennessVisualisationAllOpened(@CodelistVersionMetamac codelistVersion) throws MetamacException;
			"Updates openness visualisation"
			@CodelistOpennessVisualisation updateCodelistOpennessVisualisation(@CodelistOpennessVisualisation codelistOpennessVisualisation) throws MetamacException;
    		"Retrieves openness visualisation by identifier"
    		@CodelistOpennessVisualisation retrieveCodelistOpennessVisualisationByUrn(String urn) throws MetamacException;
    		"Retrieve openness visualisations by codelist"
    		List<@CodelistOpennessVisualisation> retrieveCodelistOpennessVisualisationsByCodelist(String codelistUrn)  throws MetamacException;
			"Deletes openness visualisation"
    		deleteCodelistOpennessVisualisation(String urn) throws MetamacException;
    		@CodelistVersionMetamac versioningCodelistOpennessVisualisations(@CodelistVersionMetamac source, @CodelistVersionMetamac target) throws MetamacException;

			"Recalculates all visualisations: order and openness, when new codes are added in codelist"
    		recalculateCodesVisualisations(List<@Item> items, List<@CodelistOrderVisualisation> orderVisualisations, List<@CodelistOpennessVisualisation> opennessVisualisations, boolean executeSave);

			// CODELIST FAMILIES
			
			"Creates codelist family"
			@CodelistFamily createCodelistFamily(@CodelistFamily codelistFamily) throws MetamacException;
			"Updates codelist family"
			@CodelistFamily updateCodelistFamily(@CodelistFamily codelistFamily) throws MetamacException;
    		"Retrieves codelist family by urn"
    		@CodelistFamily retrieveCodelistFamilyByUrn(String urn) throws MetamacException;
    		"Finds codelist families by criteria"
    		PagedResult<@CodelistFamily> findCodelistFamiliesByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Deletes codelist family"
    		deleteCodelistFamily(String urn) throws MetamacException;
			"Adds codelists to family"
			addCodelistsToCodelistFamily(List<String> codelistUrns, String codelistFamilyUrn) throws MetamacException;
			"Removes codelist from family"
			removeCodelistFromCodelistFamily(String codelistUrn, String codelistFamilyUrn) throws MetamacException;
    		
    		// VARIABLE FAMILIES
    		
    		"Creates variable family"
			@VariableFamily createVariableFamily(@VariableFamily variableFamily) throws MetamacException;
			"Updates variable family"
			@VariableFamily updateVariableFamily(@VariableFamily variableFamily) throws MetamacException;
    		"Retrieves variable family by urn"
    		@VariableFamily retrieveVariableFamilyByUrn(String urn) throws MetamacException;
    		"Finds variable families by criteria"
    		PagedResult<@VariableFamily> findVariableFamiliesByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Deletes variable family"
    		deleteVariableFamily(String urn) throws MetamacException;
    		
    		// VARIABLES
    		
    		"Creates variable"
			@Variable createVariable(@Variable variable) throws MetamacException;
			"Updates variable"
			@Variable updateVariable(@Variable variable) throws MetamacException;
    		"Retrieves variable by urn"
    		@Variable retrieveVariableByUrn(String urn) throws MetamacException;
    		"Finds variables by criteria"
    		PagedResult<@Variable> findVariablesByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Deletes variable"
    		deleteVariable(String urn) throws MetamacException;
    		"Adds variables to a family"
    		addVariablesToVariableFamily(List<String> variableUrn, String familyUrn) throws MetamacException;
    		"Removes a variable from a family"
    		removeVariableFromVariableFamily(String variableUrn, String familyUrn) throws MetamacException;

    		// VARIABLE ELEMENTS
    		
    		"Creates variable element"
			@VariableElement createVariableElement(@VariableElement variableElement) throws MetamacException;
			"Updates variable element"
			@VariableElement updateVariableElement(@VariableElement variableElement) throws MetamacException;
    		"Retrieves variable element by urn"
    		@VariableElement retrieveVariableElementByUrn(String urn) throws MetamacException;
    		"Finds variable elements by criteria"
    		PagedResult<@VariableElement> findVariableElementsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		"Finds variable elements can be for codes of codelist"
    		PagedResult<@VariableElement> findVariableElementsForCodesByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String codelistUrn) throws MetamacException;
    		"Finds efficiently variable elements by variable"
    		List<VariableElementResult> retrieveVariableElementsByVariable(String variableUrn, String locale) throws MetamacException;
			"Deletes variable element"
    		deleteVariableElement(String urn) throws MetamacException;
    		"Adds variable element to a variable"
    		addVariableElementsToVariable(List<String> variableElementUrn, String variableUrn) throws MetamacException;
    		"Creates fusion operation"
    		@VariableElementOperation createVariableElementFusionOperation(List<String> sources, String target) throws MetamacException;
    		"Creates segregation operation"
    		@VariableElementOperation createVariableElementSegregationOperation(String source, List<String> targets) throws MetamacException;
    		"Retrieves variable element operation by code"
    		@VariableElementOperation retrieveVariableElementOperationByCode(String code) throws MetamacException;
    		"Delete fusion or segregation operation"
    		deleteVariableElementOperation(String code) throws MetamacException;
    		"Retrieves all variable elements operations of one variable"
 			List<@VariableElementOperation> retrieveVariableElementsOperationsByVariable(String variableUrn) throws MetamacException;
 			"Retrieves all variable elements operations of one variable element"
 			List<@VariableElementOperation> retrieveVariableElementsOperationsByVariableElement(String variableElementUrn) throws MetamacException;
			"Imports variable elements in csv format"
    		importVariableElementsCsv(String variableUrn, InputStream csvStream, String charset, String fileName, boolean updateAlreadyExisting, List<MetamacExceptionItem> informationItems) throws MetamacException;
		}

		// ----------------------------------------------------------------
		// 							ENTITIES
		// ----------------------------------------------------------------

		Entity CodelistVersionMetamac extends @CodelistVersion {
			databaseTable="TB_M_CODELISTS_VERSIONS"
			hint="idSequence=M_CODELISTS_VERSIONS"
			
			"Short name"
			- @InternationalString shortName nullable fetch="lazy" cascade="all" databaseColumn="SHORT_NAME_FK";
			"Description source"
			- @InternationalString descriptionSource nullable fetch="lazy" cascade="all" databaseColumn="DESCRIPTION_SOURCE_FK";
			"Is recommended"
			Boolean isRecommended nullable;
			"Access type"
			- @AccessTypeEnum accessType nullable;
			"Family"
			- @CodelistFamily family nullable cascade="none" fetch="lazy" databaseColumn="CODELIST_FAMILY_FK" <-> codelists;
			"Variable"
			- @Variable variable nullable cascade="none" fetch="lazy" databaseColumn="VARIABLE_FK" <-> codelists;
			"TRUE if variable has been updated. As a consequence, variable elements in codes must be removed"
			Boolean isVariableUpdated nullable transient;

			"Life cycle information"
			- @SrmLifeCycleMetadata lifeCycleMetadata databaseColumn="";

			"Codelist that replaces this one. Update in this metadata is ignored. Must be updated by replacedToCodelists metadata"
			- @CodelistVersionMetamac replacedByCodelist nullable cascade="none" fetch="lazy" databaseColumn="REPLACED_BY_CODELIST_FK"  <-> replaceToCodelists;
			"Codelists that are replaced by this one"
			- Bag<@CodelistVersionMetamac> replaceToCodelists cascade="none" fetch="lazy" <-> replacedByCodelist;

			"Order visualisations of codelist"
			- Bag<@CodelistOrderVisualisation> orderVisualisations cascade="all-delete-orphan" fetch="lazy" inverse <-> codelistVersion;
			"Default order visualisation"
			- @CodelistOrderVisualisation defaultOrderVisualisation nullable cascade="persist,merge,refresh" fetch="lazy" databaseColumn="DEFAULT_ORDER_VISUAL_FK";

			"Openness visualisations of codelist"
			- Bag<@CodelistOpennessVisualisation> opennessVisualisations cascade="all-delete-orphan" fetch="lazy" inverse <-> codelistVersion;
			"Default openness visualisation"
			- @CodelistOpennessVisualisation defaultOpennessVisualisation nullable cascade="persist,merge,refresh" fetch="lazy" databaseColumn="DEFAULT_OPENNESS_VISUAL_FK";
			
			Repository CodelistVersionMetamacRepository {
				save;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByCondition(PagingParameter pagingParameter);
				@CodelistVersionMetamac findByUrn(String urn);
				@CodelistVersionMetamac retrieveCodelistVersionByProcStatus(String urn, ArrayProcStatusEnum procStatus) throws MetamacException;
				@CodelistVersionMetamac findByCode(String urn);
				checkCodelistVersionTranslations(Long itemSchemeVersionId, String locale, List<MetamacExceptionItem> exceptionItems);
			}			
		}

		Entity CodeMetamac extends @Code {
			databaseTable="TB_M_CODES"
			hint="idSequence=M_CODES"
			
			"Short name. Only filled if code has not related variable element"
			- @InternationalString shortName nullable cascade="all" fetch="lazy" databaseColumn="SHORT_NAME_FK";
			"Variable element"
			- @VariableElement variableElement nullable cascade="none" fetch="lazy" databaseColumn="VARIABLE_ELEMENT_FK"  <-> codes;
			
			Integer order1 nullable;
			Integer order2 nullable;
			Integer order3 nullable;
			Integer order4 nullable;
			Integer order5 nullable;
			Integer order6 nullable;
			Integer order7 nullable;
			Integer order8 nullable;
			Integer order9 nullable;
			Integer order10 nullable;
			Integer order11 nullable;
			Integer order12 nullable;
			Integer order13 nullable;
			Integer order14 nullable;
			Integer order15 nullable;
			Integer order16 nullable;
			Integer order17 nullable;
			Integer order18 nullable;
			Integer order19 nullable;
			Integer order20 nullable;
			
			Boolean openness1 nullable;
			Boolean openness2 nullable;
			Boolean openness3 nullable;
			Boolean openness4 nullable;
			Boolean openness5 nullable;
			Boolean openness6 nullable;
			Boolean openness7 nullable;
			Boolean openness8 nullable;
			Boolean openness9 nullable;
			Boolean openness10 nullable;
			Boolean openness11 nullable;
			Boolean openness12 nullable;
			Boolean openness13 nullable;
			Boolean openness14 nullable;
			Boolean openness15 nullable;
			Boolean openness16 nullable;
			Boolean openness17 nullable;
			Boolean openness18 nullable;
			Boolean openness19 nullable;
			Boolean openness20 nullable;
			
			Repository CodeMetamacRepository {
				save;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByQuery(String query, Map<String, Object> parameters);
				@CodeMetamac findByUrn(String urn);
				@CodeMetamac findByCodeWithoutFlushing(Long codelistVersionId, String code);
				findByCondition(PagingParameter pagingParameter);
				List<CodeMetamacVisualisationResult> findCodesByCodelistUnorderedToVisualisation(Long codelistId, String locale, Integer orderColumnIndex, Integer opennessColumnIndex) throws MetamacException;
				List<ItemResult> findCodesByCodelistUnordered(Long codelistId, ItemMetamacResultSelection resultSelection);
				List<ItemResult> findCodesByCodelistOrderedInDepth(Long codelistId, Integer orderColumnIndex, ItemMetamacResultSelection resultSelection) throws MetamacException;
				checkCodeTranslations(Long itemSchemeVersionId, String locale, List<MetamacExceptionItem> exceptionItems);
				
				clearCodesVariableElementByCodelist(@CodelistVersionMetamac codelistVersion);
				updateCodesVariableElements(Map<Long,Long> variableElementsByCodes, Long codelistVersionId, Long variableId) throws MetamacException;
				
				reorderCodesDeletingOneCode(@CodelistVersionMetamac codelistVersion, @Item parent, @CodeMetamac code, Integer orderColumnIndex, Integer orderCodeToDelete);
				reorderCodesAddingOneCodeInMiddle(@CodelistVersionMetamac codelistVersion, @CodeMetamac code, Integer orderColumnIndex, Integer orderCodeToAdd);
				clearCodesOrderColumn(@CodelistVersionMetamac codelistVersion, Integer orderColumnIndex);
				copyCodesOrderColumn(@CodelistVersionMetamac codelistVersion, Integer columnIndexSource, Integer columnIndexTarget);
				Integer getCodeMaximumOrderInLevel(@CodelistVersionMetamac codelistVersion, @Item parent, Integer orderColumnIndex);
				Integer getCodeAlphabeticPositionInLevel(@CodelistVersionMetamac codelistVersion, @Item parent, @Item code);

				clearCodesOpennessColumnByCodelist(@CodelistVersionMetamac codelistVersion, Integer opennessColumnIndex);
				copyCodesOpennessColumnByCodelist(@CodelistVersionMetamac codelistVersion, Integer columnIndexSource, Integer columnIndexTarget);
				updateCodesOpennessColumnByCodelist(@CodelistVersionMetamac codelistVersion, Integer opennessColumnIndex, Boolean expanded);
				updateCodeOpennessColumn(@CodelistVersionMetamac codelistVersion, String codeUrn, Integer opennessColumnIndex, Boolean expanded);
				updateCodeOpennessColumnToLeafCodes(@CodelistVersionMetamac codelistVersion, Integer opennessColumnIndex, Boolean expanded);
			}
		}
		
		Entity CodelistOrderVisualisation {
			databaseTable="TB_M_CODELIST_ORDER_VIS"
			hint="idSequence=M_CODELIST_ORDER_VIS"
			
			"Nameable artefact"
			- @NameableArtefact nameableArtefact not nullable cascade="all" fetch="lazy" databaseColumn="NAMEABLE_ARTEFACT_FK";
			"Last update to optimistic locking"
			DateTimeTZ updateDate nullable;
			"Column with order in table of Codes"
			Integer columnIndex not nullable;
			"Relation to codelist"			
			- @CodelistVersionMetamac codelistVersion not nullable cascade="none" fetch="lazy" databaseColumn="CODELIST_FK" <-> orderVisualisations;
			
			Repository CodelistOrderVisualisationRepository {
				save;
				delete;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				@CodelistOrderVisualisation findByUrn(String orderVisualisationUrn);
				@CodelistOrderVisualisation findByCode(Long codelistId, String orderVisualisationCode);
				updateUrnAllCodelistOrderVisualisationsByCodelistEfficiently(@CodelistVersionMetamac codelistVersionMetamac, String oldUrnExample);
			}			
		}	
		
		Entity CodelistOpennessVisualisation {
			databaseTable="TB_M_CODELIST_OPENNESS_VIS"
			hint="idSequence=M_CODELIST_OPENNESS_VIS"
			
			"Nameable artefact"
			- @NameableArtefact nameableArtefact not nullable cascade="all" fetch="lazy" databaseColumn="NAMEABLE_ARTEFACT_FK";
			"Last update to optimistic locking"
			DateTimeTZ updateDate nullable;
			"Column with openness in table of Codes"
			Integer columnIndex not nullable;
			"Relation to codelist"			
			- @CodelistVersionMetamac codelistVersion not nullable cascade="none" fetch="lazy" databaseColumn="CODELIST_FK" <-> opennessVisualisations;
			
			Repository CodelistOpennessVisualisationRepository {
				save;
				delete;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				@CodelistOpennessVisualisation findByUrn(String opennessVisualisationUrn);
				updateUrnAllCodelistOpenVisualisationsByCodelistEfficiently(@CodelistVersionMetamac codelistVersionMetamac, String oldUrnExample);
			}			
		}						

		Entity CodelistFamily {
			databaseTable="TB_M_CODELIST_FAMILIES"
			hint="idSequence=M_CODELIST_FAMILIES"

			"Nameable artefact"
			- @NameableArtefact nameableArtefact databaseColumn="NAMEABLE_ARTEFACT_FK" not nullable cascade="all";
			"Codelists"
			- Bag<@CodelistVersionMetamac> codelists cascade="none" fetch="lazy" inverse <-> family;
			"Last update to optimistic locking"
			DateTimeTZ updateDate nullable;
			
			Repository CodelistFamilyRepository {
				save;
				delete;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByCondition(PagingParameter pagingParameter);
				@CodelistFamily findByUrn(String urn);
			}
		}
		
		Entity VariableFamily {
			databaseTable="TB_M_VARIABLE_FAMILIES"
			hint="idSequence=M_VARIABLE_FAMILIES"

			"Nameable artefact"
			- @NameableArtefact nameableArtefact databaseColumn="NAMEABLE_ARTEFACT_FK" not nullable cascade="all";
			"Variables"
			- Bag<@Variable> variables cascade="none" fetch="lazy" databaseColumn="VARIABLE_FK" <-> families;
			"Last update to optimistic locking"
			DateTimeTZ updateDate nullable;
			
			Repository VariableFamilyRepository {
				save;
				delete;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByCondition(PagingParameter pagingParameter);
				@VariableFamily findByUrn(String urn);
			}
		}
		
		Entity Variable {
			databaseTable="TB_M_VARIABLES"
			hint="idSequence=M_VARIABLES"
			
			"Nameable artefact"
			- @NameableArtefact nameableArtefact databaseColumn="NAMEABLE_ARTEFACT_FK" not nullable cascade="all";
			"Short name"
			- @InternationalString shortName not nullable cascade="all" fetch="lazy" databaseColumn="SHORT_NAME_FK";
			"Date from which the variable is valid"
			DateTimeTZ validFrom nullable;
			"Date from which variable is superceded"
			DateTimeTZ validTo nullable;
			"Variable that replaces this one. Update in this metadata is ignored. Must be updated by replacedToVariables metadata"
			- @Variable replacedByVariable nullable cascade="none" fetch="lazy" databaseColumn="REPLACED_BY_VARIABLE_FK"  <-> replaceToVariables;
			"Variables that are replaced by this one"
			- Bag<@Variable> replaceToVariables cascade="none" fetch="lazy" <-> replacedByVariable;
			
			"Variable families"
			- Bag<@VariableFamily> families cascade="none" fetch="lazy" databaseColumn="VARIABLE_FAMILY_FK" databaseJoinTable="TB_M_VAR_FAMILIES_VARIABLES" <-> variables;
			"Codelists"
			- Bag<@CodelistVersionMetamac> codelists cascade="none" fetch="lazy" inverse <-> variable;
			"Concepts"
			- Bag<@ConceptMetamac> concepts cascade="none" fetch="lazy" <-> variable;
			"Elements"
			- Bag<@VariableElement> variableElements cascade="all-delete-orphan" fetch="lazy" <-> variable;
			"Variable elements operations"
			- Bag<@VariableElementOperation> variableElementsOperations cascade="all-delete-orphan" fetch="lazy" <-> variable;
			
			"Last update to optimistic locking"
			DateTimeTZ updateDate nullable;
			
			Repository VariableRepository {
				save;
				delete;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByCondition(PagingParameter pagingParameter);
				@Variable findByUrn(String urn);
			}
		}
		
		Entity VariableElement {
			databaseTable="TB_M_VARIABLE_ELEMENTS"
			hint="idSequence=M_VARIABLE_ELEMENTS"
			
			"Identifiable artefact"
			- @IdentifiableArtefact identifiableArtefact databaseColumn="IDENTIFIABLE_ARTEFACT_FK" not nullable cascade="all";
			"Short name"
			- @InternationalString shortName not nullable cascade="all" fetch="lazy" databaseColumn="SHORT_NAME_FK";
			"Date from which the variable element is valid"
			DateTimeTZ validFrom nullable;
			"Date from which variable element is superceded"
			DateTimeTZ validTo nullable;
			"Variable element that replaces this one. Update in this metadata is ignored. Must be updated by replacedToVariableElements metadata"
			- @VariableElement replacedByVariableElement nullable cascade="none" fetch="lazy" databaseColumn="REPLACED_BY_VAR_ELEMENT_FK"  <-> replaceToVariableElements;
			"Variable elements that are replaced by this one"
			- Bag<@VariableElement> replaceToVariableElements cascade="none" fetch="lazy" <-> replacedByVariableElement;
			
			"Variable"
			- @Variable variable not nullable cascade="none" fetch="lazy" databaseColumn="VARIABLE_FK"  <-> variableElements;
			"Concepts"
			- Bag<@CodeMetamac> codes cascade="none" fetch="lazy" <-> variableElement;
			"Last update to optimistic locking"
			DateTimeTZ updateDate nullable;
			
			Repository VariableElementRepository {
				save;
				delete;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByCondition(PagingParameter pagingParameter);
				@VariableElement findByUrn(String urn);
				@VariableElement findByCodeWithoutFlushing(Long variableId, String code);
				List<VariableElementResult> retrieveVariableElementsByVariableEfficiently(Long variableId, String locale);
			}
		}
		
		Entity VariableElementOperation {
			databaseTable="TB_M_VAR_ELEM_OPERATIONS"
			hint="idSequence=M_VAR_ELEM_OPERATIONS"
			
			"Code. It is a generated UUID, not semantic identifier"
			String code not nullable;
			"Operation type"
			- @VariableElementOperationTypeEnum operationType not nullable;
			"Sources"
			- Bag<@VariableElement> sources cascade="none" fetch="lazy" databaseJoinTable="TB_M_VAR_ELEM_OP_SOURCES" databaseColumn="SOURCE_FK" databaseJoinColumn="OPERATION_FK";
			"Targets"
			- Bag<@VariableElement> targets cascade="none" fetch="lazy" databaseJoinTable="TB_M_VAR_ELEM_OP_TARGETS" databaseColumn="TARGET_FK" databaseJoinColumn="OPERATION_FK";
			"Variable"
			- @Variable variable not nullable cascade="none" fetch="lazy" databaseColumn="VARIABLE_FK" <-> variableElementsOperations;
			
			Repository VariableElementOperationRepository {
				save;
				delete;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByQuery(String query, Map<String, Object> parameters);
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				@VariableElementOperation findByCode(String code);
				List<@VariableElementOperation> findByVariableElementUrn(String urn);
			}
		}
	}
}