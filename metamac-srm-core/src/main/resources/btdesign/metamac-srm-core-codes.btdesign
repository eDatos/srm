import "classpath:/btdesign/export/metamac-core-common-entity.btdesign"
import "classpath:/btdesign/metamac-core-common-enum.btdesign"
import "classpath:/btdesign/statistic-sdmx-core-codes.btdesign"
import "classpath:/btdesign/statistic-sdmx-core-base.btdesign"
import "classpath:/btdesign/metamac-srm-core-enum.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-enums.btdesign"
import "classpath:/btdesign/metamac-srm-core-base.btdesign"
import "classpath:/btdesign/metamac-srm-core-codes-enum.btdesign"
import "classpath:/btdesign/metamac-srm-core-concepts.btdesign"


Application CodesMetamac {
	basePackage=unused

	Module domain_codes_metamac {
		basePackage=org.siemac.metamac.srm.core.code

		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------  
		"Provides access to Codelists Artefacts"
		Service CodesMetamacService {

			> @CodelistVersionMetamacRepository
			> @CodeMetamacRepository
			> @CodelistFamilyRepository
			> @VariableFamilyRepository
			> @VariableRepository
			> @VariableElementRepository
			> @VariableElementOperationRepository
			> @CodelistOrderVisualisationRepository
			> @CodeOrderVisualisationRepository

			// CODELISTS

			"Creates codelist"
			@CodelistVersionMetamac createCodelist(@CodelistVersionMetamac codelistVersion) throws MetamacException;
			"Pre-Create code list"
			@CodelistVersionMetamac preCreateCodelist(@CodelistVersionMetamac codelistVersion) throws MetamacException;
			"post-Create code list"
			@CodelistVersionMetamac postCreateCodelist(@CodelistVersionMetamac codelistVersion, List<@CodelistVersionMetamac> replaceTo) throws MetamacException
			"Updates codelist"
			@CodelistVersionMetamac updateCodelist(@CodelistVersionMetamac codelistVersion) throws MetamacException;
			"Retrieves codelist by urn"
			@CodelistVersionMetamac retrieveCodelistByUrn(String urn) throws MetamacException;
			"Retrieves all codelists versions"
			List<@CodelistVersionMetamac> retrieveCodelistVersions(String urn) throws MetamacException;
			"Finds codelists by criteria"
    		PagedResult<@CodelistVersionMetamac> findCodelistsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		"Sends codelist to production validation"
    		@CodelistVersionMetamac sendCodelistToProductionValidation(String urn) throws MetamacException;
    		"Sends codelist to diffusion validation"
    		@CodelistVersionMetamac sendCodelistToDiffusionValidation(String urn) throws MetamacException;
	    	"Rejects production validation of codelist"    		
	    	@CodelistVersionMetamac rejectCodelistProductionValidation(String urn) throws MetamacException;
	    	"Rejects diffusion validation of codelist"
	    	@CodelistVersionMetamac rejectCodelistDiffusionValidation(String urn) throws MetamacException;
	    	"Publish internally a codelist"
	    	@CodelistVersionMetamac publishInternallyCodelist(String urn) throws MetamacException;
	    	"Publish externally a codelist"
	    	@CodelistVersionMetamac publishExternallyCodelist(String urn) throws MetamacException;
			"Deletes codelist version. This must be last version and no published"
    		deleteCodelist(String urn) throws MetamacException;
    		"Creates a new version of a codelist, copying metadata from version with provided urn"
    		@CodelistVersionMetamac versioningCodelist(String urnToCopy, Boolean versioningCodes, @VersionTypeEnum versionType) throws MetamacException;
    		"Ends the codelist validity"
    		@CodelistVersionMetamac endCodelistValidity(String urn) throws MetamacException;
    		"Retrieves codelist by code urn"
    		@CodelistVersionMetamac retrieveCodelistByCodeUrn(String codeUrn) throws MetamacException;

			// CODES

			"Creates code"
			@CodeMetamac createCode(String codelistUrn, @CodeMetamac code) throws MetamacException;
			"Precreate code"
    		@CodeMetamac preCreateCode(String codelistUrn, @CodeMetamac code) throws MetamacException; 
			"Updates code"
			@CodeMetamac updateCode(@CodeMetamac code) throws MetamacException;
			"Change variable element to code"
			@CodeMetamac updateCodeVariableElement(String codeUrn, String variableElementUrn) throws MetamacException;
			"Updates parent of code. parentUrn is null when code is moved to first level. Code is moved at the end of new level"
			updateCodeParent(String codeUrn, String newParentUrn) throws MetamacException;
			"Updates position of code to visualisation requested"
			updateCodeInOrderVisualisation(String codeUrn, String codelistOrderVisualisationUrn, Long newCodeIndex) throws MetamacException;
    		"Retrieves code by urn"
    		@CodeMetamac retrieveCodeByUrn(String urn) throws MetamacException;
    		"Finds codes by criteria"
    		PagedResult<@CodeMetamac> findCodesByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Deletes code"
    		deleteCode(String urn) throws MetamacException;
    		"Retrieves codes by codelist, in tree structure"
    		List<@CodeMetamac> retrieveCodesByCodelistUrn(String codelistUrn) throws MetamacException;
    		
    		// VISUALISATIONS
    		
    		"Creates visualisation"
    		@CodelistOrderVisualisation createCodelistOrderVisualisation(String codelistUrn, @CodelistOrderVisualisation codelistOrderVisualisation) throws MetamacException;
			"Updates visualisation"
			@CodelistOrderVisualisation updateCodelistOrderVisualisation(@CodelistOrderVisualisation codelistOrderVisualisation) throws MetamacException;
    		"Retrieves visualisation by identifier"
    		@CodelistOrderVisualisation retrieveCodelistOrderVisualisationByUrn(String urn) throws MetamacException;
    		"Retrieve visualisations by codelist"
    		List<@CodelistOrderVisualisation> retrieveCodelistOrderVisualisationsByCodelist(String codelistUrn)  throws MetamacException;
			"Deletes visualisation"
    		deleteCodelistOrderVisualisation(String urn) throws MetamacException;

			// CODESLIST FAMILIES
			
			"Creates codelist family"
			@CodelistFamily createCodelistFamily(@CodelistFamily codelistFamily) throws MetamacException;
			"Updates codelist family"
			@CodelistFamily updateCodelistFamily(@CodelistFamily codelistFamily) throws MetamacException;
    		"Retrieves codelist family by urn"
    		@CodelistFamily retrieveCodelistFamilyByUrn(String urn) throws MetamacException;
    		"Finds codelist families by criteria"
    		PagedResult<@CodelistFamily> findCodelistFamiliesByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Deletes codelist family"
    		deleteCodelistFamily(String urn) throws MetamacException;
			"Adds codelists to family"
			addCodelistsToCodelistFamily(List<String> codelistUrns, String codelistFamilyUrn) throws MetamacException;
			"Removes codelist from family"
			removeCodelistFromCodelistFamily(String codelistUrn, String codelistFamilyUrn) throws MetamacException;
    		
    		// VARIABLE FAMILIES
    		
    		"Creates variable family"
			@VariableFamily createVariableFamily(@VariableFamily variableFamily) throws MetamacException;
			"Updates variable family"
			@VariableFamily updateVariableFamily(@VariableFamily variableFamily) throws MetamacException;
    		"Retrieves variable family by urn"
    		@VariableFamily retrieveVariableFamilyByUrn(String urn) throws MetamacException;
    		"Finds variable families by criteria"
    		PagedResult<@VariableFamily> findVariableFamiliesByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Deletes variable family"
    		deleteVariableFamily(String urn) throws MetamacException;
    		
    		// VARIABLES
    		
    		"Creates variable"
			@Variable createVariable(@Variable variable) throws MetamacException;
			"Updates variable"
			@Variable updateVariable(@Variable variable) throws MetamacException;
    		"Retrieves variable by urn"
    		@Variable retrieveVariableByUrn(String urn) throws MetamacException;
    		"Finds variables by criteria"
    		PagedResult<@Variable> findVariablesByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Deletes variable"
    		deleteVariable(String urn) throws MetamacException;
    		"Adds variables to a family"
    		addVariablesToVariableFamily(List<String> variableUrn, String familyUrn) throws MetamacException;
    		"Removes a variable from a family"
    		removeVariableFromVariableFamily(String variableUrn, String familyUrn) throws MetamacException;

    		// VARIABLE ELEMENTS
    		
    		"Creates variable element"
			@VariableElement createVariableElement(@VariableElement variableElement) throws MetamacException;
			"Updates variable element"
			@VariableElement updateVariableElement(@VariableElement variableElement) throws MetamacException;
    		"Retrieves variable element by urn"
    		@VariableElement retrieveVariableElementByUrn(String urn) throws MetamacException;
    		"Finds variable elements by criteria"
    		PagedResult<@VariableElement> findVariableElementsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		"Find variable elements can be for codes of codelist"
    		PagedResult<@VariableElement> findVariableElementsForCodesByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String codelistUrn) throws MetamacException;
			"Deletes variable element"
    		deleteVariableElement(String urn) throws MetamacException;
    		"Adds variable element to a variable"
    		addVariableElementsToVariable(List<String> variableElementUrn, String variableUrn) throws MetamacException;
    		"Creates fusion operation"
    		@VariableElementOperation createVariableElementFusionOperation(List<String> sources, String target) throws MetamacException;
    		"Creates segregation operation"
    		@VariableElementOperation createVariableElementSegregationOperation(String source, List<String> targets) throws MetamacException;
    		"Retrieves variable element operation by code"
    		@VariableElementOperation retrieveVariableElementOperationByCode(String code) throws MetamacException;
    		"Delete fusion or segregation operation"
    		deleteVariableElementOperation(String code) throws MetamacException;
    		"Retrieves all variable elements operations of one variable"
 			List<@VariableElementOperation> retrieveVariableElementsOperationsByVariable(String variableUrn) throws MetamacException;
 			"Retrieves all variable elements operations of one variable element"
 			List<@VariableElementOperation> retrieveVariableElementsOperationsByVariableElement(String variableElementUrn) throws MetamacException;
		}

		// ----------------------------------------------------------------
		// 							ENTITIES
		// ----------------------------------------------------------------

		Entity CodelistVersionMetamac extends @CodelistVersion {
			databaseTable="TB_M_CODELISTS_VERSIONS"
			hint="idSequence=M_CODELISTS_VERSIONS"
			
			"Short name"
			- @InternationalString shortName nullable cascade="all" databaseColumn="SHORT_NAME_FK";
			"Is recommended"
			Boolean isRecommended nullable;
			"Access type"
			- @AccessTypeEnum accessType nullable;
			"Family"
			- @CodelistFamily family cascade="none" nullable databaseColumn="CODELIST_FAMILY_FK" <-> codelists;
			"Variable"
			- @Variable variable cascade="none" nullable databaseColumn="VARIABLE_FK" <-> codelists;
			"TRUE if variable has been updated. As a consequence, variable elements in codes must be removed"
			Boolean isVariableUpdated nullable transient;

			"Life cycle information"
			- @SrmLifeCycleMetadata lifeCycleMetadata databaseColumn="";

			"Codelist that replaces this one. Update in this metadata is ignored. Must be updated by replacedToCodelists metadata"
			- @CodelistVersionMetamac replacedByCodelist nullable cascade="none" databaseColumn="REPLACED_BY_CODELIST_FK"  <-> replaceToCodelists;
			"Codelists that are replaced by this one"
			- Bag<@CodelistVersionMetamac> replaceToCodelists cascade="none" fetch="lazy" <-> replacedByCodelist;
			"Order visualisations of codelist"
			- Bag<@CodelistOrderVisualisation> orderVisualisations cascade="all-delete-orphan" fetch="lazy" inverse <-> codelistVersion;
			"Default order visualisation"
			- @CodelistOrderVisualisation defaultOrderVisualisation nullable cascade="none" databaseColumn="DEFAULT_ORDER_VISUALISATION_FK";
			
			Repository CodelistVersionMetamacRepository {
				save;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByCondition(PagingParameter pagingParameter);
				@CodelistVersionMetamac findByUrn(String urn);
				@CodelistVersionMetamac retrieveCodelistVersionByProcStatus(String urn, ArrayProcStatusEnum procStatus) throws MetamacException;
				@CodelistVersionMetamac findByCode(String urn);
			}			
		}

		Entity CodeMetamac extends @Code {
			databaseTable="TB_M_CODES"
			hint="idSequence=M_CODES"
			
			"Short name. Only filled if code has not related variable element"
			- @InternationalString shortName nullable cascade="all" databaseColumn="SHORT_NAME_FK";
			"Variable element"
			- @VariableElement variableElement nullable cascade="none" fetch="lazy" databaseColumn="VARIABLE_ELEMENT_FK"  <-> codes;
			"Order visualisations of code"
			- Bag<@CodeOrderVisualisation> orderVisualisations cascade="all-delete-orphan" fetch="lazy" inverse <-> code;
			
			Repository CodeMetamacRepository {
				save;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				@CodeMetamac findByUrn(String urn);
				findByCondition(PagingParameter pagingParameter);
			}
		}
		
		Entity CodelistOrderVisualisation {
			databaseTable="TB_M_CODELIST_ORDER_VISUAL"
			hint="idSequence=M_CODELIST_ORDER_VISUAL"
			
			"Nameable artefact"
			- @NameableArtefact nameableArtefact databaseColumn="NAMEABLE_ARTEFACT_FK" not nullable cascade="all";
			"Last update to optimistic locking"
			DateTimeTZ updateDate nullable;
			"Codes"
			- Bag<@CodeOrderVisualisation> codes cascade="all-delete-orphan" fetch="lazy" inverse orderby="id asc" <-> codelistVisualisation;
			"Relation to codelist"			
			- @CodelistVersionMetamac codelistVersion not nullable cascade="none" fetch="lazy" databaseColumn="CODELIST_FK" <-> orderVisualisations;
			
			Repository CodelistOrderVisualisationRepository {
				save;
				delete;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				@CodelistOrderVisualisation findByUrn(String orderVisualisationUrn);
			}			
		}	
		
		Entity CodeOrderVisualisation {
			databaseTable="TB_M_CODE_ORDER_VISUAL"
			hint="idSequence=M_CODE_ORDER_VISUAL"
			
			"Code"			
			- @CodeMetamac code not nullable cascade="none" databaseColumn="CODE_FK" <-> orderVisualisations;
			"Index in visualisation"
			Long codeIndex not nullable;
			"Codelist visualisation"			
			- @CodelistOrderVisualisation codelistVisualisation not nullable cascade="none" databaseColumn="CODELIST_VISUALISATION_FK" <-> codes;
			
			Repository CodeOrderVisualisationRepository {
				save;
				findByQuery(String query, Map<String, Object> parameters);
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				List<@CodeOrderVisualisation> findByCodeUrn(String codeUrn);
			}	
		}					

		Entity CodelistFamily {
			databaseTable="TB_M_CODELIST_FAMILIES"
			hint="idSequence=M_CODELIST_FAMILIES"

			"Nameable artefact"
			- @NameableArtefact nameableArtefact databaseColumn="NAMEABLE_ARTEFACT_FK" not nullable cascade="all";
			"Codelists"
			- Bag<@CodelistVersionMetamac> codelists cascade="none" fetch="lazy" inverse <-> family;
			"Last update to optimistic locking"
			DateTimeTZ updateDate nullable;
			
			Repository CodelistFamilyRepository {
				save;
				delete;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByCondition(PagingParameter pagingParameter);
				@CodelistFamily findByUrn(String urn);
			}
		}
		
		Entity VariableFamily {
			databaseTable="TB_M_VARIABLE_FAMILIES"
			hint="idSequence=M_VARIABLE_FAMILIES"

			"Nameable artefact"
			- @NameableArtefact nameableArtefact databaseColumn="NAMEABLE_ARTEFACT_FK" not nullable cascade="all";
			"Variables"
			- Bag<@Variable> variables cascade="none" fetch="lazy" databaseColumn="VARIABLE_FK" <-> families;
			"Last update to optimistic locking"
			DateTimeTZ updateDate nullable;
			
			Repository VariableFamilyRepository {
				save;
				delete;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByCondition(PagingParameter pagingParameter);
				@VariableFamily findByUrn(String urn);
			}
		}
		
		Entity Variable {
			databaseTable="TB_M_VARIABLES"
			hint="idSequence=M_VARIABLES"
			
			"Nameable artefact"
			- @NameableArtefact nameableArtefact databaseColumn="NAMEABLE_ARTEFACT_FK" not nullable cascade="all";
			"Short name"
			- @InternationalString shortName not nullable cascade="all" databaseColumn="SHORT_NAME_FK";
			"Date from which the variable is valid"
			DateTimeTZ validFrom nullable;
			"Date from which variable is superceded"
			DateTimeTZ validTo nullable;
			"Variable that replaces this one. Update in this metadata is ignored. Must be updated by replacedToVariables metadata"
			- @Variable replacedByVariable nullable cascade="none" databaseColumn="REPLACED_BY_VARIABLE_FK"  <-> replaceToVariables;
			"Variables that are replaced by this one"
			- Bag<@Variable> replaceToVariables cascade="none" fetch="lazy" <-> replacedByVariable;
			
			"Variable families"
			- Bag<@VariableFamily> families cascade="none" fetch="lazy" databaseColumn="VARIABLE_FAMILY_FK" databaseJoinTable="TB_M_VAR_FAMILIES_VARIABLES" <-> variables;
			"Codelists"
			- Bag<@CodelistVersionMetamac> codelists cascade="none" fetch="lazy" inverse <-> variable;
			"Concepts"
			- Bag<@ConceptMetamac> concepts cascade="none" fetch="lazy" <-> variable;
			"Elements"
			- Bag<@VariableElement> variableElements cascade="all-delete-orphan" fetch="lazy" <-> variable;
			"Variable elements operations"
			- Bag<@VariableElementOperation> variableElementsOperations cascade="all-delete-orphan" fetch="lazy" <-> variable;
			
			"Last update to optimistic locking"
			DateTimeTZ updateDate nullable;
			
			Repository VariableRepository {
				save;
				delete;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByCondition(PagingParameter pagingParameter);
				@Variable findByUrn(String urn);
			}
		}
		
		Entity VariableElement {
			databaseTable="TB_M_VARIABLE_ELEMENTS"
			hint="idSequence=M_VARIABLE_ELEMENTS"
			
			"Nameable artefact"
			- @NameableArtefact nameableArtefact databaseColumn="NAMEABLE_ARTEFACT_FK" not nullable cascade="all";
			"Short name"
			- @InternationalString shortName not nullable cascade="all" databaseColumn="SHORT_NAME_FK";
			"Date from which the variable element is valid"
			DateTimeTZ validFrom nullable;
			"Date from which variable element is superceded"
			DateTimeTZ validTo nullable;
			"Variable element that replaces this one. Update in this metadata is ignored. Must be updated by replacedToVariableElements metadata"
			- @VariableElement replacedByVariableElement nullable cascade="none" databaseColumn="REPLACED_BY_VAR_ELEMENT_FK"  <-> replaceToVariableElements;
			"Variable elements that are replaced by this one"
			- Bag<@VariableElement> replaceToVariableElements cascade="none" fetch="lazy" <-> replacedByVariableElement;
			
			"Variable"
			- @Variable variable not nullable cascade="none" databaseColumn="VARIABLE_FK"  <-> variableElements;
			"Concepts"
			- Bag<@CodeMetamac> codes cascade="none" fetch="lazy" <-> variableElement;
			"Last update to optimistic locking"
			DateTimeTZ updateDate nullable;
			
			Repository VariableElementRepository {
				save;
				delete;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByCondition(PagingParameter pagingParameter);
				@VariableElement findByUrn(String urn);
			}
		}
		
		Entity VariableElementOperation {
			databaseTable="TB_M_VAR_ELEM_OPERATIONS"
			hint="idSequence=M_VAR_ELEM_OPERATIONS"
			
			"Code. It is a generated UUID, not semantic identifier"
			String code not nullable;
			"Operation type"
			- @VariableElementOperationTypeEnum operationType not nullable;
			"Sources"
			- Bag<@VariableElement> sources cascade="none" databaseJoinTable="TB_M_VAR_ELEM_OP_SOURCES" databaseColumn="SOURCE_FK" databaseJoinColumn="OPERATION_FK";
			"Targets"
			- Bag<@VariableElement> targets cascade="none" databaseJoinTable="TB_M_VAR_ELEM_OP_TARGETS" databaseColumn="TARGET_FK" databaseJoinColumn="OPERATION_FK";
			"Variable"
			- @Variable variable not nullable cascade="none" databaseColumn="VARIABLE_FK" <-> variableElementsOperations;
			
			Repository VariableElementOperationRepository {
				save;
				delete;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByQuery(String query, Map<String, Object> parameters);
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				@VariableElementOperation findByCode(String code);
				List<@VariableElementOperation> findByVariableElementUrn(String urn);
			}
		}
	}
}