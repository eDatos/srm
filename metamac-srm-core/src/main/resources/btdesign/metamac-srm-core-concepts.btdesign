import "classpath:/btdesign/export/metamac-core-common-entity.btdesign"
import "classpath:/btdesign/metamac-core-common-enum.btdesign"
import "classpath:/btdesign/statistic-sdmx-core-concepts.btdesign"
import "classpath:/btdesign/metamac-srm-core-enum.btdesign"
import "classpath:/btdesign/metamac-srm-core-concepts-enum.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-enums.btdesign"
import "classpath:/btdesign/metamac-srm-core-base.btdesign"
import "classpath:/btdesign/metamac-srm-core-codes.btdesign"

Application ConceptsMetamac {
	basePackage=unused

	Module domain_concepts_metamac {
		basePackage=org.siemac.metamac.srm.core.concept

		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------  
		"Provides access to Scheme Concepts Artefacts"
		Service ConceptsMetamacService {
			
			> @ConceptSchemeVersionMetamacRepository
			> @ConceptMetamacRepository
			> @ConceptTypeRepository
			
			"Creates concept scheme"
			@ConceptSchemeVersionMetamac createConceptScheme(@ConceptSchemeVersionMetamac conceptSchemeVersion) throws MetamacException;
			"Pre-Create concept scheme"
			@ConceptSchemeVersionMetamac preCreateConceptScheme(@ConceptSchemeVersionMetamac conceptSchemeVersion) throws MetamacException;
			"Updates concept scheme"
			@ConceptSchemeVersionMetamac updateConceptScheme(@ConceptSchemeVersionMetamac conceptSchemeVersion) throws MetamacException;
			"Retrieves concept scheme by urn"
			@ConceptSchemeVersionMetamac retrieveConceptSchemeByUrn(String urn) throws MetamacException;
			"Retrieves all concept schemes versions"
			List<@ConceptSchemeVersionMetamac> retrieveConceptSchemeVersions(String urn) throws MetamacException;
			"Finds concept schemes by criteria"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		"Finds concept schemes with concepts that can be extended"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesByConditionWithConceptsCanBeExtended(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		"Finds concept schemes with concepts that can be role"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesByConditionWithConceptsCanBeRole(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		"Sends concept scheme to production validation"
    		@ConceptSchemeVersionMetamac sendConceptSchemeToProductionValidation(String urn) throws MetamacException;
    		"Sends concept scheme to diffusion validation"
    		@ConceptSchemeVersionMetamac sendConceptSchemeToDiffusionValidation(String urn) throws MetamacException;
	    	"Rejects production validation of concept scheme"    		
	    	@ConceptSchemeVersionMetamac rejectConceptSchemeProductionValidation(String urn) throws MetamacException;
	    	"Rejects diffusion validation of concept scheme"
	    	@ConceptSchemeVersionMetamac rejectConceptSchemeDiffusionValidation(String urn) throws MetamacException;
	    	"Publish internally a concept scheme"
	    	@ConceptSchemeVersionMetamac publishInternallyConceptScheme(String urn, Boolean forceLatestFinal) throws MetamacException;
	    	"Publish externally a concept scheme"
	    	@ConceptSchemeVersionMetamac publishExternallyConceptScheme(String urn) throws MetamacException;
			"Deletes concept scheme version. This must be last version and no published"
    		deleteConceptScheme(String urn) throws MetamacException;
    		"Creates a new version of a concept scheme, copying metadata from version with provided urn"
    		TaskInfo versioningConceptScheme(String urnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		"Creates a temporal version of a concept scheme, copying metadata from version with provided urn"
    		TaskInfo createTemporalVersionConceptScheme(String urnToCopy) throws MetamacException;
    		"Creates a new version of a concept scheme from temporal version with provided urn"
    		TaskInfo createVersionFromTemporalConceptScheme(String urnToCopy, @VersionTypeEnum versionTypeEnum) throws MetamacException;
    		"Merge temporal version into published version"
    		@ConceptSchemeVersionMetamac mergeTemporalVersion(@ConceptSchemeVersionMetamac conceptSchemeTemporalVersion) throws MetamacException;
    		"Versioning related concepts (metadata of Metamac 'relatedConcepts'). Note: other relations are copied in copy callback"
    		versioningRelatedConcepts(@ConceptSchemeVersionMetamac conceptSchemeVersionToCopy, @ConceptSchemeVersionMetamac conceptSchemeNewVersion) throws MetamacException;
    		"Ends the concept scheme validity"
    		@ConceptSchemeVersionMetamac endConceptSchemeValidity(String urn) throws MetamacException;
    		"Retrieves concepts scheme by concept urn"
    		@ConceptSchemeVersionMetamac retrieveConceptSchemeByConceptUrn(String conceptUrn) throws MetamacException;
			"Checks translations for concept scheme"
    		List<MetamacExceptionItem> checkConceptSchemeVersionTranslations(Long itemSchemeVersionId, String locale);
    		
			"Creates concept"
			@ConceptMetamac createConcept(String conceptSchemeUrn, @ConceptMetamac concept) throws MetamacException;
			"Pre-Create concept"
			@ConceptMetamac preCreateConcept(String conceptSchemeUrn, @ConceptMetamac concept) throws MetamacException;
			"Updates concept"
			@ConceptMetamac updateConcept(@ConceptMetamac concept) throws MetamacException;
    		"Retrieves concept by urn"
    		@ConceptMetamac retrieveConceptByUrn(String urn) throws MetamacException;
    		"Finds concepts by criteria"
    		PagedResult<@ConceptMetamac> findConceptsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		"Finds concepts than can be Role by criteria"
    		PagedResult<@ConceptMetamac> findConceptsCanBeRoleByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Finds concepts than can be extended by criteria"
    		PagedResult<@ConceptMetamac> findConceptsCanBeExtendedByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Deletes concept"
    		deleteConcept(String urn) throws MetamacException;
    		"Retrieves concepts by concept scheme in locale requested"
    		List<ItemVisualisationResult> retrieveConceptsByConceptSchemeUrn(String conceptSchemeUrn, String locale) throws MetamacException;
    		"Adds a concepts relation"
    		addRelatedConcept(String urn1, String urn2) throws MetamacException;
    		"Deletes a concepts relation"
    		deleteRelatedConcept(String urn1, String urn2) throws MetamacException;
    		"Retrieves all related concepts with a concept"
    		List<@ConceptMetamac> retrieveRelatedConcepts(String urn) throws MetamacException;
    		"Adds a concepts relation of type 'roles'"
    		addRoleConcept(String urn, String conceptRoleUrn) throws MetamacException;
    		"Deletes a concepts relation of type 'roles'"
    		deleteRoleConcept(String urn, String conceptRoleUrn) throws MetamacException;
    		"Retrieves all related concepts with a concept with relation 'roles'"
    		List<@ConceptMetamac> retrieveRoleConcepts(String urn) throws MetamacException;
    		
    		"Finds all concept types"
    		List<@ConceptType> findAllConceptTypes throws MetamacException;
    		"Retrieves concept type by identifier"
    		@ConceptType retrieveConceptTypeByIdentifier(String identifier) throws MetamacException;
    		
    		"Find codelists belong to same variable of concept"
    		PagedResult<@CodelistVersionMetamac> findCodelistsCanBeEnumeratedRepresentationForConceptByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String conceptUrn) throws MetamacException;
		}

		// ----------------------------------------------------------------
		// 							ENTITIES
		// ----------------------------------------------------------------  
		Entity ConceptSchemeVersionMetamac extends @ConceptSchemeVersion {
			databaseTable="TB_M_CONCEPT_SCHEMES_VERSIONS"
			hint="idSequence=M_CONCEPT_SCHEMES_VERSIONS"
			
			"Type"
			- @ConceptSchemeTypeEnum type nullable databaseColumn="CONCEPT_SCHEME_TYPE";
			"True if type has been updated"
			Boolean isTypeUpdated nullable transient;
			"Related operation, only when type is Operation"
			- @ExternalItem relatedOperation nullable cascade="all" databaseColumn="RELATED_OPERATION_FK";
			
			"Life cycle information"
			- @SrmLifeCycleMetadata lifeCycleMetadata databaseColumn="";
			
			Repository ConceptSchemeVersionMetamacRepository {
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByCondition(PagingParameter pagingParameter);
				@ConceptSchemeVersionMetamac findByUrn(String urn);
				@ConceptSchemeVersionMetamac retrieveConceptSchemeVersionByProcStatus(String urn, ArrayProcStatusEnum procStatus) throws MetamacException;
				@ConceptSchemeVersionMetamac findByConcept(String urn);
				checkConceptSchemeVersionTranslations(Long itemSchemeVersionId, String locale, List<MetamacExceptionItem> exceptionItems);
			}			
		}
		
		Entity ConceptMetamac extends @Concept {
			databaseTable="TB_M_CONCEPTS"
			hint="idSequence=M_CONCEPTS"
			
			"Plural name"
			- @InternationalString pluralName nullable cascade="all" fetch="lazy" databaseColumn="PLURAL_NAME_FK";
			"Acronym"
			- @InternationalString acronym nullable cascade="all" fetch="lazy" databaseColumn="ACRONYM_FK";
			"Documents of accepted authority, which contain the definition"
			- @InternationalString descriptionSource nullable cascade="all" fetch="lazy" databaseColumn="DESCRIPTION_SOURCE_FK";
			"A description of the circumstances in which the European Statistical System uses the variable and the purposes this use serves"
			- @InternationalString context nullable cascade="all" fetch="lazy" databaseColumn="CONTEXT_FK";
			"Web address where the relevant methodological manual is disseminated"
			- @InternationalString docMethod nullable cascade="all" fetch="lazy" databaseColumn="DOC_METHOD_FK";
			"Concept role"
			- @ConceptRoleEnum sdmxRelatedArtefact nullable;
       		"Concept type"
       		- @ConceptType conceptType cascade="none" nullable fetch="lazy" databaseColumn="CONCEPT_TYPE_FK";
			"A description of the way the derived variable is computed with the use of other variables"
			- @InternationalString derivation nullable cascade="all" fetch="lazy" databaseColumn="DERIVATION_FK";
			"Web addresses where relevant legal acts are disseminated"
			- @InternationalString legalActs nullable cascade="all" fetch="lazy" databaseColumn="LEGAL_ACTS_FK";
			"Extends concept of other concept scheme"
			- @ConceptMetamac conceptExtends nullable cascade="none" fetch="lazy" databaseColumn="EXTENDS_FK";
			"Roles"
			- Bag<@ConceptMetamac> roleConcepts cascade="none" fetch="lazy" databaseJoinTable="TB_M_CONCEPT_ROLES" databaseJoinColumn="CONCEPT_FK" databaseColumn="CONCEPT_ROLE_FK" ;
			"Related concepts in same concept scheme"
			- Bag<@ConceptMetamac> relatedConcepts cascade="none" fetch="lazy" databaseJoinTable="TB_M_CONCEPT_RELATED" databaseJoinColumn="CONCEPT_FK" databaseColumn="CONCEPT_RELATED_FK" ;
			"Variable"
			- @Variable variable nullable cascade="none" fetch="lazy" databaseColumn="VARIABLE_FK" <-> concepts;
			
			Repository ConceptMetamacRepository {
				save;
				findByQuery;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				@ConceptMetamac findByUrn(String urn);
				findByCondition(PagingParameter pagingParameter);
				List<ItemResult> findConceptsByConceptSchemeUnordered(Long conceptSchemeVersionId, ItemMetamacResultSelection resultSelection);
				List<ItemVisualisationResult> findConceptsByConceptSchemeUnorderedToVisualisation(Long conceptSchemeVersionId, String locale) throws MetamacException;
				checkConceptTranslations(Long itemSchemeVersionId, String locale, List<MetamacExceptionItem> exceptionItems);
			}
		}
		
		"Concept Type List"
    	Entity ConceptType {
    		databaseTable="TB_M_LIS_CONCEPT_TYPES"
    		hint="idSequence=M_CONCEPT_TYPES"
    		not auditable
    		!optimisticLocking
    		
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			"Code identifier"    		
    		String identifier;
    		"Description"
    		- @InternationalString description nullable databaseColumn="DESCRIPTION_FK";
    		
    		Repository ConceptTypeRepository {
    			@ConceptType findByIdentifier(String identifier);
    			findAll;
    			findByCondition;
    		}
    	}		
	}
}