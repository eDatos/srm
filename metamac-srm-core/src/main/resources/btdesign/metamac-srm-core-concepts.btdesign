import "classpath:/btdesign/statistic-sdmx-core-common.btdesign"
import "classpath:/btdesign/metamac-core-common-enum.btdesign"
import "classpath:/btdesign/statistic-sdmx-core-concepts.btdesign"
import "classpath:/btdesign/metamac-srm-core-enum.btdesign"
import "classpath:/btdesign/metamac-srm-core-concepts-enum.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-enums.btdesign"
import "classpath:/btdesign/metamac-srm-core-base.btdesign"
import "classpath:/btdesign/metamac-srm-core-codes.btdesign"

Application ConceptsMetamac {
	basePackage=unused

	Module domain_concepts_metamac {
		basePackage=org.siemac.metamac.srm.core.concept

		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------  
		"Provides access to Scheme Concepts Artefacts"
		Service ConceptsMetamacService {
			
			> @ConceptSchemeVersionMetamacRepository
			> @ConceptMetamacRepository
			> @QuantityRepository
			> @ConceptTypeRepository
			
			"Creates concept scheme"
			@ConceptSchemeVersionMetamac createConceptScheme(@ConceptSchemeVersionMetamac conceptSchemeVersion) throws MetamacException;
			"Pre-Create concept scheme"
			@ConceptSchemeVersionMetamac preCreateConceptScheme(@ConceptSchemeVersionMetamac conceptSchemeVersion) throws MetamacException;
			"Updates concept scheme"
			@ConceptSchemeVersionMetamac updateConceptScheme(@ConceptSchemeVersionMetamac conceptSchemeVersion) throws MetamacException;
			"Retrieves concept scheme by urn"
			@ConceptSchemeVersionMetamac retrieveConceptSchemeByUrn(String urn) throws MetamacException;
			"Retrieves all concept schemes versions"
			List<@ConceptSchemeVersionMetamac> retrieveConceptSchemeVersions(String urn) throws MetamacException;
			"Finds concept schemes by criteria"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		"Finds concept schemes with concepts that can be extended"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesWithConceptsCanBeExtendedByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		"Finds concept schemes with concepts that can be enumerated representation for concepts"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesCanBeEnumeratedRepresentationForConceptsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String conceptUrn)  throws MetamacException;
    		"Finds concept schemes with concepts that can be role"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesWithConceptsCanBeRoleByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Finds concept schemes with concepts than can be numerator in quantity by criteria"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesWithConceptsCanBeQuantityNumeratorByCondition(String conceptSchemeUrn, List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Finds concept schemes with concepts than can be denominator in quantity by criteria"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesWithConceptsCanBeQuantityDenominatorByCondition(String conceptSchemeUrn, List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Finds concept schemes with concepts than can be base quantity in quantity by criteria"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesWithConceptsCanBeQuantityBaseQuantityByCondition(String conceptSchemeUrn, List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Find codelists with codes than than can be unit in concept quantity by criteria"
    		PagedResult<@CodelistVersionMetamac> findCodelistsWithCodesCanBeQuantityUnitByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Find codelists with codes than than can be base location in concept quantity by criteria"
    		PagedResult<@CodelistVersionMetamac> findCodelistsWithCodesCanBeQuantityBaseLocationByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		"Sends concept scheme to production validation"
    		@ConceptSchemeVersionMetamac sendConceptSchemeToProductionValidation(String urn) throws MetamacException;
    		"Sends concept scheme to diffusion validation"
    		@ConceptSchemeVersionMetamac sendConceptSchemeToDiffusionValidation(String urn) throws MetamacException;
	    	"Rejects production validation of concept scheme"    		
	    	@ConceptSchemeVersionMetamac rejectConceptSchemeProductionValidation(String urn) throws MetamacException;
	    	"Rejects diffusion validation of concept scheme"
	    	@ConceptSchemeVersionMetamac rejectConceptSchemeDiffusionValidation(String urn) throws MetamacException;
	    	"Publish internally a concept scheme"
	    	@ConceptSchemeVersionMetamac publishInternallyConceptScheme(String urn, Boolean forceLatestFinal) throws MetamacException;
	    	"Publish externally a concept scheme"
	    	@ConceptSchemeVersionMetamac publishExternallyConceptScheme(String urn) throws MetamacException;
	    	"Resend a concept scheme"
	    	org.siemac.metamac.srm.core.serviceimpl.result.SendStreamMessageResult resendConceptScheme(@ConceptSchemeVersionMetamac conceptSchemeVersion) throws MetamacException;
			"Deletes concept scheme version. This must be last version and no published"
    		deleteConceptScheme(String urn) throws MetamacException;
    		"Copies a concept scheme version, creating a new concept scheme, newCode is optional, skip to reuse before, but if the maintainer of source and target are the same the newCode is mandatory"
    		TaskInfo copyConceptScheme(String urnToCopy, String newCode) throws MetamacException;
    		"Creates a new version of a concept scheme, copying metadata from version with provided urn"
    		TaskInfo versioningConceptScheme(String urnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		"Creates a temporal version of a concept scheme, copying metadata from version with provided urn"
    		TaskInfo createTemporalVersionConceptScheme(String urnToCopy) throws MetamacException;
    		"Creates a new version of a concept scheme from temporal version with provided urn"
    		TaskInfo createVersionFromTemporalConceptScheme(String urnToCopy, @VersionTypeEnum versionTypeEnum) throws MetamacException;
    		"Merge temporal version into published version"
    		@ConceptSchemeVersionMetamac mergeTemporalVersion(@ConceptSchemeVersionMetamac conceptSchemeTemporalVersion) throws MetamacException;
    		"Versioning related concepts (metadata of Metamac 'relatedConcepts'). Note: other relations are copied in copy callback"
    		versioningRelatedConcepts(@ConceptSchemeVersionMetamac conceptSchemeVersionToCopy, @ConceptSchemeVersionMetamac conceptSchemeNewVersion) throws MetamacException;
    		"Versioning quantity. Note: other relations are copied in copy callback"
    		versioningConceptsQuantity(@ConceptSchemeVersionMetamac conceptSchemeVersionToCopy, @ConceptSchemeVersionMetamac conceptSchemeNewVersion) throws MetamacException;
    		"Starts the concept scheme validity"
    		@ConceptSchemeVersionMetamac startConceptSchemeValidity(String urn) throws MetamacException;
    		"Ends the concept scheme validity"
    		@ConceptSchemeVersionMetamac endConceptSchemeValidity(String urn) throws MetamacException;
    		"Retrieves concepts scheme by concept urn"
    		@ConceptSchemeVersionMetamac retrieveConceptSchemeByConceptUrn(String conceptUrn) throws MetamacException;
			"Checks translations for concept scheme"
    		checkConceptSchemeVersionTranslations(Long itemSchemeVersionId, String locale, Map<String, MetamacExceptionItem> exceptionsByResourceUrn) throws MetamacException;
			"Checks related resources are externally published"
    		checkConceptSchemeWithRelatedResourcesExternallyPublished(@ConceptSchemeVersionMetamac conceptSchemeVersion) throws MetamacException;
    		
			"Creates concept"
			@ConceptMetamac createConcept(String conceptSchemeUrn, @ConceptMetamac concept) throws MetamacException;
			"Pre-Create concept"
			@ConceptMetamac preCreateConcept(String conceptSchemeUrn, @ConceptMetamac concept) throws MetamacException;
			"Updates concept"
			@ConceptMetamac updateConcept(@ConceptMetamac concept) throws MetamacException;
			"Checks concept representation is valid"
			MetamacExceptionItem checkConceptRepresentation(@ConceptSchemeVersionMetamac conceptSchemeVersion, @ConceptMetamac concept, boolean throwException) throws MetamacException;
    		"Retrieves concept by urn"
    		@ConceptMetamac retrieveConceptByUrn(String urn) throws MetamacException;
    		"Imports concepts in TSV format"
    		TaskImportationInfo importConceptsTsv(String conceptSchemeUrn, java.io.File file, String fileName, boolean updateAlreadyExisting, Boolean canBeBackground) throws MetamacException;
			"Exports concepts in TSV format"
    		String exportConceptsTsv(String conceptSchemetUrn) throws MetamacException;
			"Deletes concept"
    		deleteConcept(String urn) throws MetamacException;
    		"Retrieves concepts by concept scheme in locale requested"
    		List<ConceptMetamacVisualisationResult> retrieveConceptsByConceptSchemeUrn(String conceptSchemeUrn, String locale) throws MetamacException;
    		"Retrieves concepts by concept scheme ordered"
    		List<ItemResult> retrieveConceptsByConceptSchemeUrnOrderedInDepth(String conceptSchemeUrn, ItemMetamacResultSelection itemMetamacResultSelection) throws MetamacException;
    		"Adds a concepts relation"
    		addRelatedConcept(String urn1, String urn2) throws MetamacException;
    		"Deletes a concepts relation"
    		deleteRelatedConcept(String urn1, String urn2) throws MetamacException;
    		"Retrieves all related concepts with a concept"
    		List<@ConceptMetamac> retrieveRelatedConcepts(String urn) throws MetamacException;
    		"Adds a concepts relation of type 'roles'"
    		addRoleConcept(String urn, String conceptRoleUrn) throws MetamacException;
    		"Deletes a concepts relation of type 'roles'"
    		deleteRoleConcept(String urn, String conceptRoleUrn) throws MetamacException;
    		"Retrieves all related concepts with a concept with relation 'roles'"
    		List<@ConceptMetamac> retrieveRoleConcepts(String urn) throws MetamacException;
    		"Finds concepts by criteria"
    		PagedResult<@ConceptMetamac> findConceptsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		"Finds concepts than can be Role by criteria"
    		PagedResult<@ConceptMetamac> findConceptsCanBeRoleByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Finds concepts than can be extended by criteria"
    		PagedResult<@ConceptMetamac> findConceptsCanBeExtendedByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Finds concepts than can be numerator in quantity by criteria"
    		PagedResult<@ConceptMetamac> findConceptsCanBeQuantityNumeratorByCondition(String conceptSchemeUrn, List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Finds concepts than can be denominator in quantity by criteria"
    		PagedResult<@ConceptMetamac> findConceptsCanBeQuantityDenominatorByCondition(String conceptSchemeUrn, List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Finds concepts than can be base quantity in quantity by criteria"
    		PagedResult<@ConceptMetamac> findConceptsCanBeQuantityBaseQuantityByCondition(String conceptSchemeUrn, List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Finds codes than can be unit in concept quantity by criteria"
    		PagedResult<@CodeMetamac> findCodesCanBeQuantityUnitByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
			"Finds codes than can be base location in concept quantity by criteria"
    		PagedResult<@CodeMetamac> findCodesCanBeQuantityBaseLocationByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		
    		"Finds all concept types"
    		List<@ConceptType> findAllConceptTypes throws MetamacException;
    		"Retrieves concept type by identifier"
    		@ConceptType retrieveConceptTypeByIdentifier(String identifier) throws MetamacException;
    		
    		"Find codelists belong to same variable of concept. Can specify variable instead concept"
    		PagedResult<@CodelistVersionMetamac> findCodelistsCanBeEnumeratedRepresentationForConceptByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String conceptUrn, String variableUrn) throws MetamacException;
    		
    		"Updates parent of concept. parentUrn is null when concept is moved to first level. Concept is moved at the end of new level"
			updateConceptParent(String conceptUrn, String newConceptParentUrn, Integer newConceptIndex) throws MetamacException;
			"Updates position of concept"
			updateConceptInOrder(String conceptUrn, String conceptSchemeUrn, Integer newConceptIndex) throws MetamacException;
		}

		// ----------------------------------------------------------------
		// 							ENTITIES
		// ----------------------------------------------------------------  
		Entity ConceptSchemeVersionMetamac extends @ConceptSchemeVersion {
			databaseTable="TB_M_CONCEPT_SCHEMES_VERSIONS"
			hint="idSequence=M_CONCEPT_SCHEMES_VERSIONS"
			
			"Type"
			- @ConceptSchemeTypeEnum type nullable databaseColumn="CONCEPT_SCHEME_TYPE";
			"True if type has been updated"
			Boolean isTypeUpdated nullable transient;
			"True if previous type was empty"
			Boolean isTypeEmptyPreviously nullable transient;
			"Related operation, only when type is Operation"
			- @ExternalItem relatedOperation nullable cascade="all" databaseColumn="RELATED_OPERATION_FK";
			"Stream message status"
            - @StreamMessageStatusEnum streamMessageStatus;
			
			"Life cycle information"
			- @SrmLifeCycleMetadata lifeCycleMetadata databaseColumn="";
			
			Repository ConceptSchemeVersionMetamacRepository {
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByCondition(PagingParameter pagingParameter);
				@ConceptSchemeVersionMetamac findByUrn(String urn);
				@ConceptSchemeVersionMetamac retrieveConceptSchemeVersionByProcStatus(String urn, ArrayProcStatusEnum procStatus) throws MetamacException;
				@ConceptSchemeVersionMetamac findByConcept(String urn);
				checkConceptSchemeVersionTranslations(Long itemSchemeVersionId, String locale, Map<String, MetamacExceptionItem> exceptionItemsByUrn) throws MetamacException;
			}			
		}
		
		Entity ConceptMetamac extends @Concept {
			databaseTable="TB_M_CONCEPTS"
			hint="idSequence=M_CONCEPTS"
			
			"Plural name"
			- @InternationalString pluralName nullable cascade="all" fetch="lazy" databaseColumn="PLURAL_NAME_FK";
			"Acronym"
			- @InternationalString acronym nullable cascade="all" fetch="lazy" databaseColumn="ACRONYM_FK";
			"Documents of accepted authority, which contain the definition"
			- @InternationalString descriptionSource nullable cascade="all" fetch="lazy" databaseColumn="DESCRIPTION_SOURCE_FK";
			"A description of the circumstances in which the European Statistical System uses the variable and the purposes this use serves"
			- @InternationalString context nullable cascade="all" fetch="lazy" databaseColumn="CONTEXT_FK";
			"Web address where the relevant methodological manual is disseminated"
			- @InternationalString docMethod nullable cascade="all" fetch="lazy" databaseColumn="DOC_METHOD_FK";
			"Concept role"
			- @ConceptRoleEnum sdmxRelatedArtefact nullable;
       		"Concept type"
       		- @ConceptType conceptType cascade="none" nullable fetch="lazy" databaseColumn="CONCEPT_TYPE_FK";
			"A description of the way the derived variable is computed with the use of other variables"
			- @InternationalString derivation nullable cascade="all" fetch="lazy" databaseColumn="DERIVATION_FK";
			"Web addresses where relevant legal acts are disseminated"
			- @InternationalString legalActs nullable cascade="all" fetch="lazy" databaseColumn="LEGAL_ACTS_FK";
			"Extends concept of other concept scheme"
			- @ConceptMetamac conceptExtends nullable cascade="none" fetch="lazy" databaseColumn="EXTENDS_FK";
			"Roles"
			- Bag<@ConceptMetamac> roleConcepts cascade="none" fetch="lazy" databaseJoinTable="TB_M_CONCEPT_ROLES" databaseJoinColumn="CONCEPT_FK" databaseColumn="CONCEPT_ROLE_FK" ;
			"Related concepts in same concept scheme"
			- Bag<@ConceptMetamac> relatedConcepts cascade="none" fetch="lazy" databaseJoinTable="TB_M_CONCEPT_RELATED" databaseJoinColumn="CONCEPT_FK" databaseColumn="CONCEPT_RELATED_FK" ;
			"Variable"
			- @Variable variable nullable cascade="none" fetch="lazy" databaseColumn="VARIABLE_FK" <-> concepts;
			"Quantity"
			- @Quantity quantity nullable cascade="all" fetch="lazy" databaseColumn="QUANTITY_FK";
			"Order"
			Integer orderValue nullable;

			Repository ConceptMetamacRepository {
				save;
				findByQuery;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				@ConceptMetamac findByUrn(String urn);
				findByCondition(PagingParameter pagingParameter);
				List<ItemResult> findConceptsByConceptSchemeUnordered(Long conceptSchemeVersionId, ItemMetamacResultSelection resultSelection) throws MetamacException;
				List<ItemResult> findConceptsByConceptSchemeOrderedInDepth(Long conceptSchemeVersionId, ItemMetamacResultSelection resultSelection) throws MetamacException;
				List<ConceptMetamacVisualisationResult> findConceptsByConceptSchemeUnorderedToVisualisation(Long conceptSchemeVersionId, String locale) throws MetamacException;
				checkConceptTranslations(Long itemSchemeVersionId, String locale, Map<String, MetamacExceptionItem> exceptionItemsByUrn) throws MetamacException;
				@ConceptMetamac retrieveConceptWithQuantityId(Long quantityId);

				checkConceptsWithConceptExtendsExternallyPublished(Long itemSchemeVersionId, Map<String, MetamacExceptionItem> exceptionItemsByUrn) throws MetamacException;
				checkConceptsWithConceptRoleExternallyPublished(Long itemSchemeVersionId, Map<String, MetamacExceptionItem> exceptionItemsByUrn) throws MetamacException;
				checkConceptsWithQuantityExternallyPublished(Long itemSchemeVersionId, Map<String, MetamacExceptionItem> exceptionItemsByUrn) throws MetamacException;
				checkConceptsWithRepresentationExternallyPublished(Long itemSchemeVersionId, Map<String, MetamacExceptionItem> exceptionItemsByUrn) throws MetamacException;
				
				Integer getConceptMaximumOrderInLevel(@ConceptSchemeVersionMetamac conceptSchemeVersion, @Concept parent);
				Integer reorderConceptsDeletingOneConcept(@ConceptSchemeVersionMetamac conceptSchemeVersion, @ConceptMetamac concept);
				Integer reorderConceptsAddingOneConceptInMiddle(@ConceptSchemeVersionMetamac conceptSchemeVersion, @ConceptMetamac concept, Integer sournewConceptIndex);
			}
		}

		"Metric characteristics of concept"
	    Entity Quantity {
        	databaseTable = "TB_M_QUANTITIES"
        	hint="idSequence=M_QUANTITIES"
        	
	    	"Type"
			- @QuantityTypeEnum quantityType nullable;
			"Unit"
			- @CodeMetamac unitCode nullable cascade="none" databaseColumn="UNIT_CODE_FK";
			"Position of symbol of unit"
			- @QuantityUnitSymbolPositionEnum unitSymbolPosition nullable;
			"Number of significant digits to use when displaying the values of a metric concept"
			Integer significantDigits nullable;
			"Number of decimal places to use for displaying the values of a metric concept"
			Integer decimalPlaces nullable;
			"Multiplier of percentage"
			Integer unitMultiplier nullable;
			"Min. Only when Quantity is Magnitude"
			Integer minimum nullable;
			"Max. Only when Quantity is Magnitude"
			Integer maximum nullable;
			"Numerator of the fraction. Only when Quantity is Fraction"
			- @ConceptMetamac numerator nullable cascade="none" databaseColumn="NUMERATOR_FK";
			"Denominator of the fraction. Only when Quantity is Fraction"
			- @ConceptMetamac denominator nullable cascade="none" databaseColumn="DENOMINATOR_FK";
			"True if is a percentage. Only when Quantity is Ratio"
			Boolean isPercentage nullable;
			"In percentages, descriptive text to display next to number that specifies what this is a percentage of. Only when Quantity is Ratio"
			- @InternationalString percentageOf cascade="all" nullable databaseColumn="PERCENTAGE_OF_FK";
			"Value base. Only when Quantity is Index"
			Integer baseValue nullable;
			"Time value base. Only when Quantity is Index"
			String baseTime nullable;
            "Geographical value base. Only when Quantity is Index"
            - @CodeMetamac baseLocation nullable cascade="none" databaseColumn="BASE_LOCATION_FK";
			"Base quantity. Only when Quantity is Change Rate"
			- @ConceptMetamac baseQuantity nullable cascade="none" databaseColumn="BASE_QUANTITY_FK";
			
			Repository QuantityRepository {
    			delete;
    			Long findOneQuantityRelatedWithConcept(Long conceptId);
    		}
	    }
		
		"Concept Type List"
    	Entity ConceptType {
    		databaseTable="TB_M_LIS_CONCEPT_TYPES"
    		hint="idSequence=M_CONCEPT_TYPES"
    		not auditable
    		!optimisticLocking
    		
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			"Code identifier"    		
    		String identifier;
    		"Description"
    		- @InternationalString description nullable databaseColumn="DESCRIPTION_FK";
    		
    		Repository ConceptTypeRepository {
    			@ConceptType findByIdentifier(String identifier);
    			findAll;
    			findByCondition;
    		}
    	}		
	}
}