import "classpath:/btdesign/metamac-srm-core-base.btdesign"
import "classpath:/btdesign/metamac-core-common-dtos.btdesign"
import "classpath:/btdesign/export/metamac-core-common-entity.btdesign"


Application ConceptSchemeVersions {
    basePackage=unused

    Module core {
		basePackage=org.siemac.metamac.srm.core.concept
		
		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------  

		"Provides access to Scheme Concepts Artefacts"
 		Service ConceptsService {
 			// > @ItemSchemeRepository // injected by autowired, because this repository is in another Module
 			// > @ItemSchemeVersionRepository // injected by autowired, because this repository is in another Module
 			> @ConceptSchemeVersionRepository
			
			"Create concept scheme"
			@ConceptSchemeVersion createConceptScheme(@ConceptSchemeVersion conceptSchemeVersion) throws MetamacException;
			"Retrieve concept scheme by urn"
    		@ConceptSchemeVersion findConceptSchemeByUrn(String urn) throws MetamacException;
    		"Retrieve all versions of concept scheme"
    		List<@ConceptSchemeVersion> retrieveConceptSchemeHistoric(String urn) throws MetamacException;
    		"Finds concept schemes by criteria in any state, returning last versions"
    		PagedResult<@ConceptSchemeVersion> findConceptSchemeByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;

    		// @ConceptSchemeVersion updateConceptSchemeVersion(@ConceptSchemeVersion entity) throws MetamacException;
    		// deleteConceptSchemeVersion(Long id) throws MetamacException;
    		
    		// "Concept"
    		//@Concept createConcept(Long conceptSchemeVersionId, @ConceptSchemeVersion entity) throws MetamacException;
    		//@Concept updateConcept(@ConceptSchemeVersion entity) throws MetamacException;
    		//deleteConcept(Long id) throws MetamacException;
    		//@Concept findConceptById(Long id) throws MetamacException;
    		//List<@Concept> findConceptSchemeVersionConcepts(Long conceptSchemeVersionId) throws MetamacException;
	   }
		
		// ----------------------------------------------------------------
		// 							ENTITIES
		// ----------------------------------------------------------------  
		
		
		"The descriptive information for an arrangement or division of concepts into groups based on characteristics, 
		which the objects have in common. 
		Inherits from ItemScheme"
		Entity ConceptSchemeVersion extends @ItemSchemeVersion {			
			databaseTable="TB_CONCEPT_SCHEMES_VERSIONS"
			hint="idSequence=CONCEPT_SCHEMES_VERSIONS"
			!auditable
			
			// TODO type (es un enum)
			// TODO related_operation (sólo cuando el type = Operation. Será un ExternalItem)
			
			Repository ConceptSchemeVersionRepository {
				findByCondition(PagingParameter pagingParameter);
			}
		}  
		
		
		Entity Concept extends @Item {
			databaseTable="TB_CONCEPTS"
			hint="idSequence=CONCEPTS"
			!auditable
			
       		"Associates a Representation."
			- @Representation coreRepresentation nullable;
       		"The maintenance agency of the concept scheme containing the concept."
			String isoConceptReferenceAgency nullable;
			"The identifier of the concept scheme."
			String isoConceptReferenceSchemeID nullable;
			"The identifier of the concept. (ISOConceptReference)"
			String isoConceptReferenceID nullable;
       		
			Repository ConceptRepository {
				findById;
		   		findAll;
		   		save;
		   		delete;
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
			}
		}  
		
	}
}