import "classpath:/btdesign/statistic-sdmx-core-base.btdesign"
import "classpath:/btdesign/statistic-sdmx-core-structure.btdesign"
import "classpath:/btdesign/metamac-srm-core-enum.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-enums.btdesign"
import "classpath:/btdesign/metamac-srm-core-base.btdesign"
import "classpath:/btdesign/metamac-core-common-enum.btdesign"
import "classpath:/btdesign/statistic-sdmx-core-common.btdesign"
import "classpath:/btdesign/metamac-srm-core-concepts.btdesign"
import "classpath:/btdesign/metamac-srm-core-codes.btdesign"

Application DsdsMetamac {
	basePackage=unused

	Module domain_dsds_metamac {
		basePackage=org.siemac.metamac.srm.core.dsd

		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------  
		"Provides access to Dsd Artefacts"
		Service DataStructureDefinitionMetamacService {
			
			> @DataStructureDefinitionVersionMetamacRepository
    		
    		"Creates DataStructureDefinition"
			@DataStructureDefinitionVersionMetamac createDataStructureDefinition(@DataStructureDefinitionVersionMetamac dataStructureDefinitionVersion) throws MetamacException;
			"Pre-Create DataStructureDefinition"
			@DataStructureDefinitionVersionMetamac preCreateDataStructureDefinition(@DataStructureDefinitionVersionMetamac dataStructureDefinitionVersion) throws MetamacException;
			"Updates DataStructureDefinition"
			@DataStructureDefinitionVersionMetamac updateDataStructureDefinition(@DataStructureDefinitionVersionMetamac dataStructureDefinitionVersion) throws MetamacException;
    		"Retrieves data structure definition by urn"
			@DataStructureDefinitionVersionMetamac retrieveDataStructureDefinitionByUrn(String urn) throws MetamacException;
			"Retrieves all data structure definition versions"
			List<@DataStructureDefinitionVersionMetamac> retrieveDataStructureDefinitionVersions(String urn) throws MetamacException;
			"Finds data structures by criteria"
    		PagedResult<@DataStructureDefinitionVersionMetamac> findDataStructureDefinitionsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter) throws MetamacException;
          	
          	@ComponentList saveDescriptorForDataStructureDefinition(String dataStructureDefinitionVersionUrn, @ComponentList componentList) throws MetamacException;
	   		deleteDescriptorForDataStructureDefinition(String dataStructureDefinitionVersionUrn, @ComponentList componentList) throws MetamacException;
	   
	   		@Component saveComponentForDataStructureDefinition(String dataStructureDefinitionVersionUrn, @Component component) throws MetamacException;	   
	    	deleteComponentForDataStructureDefinition(String dataStructureDefinitionVersionUrn, @Component component) throws MetamacException;
          	
          	
			"Sends data structure definition to production validation"
    		@DataStructureDefinitionVersionMetamac sendDataStructureDefinitionToProductionValidation(String urn) throws MetamacException;
    		"Sends data structure definition to diffusion validation"
    		@DataStructureDefinitionVersionMetamac sendDataStructureDefinitionToDiffusionValidation(String urn) throws MetamacException;
	    	"Rejects production validation of data structure definition"    		
	    	@DataStructureDefinitionVersionMetamac rejectDataStructureDefinitionProductionValidation(String urn) throws MetamacException;
	    	"Rejects diffusion validation of data structure definition"
	    	@DataStructureDefinitionVersionMetamac rejectDataStructureDefinitionDiffusionValidation(String urn) throws MetamacException;
	    	"Publish internally a data structure definition"
	    	@DataStructureDefinitionVersionMetamac publishInternallyDataStructureDefinition(String urn, Boolean forceLatestFinal) throws MetamacException;
	    	"Publish externally a data structure definition"
	    	@DataStructureDefinitionVersionMetamac publishExternallyDataStructureDefinition(String urn) throws MetamacException;
	    	"Resend a data structure definition"
            org.siemac.metamac.srm.core.serviceimpl.result.SendStreamMessageResult resendDataStructureDefinition(@DataStructureDefinitionVersionMetamac dataStructureDefinitionVersion) throws MetamacException;
	    	
			"Deletes data structure definition version. This must be last version and no published"
    		deleteDataStructureDefinition(String urn) throws MetamacException;
    		"Copies a data structure definition version, creating a new data structure definition, newCode is optional, skip to reuse before, but if the maintainer of source and target are the same the newCode is mandatory"
    		TaskInfo copyDataStructureDefinition(String urnToCopy, String newCode) throws MetamacException;
    		"Creates a new version of a data structure definition, copying metadata from version with provided urn"
    		TaskInfo versioningDataStructureDefinition(String urnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		"Create heading and stub metadata in the new version if exists in the previous DSD heading and stub"
    		@DataStructureDefinitionVersionMetamac versioningHeadingAndStub(@DataStructureDefinitionVersionMetamac dataStructureDefinitionVersionMetamacToCopy, @DataStructureDefinitionVersionMetamac dataStructureDefinitionVersionMetamacNewVersion) throws MetamacException;
   			"Create showDecimalsPrecision in the new version if are valid metadata in the new version"
    		@DataStructureDefinitionVersionMetamac versioningShowDecimalsPrecision(@DataStructureDefinitionVersionMetamac dataStructureDefinitionVersionMetamacToCopy, @DataStructureDefinitionVersionMetamac dataStructureDefinitionVersionMetamacNewVersion) throws MetamacException;
    		"Create dimensionVisualisationInfo in the new version if are valid metadata in the new version"
    		@DataStructureDefinitionVersionMetamac versioningDimensionVisualisationInfo(@DataStructureDefinitionVersionMetamac dataStructureDefinitionVersionMetamacToCopy, @DataStructureDefinitionVersionMetamac dataStructureDefinitionVersionMetamacNewVersion) throws MetamacException;
    		"Creates a temporal version of a data structure definition, copying metadata from version with provided urn"
    		TaskInfo createTemporalDataStructureDefinition(String urnToCopy) throws MetamacException;
     		"Creates a new version of a data structure definition from temporal version with provided urn"
    		TaskInfo createVersionFromTemporalDataStructureDefinition(String urnToCopy, @VersionTypeEnum versionTypeEnum) throws MetamacException;
    		"Merge temporal version into published version"
    		@DataStructureDefinitionVersionMetamac mergeTemporalVersion(@DataStructureDefinitionVersionMetamac dataStructureTemporalVersion) throws MetamacException;
    		"Starts the data structure definition validity"
    		@DataStructureDefinitionVersionMetamac startDataStructureDefinitionValidity(String urn) throws MetamacException;
    		"Ends the data structure definition validity"
    		@DataStructureDefinitionVersionMetamac endDataStructureDefinitionValidity(String urn) throws MetamacException;
			"Checks translations for data structure definition"
    		checkDataStructureDefinitionTranslations(Long structureVersionId, String locale, Map<String, MetamacExceptionItem>  exceptionsByResourceUrn) throws MetamacException;
			"Checks related resources are externally published"
    		checkDataStructureDefinitionWithRelatedResourcesExternallyPublished(@DataStructureDefinitionVersionMetamac dataStructureDefinitionVersion) throws MetamacException;
   		
    		"Find concept schemes with concepts can be primary measure"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesWithConceptsCanBeDsdPrimaryMeasureByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
    		"Find concepts can be primary measure"
    		PagedResult<@ConceptMetamac> findConceptsCanBeDsdPrimaryMeasureByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
    		"Find concept schemes with concepts can be time dimension"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesWithConceptsCanBeDsdTimeDimensionByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
    		"Find concepts can be time dimension"
    		PagedResult<@ConceptMetamac> findConceptsCanBeDsdTimeDimensionByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
    		"Find concept schemes with concepts can be measure dimension"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesWithConceptsCanBeDsdMeasureDimensionByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
    		"Find concepts can be measure dimension"
    		PagedResult<@ConceptMetamac> findConceptsCanBeDsdMeasureDimensionByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
    		"Find concept schemes with concepts can be dimension"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesWithConceptsCanBeDsdDimensionByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
    		"Find concepts can be dimension"
    		PagedResult<@ConceptMetamac> findConceptsCanBeDsdDimensionByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
    		"Find concepts schemes can be spatial dimension"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesWithConceptsCanBeDsdSpatialDimensionByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
    		"Find concepts can be spatial dimension"
    		PagedResult<@ConceptMetamac> findConceptsCanBeDsdSpatialDimensionByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
    		"Find concept schemes with concepts can be role"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesWithConceptsCanBeDsdRoleByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter) throws MetamacException;
    		"Find concepts can be role"
    		PagedResult<@ConceptMetamac> findConceptsCanBeDsdRoleByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter) throws MetamacException;
    		"Find codelists belong to same variable of concept"
    		PagedResult<@CodelistVersionMetamac> findCodelistsCanBeEnumeratedRepresentationForDsdDimensionByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String conceptUrn) throws MetamacException;
    		"Find codelists belong to same variable of concept and the variable must be spatial"
    		PagedResult<@CodelistVersionMetamac> findCodelistsCanBeEnumeratedRepresentationForDsdSpatialDimensionByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String conceptUrn) throws MetamacException;
    		"Find concept schemes to enumerated representation of measure dimension"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesCanBeEnumeratedRepresentationForDsdMeasureDimensionByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter) throws MetamacException;
    		"Find concept schemes to enumerated representation of atribute (metamac extension)"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesCanBeEnumeratedRepresentationForDsdMeasureAttributeByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter) throws MetamacException;
    		"Find codelists to enumerated representation of primary measure"
    		PagedResult<@CodelistVersionMetamac> findCodelistsCanBeEnumeratedRepresentationForDsdPrimaryMeasureByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter) throws MetamacException;
    		"Find concept schemes with concepts can be concept of attribute"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesWithConceptsCanBeDsdAttributeByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
    		"Find concepts can be concept of attribute"
    		PagedResult<@ConceptMetamac> findConceptsCanBeDsdAttributeByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
    		"Find concepts schemes can be concept of spatial attribute"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesWithConceptsCanBeDsdSpatialAttributeByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
    		"Find concepts can be concept of spatial attribute"
    		PagedResult<@ConceptMetamac> findConceptsCanBeDsdSpatialAttributeByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
      		"Find concepts schemes can be concept of measure attribute"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesWithConceptsCanBeDsdMeasureAttributeByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
            "Find concepts can be concept of measure attribute"
            PagedResult<@ConceptMetamac> findConceptsCanBeDsdMeasureAttributeByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
    		"Find concepts schemes can be concept of measure attribute"
    		PagedResult<@ConceptSchemeVersionMetamac> findConceptSchemesWithConceptsCanBeDsdTimeAttributeByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
            "Find concepts can be concept of time attribute"
            PagedResult<@ConceptMetamac> findConceptsCanBeDsdTimeAttributeByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dsdUrn) throws MetamacException;
    		"Find codelists belong to same variable of concept"
    		PagedResult<@CodelistVersionMetamac> findCodelistsCanBeEnumeratedRepresentationForDsdAttributeByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String conceptUrn) throws MetamacException;
			"Find codelists belong to same variable of concept an the variable must be spatial"
    		PagedResult<@CodelistVersionMetamac> findCodelistsCanBeEnumeratedRepresentationForDsdSpatialAttributeByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String conceptUrn) throws MetamacException;
			"Find orderVisualisation belong to same codelist representation of dimension"
			PagedResult<@CodelistOrderVisualisation> findOrderVisualisationCanBeDisplayOrderForDsdDimensionByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dimensionUrn) throws MetamacException;
            "Find openessVisualisation belong to same codelist representation of dimension"	
            PagedResult<@CodelistOpennessVisualisation> findOpennessVisualisationCanBeHierarchylevelopenForDsdDimensionByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter, String dimensionUrn) throws MetamacException;	
		
			// Check related resources
	    	checkPrimaryMeasure(@DataStructureDefinitionVersionMetamac dataStructureDefinitionVersion, @Component component, List<MetamacExceptionItem> exceptions) throws MetamacException 
            checkTimeDimension(@DataStructureDefinitionVersionMetamac dataStructureDefinitionVersion, @Component component, List<MetamacExceptionItem> exceptions) throws MetamacException
            checkMeasureDimension(@DataStructureDefinitionVersionMetamac dataStructureDefinitionVersion, @Component component, List<MetamacExceptionItem> exceptions) throws MetamacException
            checkDimension(@DataStructureDefinitionVersionMetamac dataStructureDefinitionVersion, @Component component, List<MetamacExceptionItem> exceptions) throws MetamacException
            checkAttribute(@DataStructureDefinitionVersionMetamac dataStructureDefinitionVersion, @Component component, List<MetamacExceptionItem> exceptions) throws MetamacException
		
		}

		// ----------------------------------------------------------------
		// 							ENTITIES
		// ----------------------------------------------------------------  
		Entity DataStructureDefinitionVersionMetamac extends @DataStructureDefinitionVersion {
			databaseTable="TB_M_DATASTRUCTURE_VERSIONS"
			hint="idSequence=M_DATASTRUCTURE_VERSIONS"
			!auditable

			"Life cycle information"
			- @SrmLifeCycleMetadata lifeCycleMetadata databaseColumn="";
			
			"Visualisation metadata Auto Open"
			Boolean autoOpen nullable;
			
			"Visualisation metadata Show Decimals"
			Integer showDecimals nullable range="min=0,max=6,message='exception.srm.dsd.validation.showdecimals_precision'";
			
			"Visualisation metadata Heading, dimensions list ordered"
			- Bag<@DimensionOrder> headingDimensions cascade="all-delete-orphan" fetch="lazy" inverse orderby="dimOrder asc" <-> dsdVersionHeading;
			
			"Visualisation metadata Stub, dimensions list ordered"
			- Bag<@DimensionOrder> stubDimensions cascade="all-delete-orphan" fetch="lazy" inverse orderby="dimOrder asc" <-> dsdVersionStub;
			
			"Visualisation metadata Stub, dimensions list ordered"
			- Bag<@MeasureDimensionPrecision> showDecimalsPrecisions fetch="lazy" cascade="all-delete-orphan" inverse orderby="id asc" <-> dsdVersion;
			
			"Extension point to add Metadata for each dimension"
			- Bag<@DimensionVisualisationInfo> dimensionVisualisationInfos cascade="all-delete-orphan" fetch="lazy" inverse orderby="id asc" <-> dsdVersion;
			
			"Statistical operation"
			- @ExternalItem statisticalOperation nullable cascade="all" databaseColumn="STATISTICAL_OPERATION_FK";

			"Stream message status"
            - @StreamMessageStatusEnum streamMessageStatus;
			
			Repository DataStructureDefinitionVersionMetamacRepository {
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByCondition(PagingParameter pagingParameter);
				@DataStructureDefinitionVersionMetamac findByUrn(String urn);
				@DataStructureDefinitionVersionMetamac retrieveDataStructureDefinitionVersionByProcStatus(String urn, ArrayProcStatusEnum procStatusArray) throws MetamacException;
				checkDataStructureDefinitionVersionTranslations(Long structureVersionId, String locale, Map<String, MetamacExceptionItem> exceptionItemsByUrn);
			}			
		}
		
		Entity DimensionOrder {
			databaseTable="TB_M_DIMENSION_ORDERS"
			hint="idSequence=M_DIMENSION_ORDERS"
			!auditable
			
			// Order
			Integer dimOrder not nullable;
			
			"DSD dimension"
			-@DimensionComponent dimension cascade="none" databaseColumn="DIM_COMPONENT_FK";
			
			"Not null when dimension is in heading"
			- @DataStructureDefinitionVersionMetamac dsdVersionHeading nullable cascade="none" fetch="lazy" databaseColumn="DSD_VERSION_HEADING_FK" <-> headingDimensions;
			
			"Not null when dimension is in stub"
			- @DataStructureDefinitionVersionMetamac dsdVersionStub nullable cascade="none" fetch="lazy" databaseColumn="DSD_VERSION_STUB_FK" <-> stubDimensions;
		}
		
		Entity MeasureDimensionPrecision {
			databaseTable="TB_M_MEASURE_DIM_PRECISIONS"
			hint="idSequence=M_MEASURE_DIM_PRECISIONS"
			!auditable

			"Code of Concept representation associate to Measure Dimension"
			-@ConceptMetamac concept cascade="none" databaseColumn="M_CONCEPT_FK";
			
			"Show Decimal Precision, must a value between 0 and 6"
			Integer showDecimalPrecision range="min=0,max=6,message='exception.srm.dsd.validation.showdecimals_precision'";
			
			"DSD version"
			- @DataStructureDefinitionVersionMetamac dsdVersion not nullable cascade="none" fetch="lazy" databaseColumn="DSD_VERSION_FK" <-> showDecimalsPrecisions;
		}
		
		Entity DimensionVisualisationInfo {
			databaseTable="TB_M_DIM_VIS_INFO"
			hint="idSequence=M_DIM_VIS_INFO"
			!auditable

			"DSD dimension"
			-@DimensionComponent dimension cascade="none" databaseColumn="DIM_COMPONENT_FK";
			
			"Display order of the categories of a dimension"
			- @CodelistOrderVisualisation displayOrder nullable cascade="persist,merge,refresh" fetch="lazy" databaseColumn="DISPLAY_ORDER_FK";

			"For variables with hierarchies, indicates how the tree will be displayed when first displayed"
			- @CodelistOpennessVisualisation hierarchyLevelsOpen nullable cascade="persist,merge,refresh" fetch="lazy" databaseColumn="HIERARCHY_LEVELS_OPEN_FK";
			
			"DSD version"
			- @DataStructureDefinitionVersionMetamac dsdVersion not nullable cascade="none" fetch="lazy" databaseColumn="DSD_VERSION_FK" <-> dimensionVisualisationInfos;
		}

	}
}