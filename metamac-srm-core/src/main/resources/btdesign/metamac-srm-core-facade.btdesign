import "classpath:/btdesign/statistic-sdmx-v2_1-domain-dtos-core.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-dtos-tasks.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-dtos-common.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-enums.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-dtos-concepts.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-enums-concept.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-dtos-categories.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-dtos-organisations.btdesign"

import "classpath:/btdesign/metamac-core-common-dtos.btdesign"
import "classpath:/btdesign/metamac-core-common-enum.btdesign"

import "classpath:/btdesign/statistic-sdmx-core-structure.btdesign"
import "classpath:/btdesign/statistic-sdmx-core-concepts.btdesign"
import "classpath:/btdesign/statistic-sdmx-core-tasks.btdesign"
import "classpath:/btdesign/statistic-sdmx-core-io.btdesign"

import "classpath:/btdesign/metamac-srm-core-concepts.btdesign"
import "classpath:/btdesign/metamac-srm-core-organisations.btdesign"
import "classpath:/btdesign/metamac-srm-core-concepts-dtos.btdesign"
import "classpath:/btdesign/metamac-srm-core-organisations-dtos.btdesign"
import "classpath:/btdesign/metamac-srm-core-enum.btdesign"

import "classpath:/btdesign/metamac-srm-core-dsds.btdesign"
import "classpath:/btdesign/metamac-srm-core-dsds-dtos.btdesign"

import "classpath:/btdesign/metamac-srm-core-categories.btdesign"
import "classpath:/btdesign/metamac-srm-core-categories-dtos.btdesign"

import "classpath:/btdesign/metamac-srm-core-codes.btdesign"
import "classpath:/btdesign/metamac-srm-core-codes-dtos.btdesign"

import "classpath:/btdesign/metamac-srm-core-tasks.btdesign"

Application SrmFacadeCore {
    basePackage=unused
    
    Module core_facades {
    	basePackage=org.siemac.metamac.srm.core.facade
    	
		Service SrmCoreServiceFacade {
       		> @ConceptsMetamacService
       		> @DataStructureDefinitionMetamacService
       		> @OrganisationsMetamacService
       		> @CategoriesMetamacService
       		> @CodesMetamacService
       		> @TasksMetamacService

			"          
			 @param ctx  
			 @param dataStructureDefinitionDto                                                  
			 @return                                                                            
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			"
       		@DataStructureDefinitionMetamacDto createDataStructureDefinition(@DataStructureDefinitionMetamacDto dataStructureDefinitionMetamacDto) throws MetamacException;
       		
       		"          
			 @param ctx  
			 @param dataStructureDefinitionDto                                                  
			 @return                                                                            
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			"
       		@DataStructureDefinitionMetamacDto updateDataStructureDefinition(@DataStructureDefinitionMetamacDto dataStructureDefinitionMetamacDto) throws MetamacException;
       		
			"       		                                                                                    
			 @param ctx                                                                          
			 @param urn                                                   
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			" 
       		deleteDataStructureDefinition(String urn) throws MetamacException;
			
			"
			 Find DSDs by criteria                           
			 @param ctx                 
			 @param criteria           
			 @return                    
			"
	    	MetamacCriteriaResult<@DataStructureDefinitionMetamacBasicDto> findDataStructureDefinitionsByCondition(MetamacCriteria criteria) throws MetamacException;

			"
          	 Retrieve a DSD without Grouping relationships.
		     @param ctx
		     @param urn
		     @param typeDozerCopyMode, in TypeDozerCopyMode.CREATE the object graph not contains id fields, always is a new DSD graph instance. Use TypeDozerCopyMode.UPDATE for normal use.
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
			@DataStructureDefinitionMetamacDto retrieveDataStructureDefinition(String urn, @TypeDozerCopyMode typeDozerCopyMode) throws MetamacException;
			
			" Retrieve a DSD by URN.
			 @param ctx
			 @param urn Parameter to find DSD
			 @return
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			"
			@DataStructureDefinitionMetamacDto retrieveDataStructureDefinitionByUrn(String urn) throws MetamacException;				    	

            "Retrieves all data structure definitions versions"
            List<@DataStructureDefinitionMetamacBasicDto> retrieveDataStructureDefinitionVersions(String urn) throws MetamacException;
            
	    	"
	    	 Sends dsd to production validation
		     @param ctx
		     @param urn
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
	    	@DataStructureDefinitionMetamacDto sendDataStructureDefinitionToProductionValidation(String urn) throws MetamacException;
    		
    		"
    		 Sends to diffusion validation
		     @param ctx
		     @param urn Urn of DataStructureDefinition
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
    		@DataStructureDefinitionMetamacDto sendDataStructureDefinitionToDiffusionValidation(String urn) throws MetamacException;
	    	
	    	"
	    	 Rejects production validation of dsd   		
		     @param ctx
		     @param urn Urn of DataStructureDefinition
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
	    	@DataStructureDefinitionMetamacDto rejectDataStructureDefinitionProductionValidation(String urn) throws MetamacException;
	    	
	    	"
	    	 Rejects diffusion validation of dsd  		
		     @param ctx
		     @param urn Urn of DataStructureDefinition
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
	    	@DataStructureDefinitionMetamacDto rejectDataStructureDefinitionDiffusionValidation(String urn) throws MetamacException; 
	    	
	    	"
	    	 Publishes internally a dsd  		
		     @param ctx
		     @param urn Urn of DataStructureDefinition
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
	    	@DataStructureDefinitionMetamacDto publishDataStructureDefinitionInternally(String urn, Boolean forceLatestFinal) throws MetamacException;
	    	
	    	"
	    	 Publishes externally a dsd  		
		     @param ctx
		     @param urn Urn of DataStructureDefinition
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
	    	@DataStructureDefinitionMetamacDto publishDataStructureDefinitionExternally(String urn) throws MetamacException;
    		
    		"
    		 Copies a codelist version, creating a new codelist
     		 @param ctx
     		 @param urnToCopy
     		 @param newCode: is optional, skip to reuse before, but if the maintainer of source and target are the same the newCode is mandatory
     		 @return
     		 @throws org.siemac.metamac.core.common.exception.MetamacException
     		"
    		TaskInfo copyDataStructureDefinition(String urnToCopy, String newCode) throws MetamacException;
    		
    		"
	    	 Creates a new version of a dsd, copying metadata from version with provided urn  		
		     @param ctx
		     @param urnToCopy Urn of DataStructureDefinition to copy
		     @param versionType MAJOR or MINOR version
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
    		TaskInfo versioningDataStructureDefinition(String urnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		
    		"
	    	 Creates a temporal version of a dsd, copying metadata from version with provided urnn  		
		     @param ctx
		     @param urnToCopy Urn of DataStructureDefinition to copy
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
    		TaskInfo createTemporalVersionDataStructureDefinition(String urnToCopy) throws MetamacException;
   		
    		"
	    	 Ends the dsd scheme validity  		
		     @param ctx
		     @param urn Urn of DataStructureDefinition
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
    		@DataStructureDefinitionMetamacDto endDataStructureDefinitionValidity(String urn) throws MetamacException;
	    	
			"
			 @param ctx                                                                         
			 @param urnDsd of DSD                                                                       
			 @param typeComponentList                                                           
			 @return                                                                            
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			"
          	List<@DescriptorDto> findDescriptorsForDataStructureDefinition(String urnDsd, @TypeComponentList typeComponentList) throws MetamacException;
          	
          	"
          	 @param ctx                                                                         
			 @param urnDsd of DSD                                                                         
			 @return                                                                            
			 @throws org.siemac.metamac.core.common.exception.MetamacException
          	"
          	List<@DescriptorDto> findDescriptorsForDataStructureDefinition(String urnDsd) throws MetamacException;
	   		
	   		"                                                                                    
			 @param ctx                                                                          
			 @param urnDsd of DSD                                                                          
			 @param descriptorDto                                                                
			 @return                                                                             
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			" 
	   		@DescriptorDto saveDescriptorForDataStructureDefinition(String urnDsd, @DescriptorDto descriptorDto) throws MetamacException;
	   		
	   		"
	   		 @param ctx                                                                          
			 @param urnDsd of DSD                                                                        
			 @param descriptorDto                                                                
			 @throws org.siemac.metamac.core.common.exception.MetamacException 
	   		"
	   		deleteDescriptorForDataStructureDefinition(String urnDsd, @DescriptorDto descriptorDto)throws MetamacException;
	   
	   		"
			 @param ctx                                                                         
			 @param urnDsd of DSD                                                                       
			 @param componentDto                                                                
			 @param typeComponentList                                                           
			 @return                                                                            
			 @throws org.siemac.metamac.core.common.exception.MetamacException
	   		"
	   		@ComponentDto saveComponentForDataStructureDefinition(String urnDsd, @ComponentDto componentDto) throws MetamacException;
	   		
	   		"                                                                                    
			 @param ctx                                                                          
			 @param urnDsd of DSD                                                                        
			 @param componentDto                                                                 
			 @param typeComponentList                                                            
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			" 
	   		deleteComponentForDataStructureDefinition(String urnDsd, @ComponentDto componentDto) throws MetamacException;

    		"Find concept schemes with concepts can be primary measure"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdPrimaryMeasureByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concepts can be primary measure"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdPrimaryMeasureByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concept schemes with concepts can be time dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdTimeDimensionByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concepts can be time dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdTimeDimensionByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concept schemes with concepts can be measure dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdMeasureDimensionByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concepts can be measure dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdMeasureDimensionByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concept schemes with concepts can be dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdDimensionByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concepts can be dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdDimensionByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concepts schemes can be spatial dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdSpatialDimensionByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concepts can be spatial dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdSpatialDimensionByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concept schemes with concepts can be role"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdRoleByCondition(MetamacCriteria criteria) throws MetamacException;
    		"Find concepts can be role"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdRoleByCondition(MetamacCriteria criteria) throws MetamacException;
    		"Find codelists belong to same variable of concept"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodelistsCanBeEnumeratedRepresentationForDsdDimensionByCondition(MetamacCriteria criteria, String conceptUrn) throws MetamacException;
    		"Find codelists belong to same variable of concept"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodelistsCanBeEnumeratedRepresentationForDsdSpatialDimensionByCondition(MetamacCriteria criteria, String conceptUrn) throws MetamacException;
    		"Find concept schemes to enumerated representation of measure dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesCanBeEnumeratedRepresentationForDsdMeasureDimensionByCondition(MetamacCriteria criteria) throws MetamacException;
    		"Find concept schemes to enumerated representation of atribute (metamac extension)"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesCanBeEnumeratedRepresentationForDsdMeasureAttributeByCondition(MetamacCriteria criteria) throws MetamacException;
    		"Find codelists to enumerated representation of primary measure"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodelistsCanBeEnumeratedRepresentationForDsdPrimaryMeasureByCondition(MetamacCriteria criteria) throws MetamacException;
    		"Find concept schemes with concepts can be concept of attribute"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdAttributeByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concepts can be concept of attribute"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdAttributeByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concepts schemes can be concept of spatial attribute"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdSpatialAttributeByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concepts can be concept of spatial attribute"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdSpatialAttributeByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
      		"Find concepts schemes can be concept of measure attribute"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdMeasureAttributeByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
            "Find concepts can be concept of measure attribute"
            MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdMeasureAttributeByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concepts schemes can be concept of measure attribute"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdTimeAttributeByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
            "Find concepts can be concept of time attribute"
            MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdTimeAttributeByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find codelists belong to same variable of concept"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodelistsCanBeEnumeratedRepresentationForDsdAttributeByCondition(MetamacCriteria criteria, String conceptUrn) throws MetamacException;
    		"Find codelists belong to same variable of concept"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodelistsCanBeEnumeratedRepresentationForDsdSpatialAttributeByCondition(MetamacCriteria criteria, String conceptUrn) throws MetamacException;
    		"Find orderVisualisation belong to same codelist representation of dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findOrderVisualisationCanBeDisplayOrderForDsdDimensionByCondition(MetamacCriteria criteria, String dimensionUrn) throws MetamacException;
    		"Find openessVisualisation belong to same codelist representation of dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findOpennessVisualisationCanBeHierarchylevelopenForDsdDimensionByCondition(MetamacCriteria criteria, String dimensionUrn) throws MetamacException;
    	
	    	/**************************************************************************
		     * ORGANISATIONS
		     **************************************************************************/
       		"Creates organisation scheme"
	   		@OrganisationSchemeMetamacDto createOrganisationScheme(@OrganisationSchemeMetamacDto organisationSchemeDto) throws MetamacException;
	   		"Updates organisation scheme"
            @OrganisationSchemeMetamacDto updateOrganisationScheme(@OrganisationSchemeMetamacDto organisationSchemeDto) throws MetamacException;
            "Deletes organisation scheme"
            deleteOrganisationScheme(String urn) throws MetamacException;
            "Finds organisation schemes by criteria"
            MetamacCriteriaResult<@OrganisationSchemeMetamacBasicDto> findOrganisationSchemesByCondition(MetamacCriteria criteria) throws MetamacException;
            "Retrieves a organisation scheme by URN"
            @OrganisationSchemeMetamacDto retrieveOrganisationSchemeByUrn(String urn) throws MetamacException;
            "Retrieves all organisation scheme versions"
            List<@OrganisationSchemeMetamacBasicDto> retrieveOrganisationSchemeVersions(String urn) throws MetamacException;
            
            "Sends organisation scheme to production validation"
	    	@OrganisationSchemeMetamacDto sendOrganisationSchemeToProductionValidation(String urn) throws MetamacException;
    		"Sends to diffusion validation"
    		@OrganisationSchemeMetamacDto sendOrganisationSchemeToDiffusionValidation(String urn) throws MetamacException;
	    	"Rejects production validation of organisation scheme"    		
	    	@OrganisationSchemeMetamacDto rejectOrganisationSchemeProductionValidation(String urn) throws MetamacException;
	    	"Rejects diffusion validation of organisation scheme"
	    	@OrganisationSchemeMetamacDto rejectOrganisationSchemeDiffusionValidation(String urn) throws MetamacException; 
	    	"Publishes internally a organisation scheme"
	    	@OrganisationSchemeMetamacDto publishOrganisationSchemeInternally(String urn, Boolean forceLatestFinal) throws MetamacException;
	    	"Publishes externally a organisation scheme"
	    	@OrganisationSchemeMetamacDto publishOrganisationSchemeExternally(String urn) throws MetamacException;
    		"Copies a organisation scheme version, creating a new organisation scheme, newCode is optional, skip to reuse before, but if the maintainer of source and target are the same the newCode is mandatory"
    		TaskInfo copyOrganisationScheme(String urnToCopy, String newCode) throws MetamacException;
    		"Creates a new version of a organisation scheme, copying metadata from version with provided urn"
    		TaskInfo versioningOrganisationScheme(String urnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		"Creates a temporal version of a organisation scheme, copying metadata from version with provided urn"
    		TaskInfo createTemporalVersionOrganisationScheme(String urnToCopy) throws MetamacException;
    		"Ends the organisation scheme validity"
    		@OrganisationSchemeMetamacDto endOrganisationSchemeValidity(String urn) throws MetamacException;
            
			"Creates organisation"
	   		@OrganisationMetamacDto createOrganisation(@OrganisationMetamacDto organisationMetamacDto) throws MetamacException;
	   		"Updates organisation"
            @OrganisationMetamacDto updateOrganisation(@OrganisationMetamacDto organisationDto) throws MetamacException;
	   		"Retrieves a organisation by URN"
            @OrganisationMetamacDto retrieveOrganisationByUrn(String urn) throws MetamacException;
            "Finds organisations by criteria"
            MetamacCriteriaResult<@OrganisationMetamacBasicDto> findOrganisationsByCondition(MetamacCriteria criteria) throws MetamacException;
    		"Retrieve organisation that must be maintainer of all created artefacts"
    		@OrganisationMetamacDto retrieveMaintainerDefault() throws MetamacException;
			"Deletes organisation"
            deleteOrganisation(String urn) throws MetamacException;
    		"Retrieves organisations by organisation scheme in locale requested"
    		List<OrganisationMetamacVisualisationResult> retrieveOrganisationsByOrganisationSchemeUrn(String organisationSchemeUrn, String locale) throws MetamacException;
            "Exports organisations in TSV format"
    		String exportOrganisationsTsv(String organisationSchemeUrn) throws MetamacException;
			"Imports organisations in TSV format"
    		TaskImportationInfo importOrganisationsTsv(String organisationSchemeUrn, InputStream tsvStream, String fileName, boolean updateAlreadyExisting) throws MetamacException;

            "Finds contacts by criteria"
            MetamacCriteriaResult<@ContactDto> findOrganisationContactsByCondition(MetamacCriteria criteria) throws MetamacException;
       		
       		/**************************************************************************
		     * CONCEPTS
		     *************************************************************************/     		
	   		"Creates concept scheme"
	   		@ConceptSchemeMetamacDto createConceptScheme(@ConceptSchemeMetamacDto conceptSchemeDto) throws MetamacException;
	   		"Updates concept scheme"
            @ConceptSchemeMetamacDto updateConceptScheme(@ConceptSchemeMetamacDto conceptSchemeDto) throws MetamacException;
            "Deletes concept scheme"
            deleteConceptScheme(String urn) throws MetamacException;
            "Finds concepts schemes by criteria"
            MetamacCriteriaResult<@ConceptSchemeMetamacBasicDto> findConceptSchemesByCondition(MetamacCriteria criteria) throws MetamacException;
            "Finds concepts schemes by criteria with concepts that can be role"
            MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeRoleByCondition(MetamacCriteria criteria) throws MetamacException;
            "Finds concepts schemes by criteria with concepts that can be extended"
            MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeExtendedByCondition(MetamacCriteria criteria) throws MetamacException;
  			"Finds concept schemes with concepts that can be enumerated representation for concepts"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesCanBeEnumeratedRepresentationForConceptsByCondition(String conceptUrn, MetamacCriteria criteria)  throws MetamacException;
			"Finds concept schemes with concepts than can be numerator in quantity by criteria"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeQuantityNumeratorByCondition(String conceptSchemeUrn, MetamacCriteria criteria)  throws MetamacException;
			"Finds concept schemes with concepts than can be denominator in quantity by criteria"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeQuantityDenominatorByCondition(String conceptSchemeUrn, MetamacCriteria criteria)  throws MetamacException;
			"Finds concept schemes with concepts than can be base quantity in quantity by criteria"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeQuantityBaseQuantityByCondition(String conceptSchemeUrn, MetamacCriteria criteria)  throws MetamacException;
			"Find codelists with codes than than can be unit in concept quantity by criteria"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodelistsWithCodesCanBeQuantityUnitByCondition(MetamacCriteria criteria)  throws MetamacException;
			"Find codelists with codes than than can be base quantity in concept quantity by criteria"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodelistsWithCodesCanBeQuantityBaseLocationByCondition(MetamacCriteria criteria)  throws MetamacException;
            
            "Retrieves a concept scheme by URN"
            @ConceptSchemeMetamacDto retrieveConceptSchemeByUrn(String urn) throws MetamacException;
            "Retrieves all concept scheme versions"
            List<@ConceptSchemeMetamacBasicDto> retrieveConceptSchemeVersions(String urn) throws MetamacException;
	    	"Sends concept scheme to production validation"
	    	@ConceptSchemeMetamacDto sendConceptSchemeToProductionValidation(String urn) throws MetamacException;
    		"Sends to diffusion validation"
    		@ConceptSchemeMetamacDto sendConceptSchemeToDiffusionValidation(String urn) throws MetamacException;
	    	"Rejects production validation of concept scheme"    		
	    	@ConceptSchemeMetamacDto rejectConceptSchemeProductionValidation(String urn) throws MetamacException;
	    	"Rejects diffusion validation of concept scheme"
	    	@ConceptSchemeMetamacDto rejectConceptSchemeDiffusionValidation(String urn) throws MetamacException; 
	    	"Publishes internally a concept scheme"
	    	@ConceptSchemeMetamacDto publishConceptSchemeInternally(String urn, Boolean forceLatestFinal) throws MetamacException;
	    	"Publishes externally a concept scheme"
	    	@ConceptSchemeMetamacDto publishConceptSchemeExternally(String urn) throws MetamacException;
    		"Copies a concept scheme version, creating a new concept scheme, newCode is optional, skip to reuse before, but if the maintainer of source and target are the same the newCode is mandatory"
    		TaskInfo copyConceptScheme(String urnToCopy, String newCode) throws MetamacException;
    		"Creates a new version of a concept scheme, copying metadata from version with provided urn"
    		TaskInfo versioningConceptScheme(String urnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		"Creates a temporal version of a concept scheme, copying metadata from version with provided urn"
    		TaskInfo createTemporalVersionConceptScheme(String urnToCopy) throws MetamacException;
    		"Ends the concept scheme validity"
    		@ConceptSchemeMetamacDto endConceptSchemeValidity(String urn) throws MetamacException;
    		
    		"Creates concept"
	   		@ConceptMetamacDto createConcept(@ConceptMetamacDto conceptMetamacDto) throws MetamacException;
	   		"Updates concept"
            @ConceptMetamacDto updateConcept(@ConceptMetamacDto conceptDto) throws MetamacException;
	   		"Retrieves a concept by URN"
            @ConceptMetamacDto retrieveConceptByUrn(String urn) throws MetamacException;
            "Imports concepts in tsv format"
    		TaskImportationInfo importConceptsTsv(String conceptSchemeUrn, InputStream tsvStream, String fileName, boolean updateAlreadyExisting) throws MetamacException;
            "Exports concepts in TSV format"
    		String exportConceptsTsv(String conceptSchemeUrn) throws MetamacException;
            "Finds concepts by criteria"
            MetamacCriteriaResult<@ConceptMetamacBasicDto> findConceptsByCondition(MetamacCriteria criteria) throws MetamacException;
            "Finds concepts that can be role by criteria"
            MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeRoleByCondition(MetamacCriteria criteria) throws MetamacException;
            "Finds concepts that can be extended by criteria"
            MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeExtendedByCondition(MetamacCriteria criteria) throws MetamacException;
			"Finds concepts than can be numerator in quantity by criteria"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeQuantityNumeratorByCondition(String conceptSchemeUrn, MetamacCriteria criteria)  throws MetamacException;
			"Finds concepts than can be denominator in quantity by criteria"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeQuantityDenominatorByCondition(String conceptSchemeUrn, MetamacCriteria criteria)  throws MetamacException;
			"Finds concepts than can be base quantity in quantity by criteria"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeQuantityBaseQuantityByCondition(String conceptSchemeUrn, MetamacCriteria criteria)  throws MetamacException;
			"Finds codes than can be unit in concept quantity by criteria"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodesCanBeQuantityUnitByCondition(MetamacCriteria criteria)  throws MetamacException;
			"Finds codes than can be base location in concept quantity by criteria"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodesCanBeQuantityBaseLocationByCondition(MetamacCriteria criteria)  throws MetamacException;
			"Deletes concept"
            deleteConcept(String urn) throws MetamacException;
    		"Retrieves concepts by concept scheme in locale requested"
    		List<ConceptMetamacVisualisationResult> retrieveConceptsByConceptSchemeUrn(String conceptSchemeUrn, String locale) throws MetamacException;
    		
    		"Adds a concepts relation (related concepts)"
    		addRelatedConcept(String urn1, String urn2) throws MetamacException;
    		"Deletes a concepts relation (related concepts)"
    		deleteRelatedConcept(String urn1, String urn2) throws MetamacException;
    		"Retrieves all related concepts with a concept (related concepts)"
    		List<@ConceptMetamacBasicDto> retrieveRelatedConcepts(String urn) throws MetamacException;
    		"Adds a concepts relation of type 'roles'"
    		addRoleConcept(String urn, String conceptRoleUrn) throws MetamacException;
    		"Deletes a concepts relation of type 'roles'"
    		deleteRoleConcept(String urn, String conceptRoleUrn) throws MetamacException;
    		"Retrieves all related concepts with a concept with relation 'roles'"
    		List<@ConceptMetamacBasicDto> retrieveRoleConcepts(String urn) throws MetamacException;

    		"Finds all concept types"
    		List<@ConceptTypeDto> findAllConceptTypes throws MetamacException;
    		"Retrieves concept type by identifier"
    		@ConceptTypeDto retrieveConceptTypeByIdentifier(String identifier) throws MetamacException;
    		
    		"Find codelists belong to same variable of concept. Can specify variable instead concept"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodelistsCanBeEnumeratedRepresentationForConceptByCondition(MetamacCriteria criteria, String conceptUrn, String variableUrn) throws MetamacException;
    		
    		"Updates parent of concept. parentUrn is null when concept is moved to first level. Concept is moved at the end of new level"
			updateConceptParent(String conceptUrn, String newConceptParentUrn, Integer newConceptIndex) throws MetamacException;
			"Updates position of concept"
			updateConceptInOrder(String conceptUrn, String conceptSchemeUrn, Integer newConceptIndex) throws MetamacException;

	    	/**************************************************************************
		     * CATEGORIES
		     **************************************************************************/

       		"Creates category scheme"
	   		@CategorySchemeMetamacDto createCategoryScheme(@CategorySchemeMetamacDto categorySchemeDto) throws MetamacException;
	   		"Updates category scheme"
            @CategorySchemeMetamacDto updateCategoryScheme(@CategorySchemeMetamacDto categorySchemeDto) throws MetamacException;
            "Deletes category scheme"
            deleteCategoryScheme(String urn) throws MetamacException;
            "Finds category schemes by criteria"
            MetamacCriteriaResult<@CategorySchemeMetamacBasicDto> findCategorySchemesByCondition(MetamacCriteria criteria) throws MetamacException;
            "Retrieves a category scheme by URN"
            @CategorySchemeMetamacDto retrieveCategorySchemeByUrn(String urn) throws MetamacException;
            "Retrieves all category scheme versions"
            List<@CategorySchemeMetamacBasicDto> retrieveCategorySchemeVersions(String urn) throws MetamacException;
    		"Finds category schemes with categories can be category in categorisation"
    		MetamacCriteriaResult<@RelatedResourceDto> findCategorySchemesWithCategoriesCanBeCategorisationCategoryByCondition(MetamacCriteria criteria) throws MetamacException;
            
            "Sends category scheme to production validation"
	    	@CategorySchemeMetamacDto sendCategorySchemeToProductionValidation(String urn) throws MetamacException;
    		"Sends to diffusion validation"
    		@CategorySchemeMetamacDto sendCategorySchemeToDiffusionValidation(String urn) throws MetamacException;
	    	"Rejects production validation of category scheme"    		
	    	@CategorySchemeMetamacDto rejectCategorySchemeProductionValidation(String urn) throws MetamacException;
	    	"Rejects diffusion validation of category scheme"
	    	@CategorySchemeMetamacDto rejectCategorySchemeDiffusionValidation(String urn) throws MetamacException; 
	    	"Publishes internally a category scheme"
	    	@CategorySchemeMetamacDto publishCategorySchemeInternally(String urn, Boolean forceLatestFinal) throws MetamacException;
	    	"Publishes externally a category scheme"
	    	@CategorySchemeMetamacDto publishCategorySchemeExternally(String urn) throws MetamacException;
    		"Copies a category scheme version, creating a new category scheme, newCode is optional, skip to reuse before, but if the maintainer of source and target are the same the newCode is mandatory"
    		TaskInfo copyCategoryScheme(String urnToCopy, String newCode) throws MetamacException;
    		"Creates a new version of a category scheme, copying metadata from version with provided urn"
    		TaskInfo versioningCategoryScheme(String urnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		"Creates a temporal version of a category scheme, copying metadata from version with provided urn"
    		TaskInfo createTemporalVersionCategoryScheme(String urnToCopy) throws MetamacException;
    		"Ends the category scheme validity"
    		@CategorySchemeMetamacDto endCategorySchemeValidity(String urn) throws MetamacException;
            
			"Creates category"
	   		@CategoryMetamacDto createCategory(@CategoryMetamacDto categoryMetamacDto) throws MetamacException;
	   		"Updates category"
            @CategoryMetamacDto updateCategory(@CategoryMetamacDto categoryDto) throws MetamacException;
	   		"Retrieves a category by URN"
            @CategoryMetamacDto retrieveCategoryByUrn(String urn) throws MetamacException;
            "Finds categories by criteria"
            MetamacCriteriaResult<@CategoryMetamacBasicDto> findCategoriesByCondition(MetamacCriteria criteria) throws MetamacException;
    		"Finds categories can be category in categorisation"
    		MetamacCriteriaResult<@RelatedResourceDto> findCategoriesCanBeCategorisationCategoryByCondition(MetamacCriteria criteria) throws MetamacException;
			"Deletes category"
            deleteCategory(String urn) throws MetamacException;
    		"Retrieves categories by category scheme in locale requested"
    		List<ItemVisualisationResult> retrieveCategoriesByCategorySchemeUrn(String categorySchemeUrn, String locale) throws MetamacException;
    		"Imports categories in tsv format"
    		TaskImportationInfo importCategoriesTsv(String categorySchemeUrn, InputStream tsvStream, String fileName, boolean updateAlreadyExisting) throws MetamacException;
            "Exports categories in TSV format"
    		String exportCategoriesTsv(String categorySchemeUrn) throws MetamacException;
    		
    		// Categorisations
    		"Creates categorisation"
    		@CategorisationDto createCategorisation(String categoryUrn, String artefactCategorisedUrn, String maintainerUrn) throws MetamacException;
    		"Retrieves categorisation by urn"
    		@CategorisationDto retrieveCategorisationByUrn(String urn) throws MetamacException;
    		"Deletes categorisation"
    		deleteCategorisation(String urn) throws MetamacException;
    		"Retrieves all categorisations by categorised artefact"
    		List<@CategorisationDto> retrieveCategorisationsByArtefact(String urn) throws MetamacException;
    		"Ends the validity of a categorisation. ValidTo date is optional"
    		@CategorisationDto endCategorisationValidity(String urn, JAVADATE validTo) throws MetamacException;
    		
	    	/**************************************************************************
		     * CODES
		     **************************************************************************/

       		"Creates codelist"
	   		@CodelistMetamacDto createCodelist(@CodelistMetamacDto codelistDto) throws MetamacException;
	   		"Updates codelist" 
            @CodelistMetamacDto updateCodelist(@CodelistMetamacDto codelistDto) throws MetamacException;
            "Deletes codelist"
            deleteCodelist(String urn) throws MetamacException;
            "Finds codelist by criteria"
            MetamacCriteriaResult<@CodelistMetamacBasicDto> findCodelistsByCondition(MetamacCriteria criteria) throws MetamacException;
			"Find codelists can replace another one"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodelistsCanReplaceToByCondition(String codelistUrn, MetamacCriteria criteria)  throws MetamacException;
			"Find codelists can be geographical granularity of variable elements"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodelistsWhoseCodesCanBeVariableElementGeographicalGranularityByCondition(MetamacCriteria criteria)  throws MetamacException;
            "Retrieves a codelist by URN"
            @CodelistMetamacDto retrieveCodelistByUrn(String urn) throws MetamacException;
            "Retrieves all codelist versions"
            List<@CodelistMetamacBasicDto> retrieveCodelistVersions(String urn) throws MetamacException;
            
            "Sends Codelist to production validation"
	    	@CodelistMetamacDto sendCodelistToProductionValidation(String urn) throws MetamacException;
    		"Sends to diffusion validation"
    		@CodelistMetamacDto sendCodelistToDiffusionValidation(String urn) throws MetamacException;
	    	"Rejects production validation of Codelist"    		
	    	@CodelistMetamacDto rejectCodelistProductionValidation(String urn) throws MetamacException;
	    	"Rejects diffusion validation of Codelist"
	    	@CodelistMetamacDto rejectCodelistDiffusionValidation(String urn) throws MetamacException; 
	    	"Publishes internally a Codelist"
	    	TaskInfo publishCodelistInternally(String urn, Boolean forceLatestFinal) throws MetamacException;
	    	"Publishes externally a Codelist"
	    	@CodelistMetamacDto publishCodelistExternally(String urn) throws MetamacException;
    		"Copies a codelist version, creating a new codelist, newCode is optional, skip to reuse before, but if the maintainer of source and target are the same the newCode is mandatory"
    		TaskInfo copyCodelist(String urnToCopy, String newCode) throws MetamacException;
    		"Creates a new version of a Codelist, copying metadata from version with provided urn"
    		TaskInfo versioningCodelist(String urnToCopy, Boolean versioningCodes, @VersionTypeEnum versionType) throws MetamacException;
    		"Creates a temporal version of a Codelist, copying metadata from version with provided urn"
    		TaskInfo createTemporalVersionCodelist(String urnToCopy) throws MetamacException;
    		"Ends the Codelist validity"
    		@CodelistMetamacDto endCodelistValidity(String urn) throws MetamacException;
    		
    		"Creates code"
	   		@CodeMetamacDto createCode(@CodeMetamacDto codeMetamacDto) throws MetamacException;
			"Copy codes to another codelist. Children must be located after than parent in list"
	   		copyCodesInCodelist(String codelistSourceUrn, String codelistTargetUrn, List<CodeToCopy> codesToCopy) throws MetamacException;
	   		"Updates code"
            @CodeMetamacDto updateCode(@CodeMetamacDto codeDto) throws MetamacException;
			"Change variable element to code"
			@CodeMetamacDto updateCodeVariableElement(String codeUrn, String variableElementUrn) throws MetamacException;
			"Change variable elements to codes"
			updateCodesVariableElements(String codelistUrn, Map<Long,Long> variableElementsIdByCodeId) throws MetamacException;
			"Updates parent of code. parentUrn is null when code is moved to first level. Code is moved at the end of new level"
			updateCodeParent(String codeUrn, String newParentUrn) throws MetamacException;
			"Updates position of code to visualisation requested"
			updateCodeInOrderVisualisation(String codeUrn, String codelistOrderVisualisationUrn, Integer newCodeIndex) throws MetamacException;
			"Updates openness of code to visualisation requested"
			updateCodesInOpennessVisualisation(String codelistOpennessVisualisationUrn, Map<String, Boolean> openness) throws MetamacException;
	   		"Retrieves a code by URN"
            @CodeMetamacDto retrieveCodeByUrn(String urn) throws MetamacException;
            "Finds codes by criteria"
            MetamacCriteriaResult<@CodeMetamacBasicDto> findCodesByCondition(MetamacCriteria criteria) throws MetamacException;
			"Find codes can be geographical granularity of variable element"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodesCanBeVariableElementGeographicalGranularityByCondition(MetamacCriteria criteria)  throws MetamacException;
			"Deletes code"
            deleteCode(String urn) throws MetamacException;
    		"Retrieves codes by code scheme in locale and visualisation requested. If visualisation is not provided, tries retrieve codes in default visualisations"
    		List<CodeMetamacVisualisationResult> retrieveCodesByCodelistUrn(String codelistUrn, String locale, String orderVisualisationUrn, String opennessVisualisationUrn) throws MetamacException;
    		"Imports codes in tsv format"
    		TaskImportationInfo importCodesTsv(String codelistUrn, InputStream tsvStream, String fileName, boolean updateAlreadyExisting) throws MetamacException;
			"Imports code orders in tsv format"
    		TaskImportationInfo importCodeOrdersTsv(String codelistUrn, InputStream tsvStream, String fileName) throws MetamacException;
			"Exports codes in tsv format"
    		String exportCodesTsv(String codelistUrn) throws MetamacException;
			"Exports code orders in tsv format"
    		String exportCodeOrdersTsv(String codelistUrn) throws MetamacException;
    		
	   		"Proposes a normalisation of variable elements to codes. If boolean is true, only normalise codes without variable element. To codes with variable element returns actual variable element"
	   		List<CodeVariableElementNormalisationResult> normaliseVariableElementsToCodes(String codelistUrn, String locale, boolean proposeOnlyWithoutVariableElement) throws MetamacException;
    		
    		"Creates order visualisation"
    		@CodelistVisualisationDto createCodelistOrderVisualisation(@CodelistVisualisationDto codelistOrderVisualisationDto) throws MetamacException;
			"Updates order visualisation"
			@CodelistVisualisationDto updateCodelistOrderVisualisation(@CodelistVisualisationDto codelistOrderVisualisationDto) throws MetamacException;
    		"Retrieves order visualisation by identifier"
    		@CodelistVisualisationDto retrieveCodelistOrderVisualisationByUrn(String urn) throws MetamacException;
    		"Retrieve order visualisations by codelist"
    		List<@CodelistVisualisationDto> retrieveCodelistOrderVisualisationsByCodelist(String codelistUrn)  throws MetamacException;
			"Deletes order visualisation"
    		deleteCodelistOrderVisualisation(String urn) throws MetamacException;
    		
    		"Creates openness visualisation"
    		@CodelistVisualisationDto createCodelistOpennessVisualisation(@CodelistVisualisationDto codelistOpennessVisualisationDto) throws MetamacException;
			"Updates openness visualisation"
			@CodelistVisualisationDto updateCodelistOpennessVisualisation(@CodelistVisualisationDto codelistOpennessVisualisationDto) throws MetamacException;
    		"Retrieves openness visualisation by identifier"
    		@CodelistVisualisationDto retrieveCodelistOpennessVisualisationByUrn(String urn) throws MetamacException;
    		"Retrieve openness visualisations by codelist"
    		List<@CodelistVisualisationDto> retrieveCodelistOpennessVisualisationsByCodelist(String codelistUrn)  throws MetamacException;
			"Deletes openness visualisation"
    		deleteCodelistOpennessVisualisation(String urn) throws MetamacException;
    		    		
			"Creates codelist family"
			@CodelistFamilyDto createCodelistFamily(@CodelistFamilyDto codelistFamilyDto) throws MetamacException;
			"Updates codelist family"
			@CodelistFamilyDto updateCodelistFamily(@CodelistFamilyDto codelistFamilyDto) throws MetamacException;
    		"Retrieves codelist family by urn"
    		@CodelistFamilyDto retrieveCodelistFamilyByUrn(String urn) throws MetamacException;
    		"Finds codelist families by criteria"
    		MetamacCriteriaResult<@CodelistFamilyBasicDto> findCodelistFamiliesByCondition(MetamacCriteria criteria) throws MetamacException;
			"Deletes codelist family"
    		deleteCodelistFamily(String urn) throws MetamacException;
			"Creates codelist family"
			addCodelistsToCodelistFamily(List<String> codelistUrns, String codelistFamilyUrn) throws MetamacException;
			"Removes codelist from family"
			removeCodelistFromCodelistFamily(String codelistUrn, String codelistFamilyUrn) throws MetamacException;
    		
    		"Creates variable family"
			@VariableFamilyDto createVariableFamily(@VariableFamilyDto variableFamily) throws MetamacException;
			"Updates variable family"
			@VariableFamilyDto updateVariableFamily(@VariableFamilyDto variableFamily) throws MetamacException;
    		"Retrieves variable family by urn"
    		@VariableFamilyDto retrieveVariableFamilyByUrn(String urn) throws MetamacException;
    		"Finds variable families by criteria"
    		MetamacCriteriaResult<@VariableFamilyBasicDto> findVariableFamiliesByCondition(MetamacCriteria criteria) throws MetamacException;
			"Deletes variable family"
    		deleteVariableFamily(String urn) throws MetamacException;
    		
    		"Creates variable"
			@VariableDto createVariable(@VariableDto variable) throws MetamacException;
			"Updates variable"
			@VariableDto updateVariable(@VariableDto variable) throws MetamacException;
    		"Retrieves variable by urn"
    		@VariableDto retrieveVariableByUrn(String urn) throws MetamacException;
    		"Finds variables by criteria"
    		MetamacCriteriaResult<@VariableBasicDto> findVariablesByCondition(MetamacCriteria criteria) throws MetamacException;
			"Deletes variable"
    		deleteVariable(String urn) throws MetamacException;
    		"Adds variables to a family"
    		addVariablesToVariableFamily(List<String> variableUrn, String familyUrn) throws MetamacException;
    		"Removes a variable from a family"
    		removeVariableFromVariableFamily(String variableUrn, String familyUrn) throws MetamacException;
    		
    		"Creates variable element"
			@VariableElementDto createVariableElement(@VariableElementDto variableElement) throws MetamacException;
			"Updates variable element"
			@VariableElementDto updateVariableElement(@VariableElementDto variableElement) throws MetamacException;
    		"Retrieves variable element by urn"
    		@VariableElementDto retrieveVariableElementByUrn(String urn) throws MetamacException;
    		"Finds variable elements by criteria"
    		MetamacCriteriaResult<@VariableElementBasicDto> findVariableElementsByCondition(MetamacCriteria criteria) throws MetamacException;
    		"Find variable elements can be for codes of codelist"
    		MetamacCriteriaResult<@RelatedResourceDto> findVariableElementsForCodesByCondition(MetamacCriteria criteria, String codelistUrn) throws MetamacException;
    		"Finds efficiently variable elements by variable"
    		List<VariableElementVisualisationResult> retrieveVariableElementsByVariable(String variableUrn, String locale) throws MetamacException;
			"Deletes variable element"
    		deleteVariableElement(String urn) throws MetamacException;
    		"Adds variable elements to a variable"
    		addVariableElementsToVariable(List<String> variableElementUrn, String variableUrn) throws MetamacException;
    		"Creates fusion operation"
    		@VariableElementOperationDto createVariableElementFusionOperation(List<String> sourcesUrn, String targetUrn) throws MetamacException;
    		"Creates segregation operation"
    		@VariableElementOperationDto createVariableElementSegregationOperation(String sourceUrn, List<String> targetsUrn) throws MetamacException;
    		"Retrieves variable element operation by code"
    		@VariableElementOperationDto retrieveVariableElementOperationByCode(String code) throws MetamacException;
    		"Delete fusion or segregation operation"
    		deleteVariableElementOperation(String code) throws MetamacException;
    		"Retrieves all variable elements operations of one variable"
 			List<@VariableElementOperationDto> retrieveVariableElementsOperationsByVariable(String variableUrn) throws MetamacException;
 			"Retrieves all variable elements operations of one variable element"
 			List<@VariableElementOperationDto> retrieveVariableElementsOperationsByVariableElement(String variableElementUrn) throws MetamacException;
    		"Imports variable elements in tsv format"
    		TaskImportationInfo importVariableElementsTsv(String variableUrn, InputStream tsvStream, String fileName, boolean updateAlreadyExisting) throws MetamacException;
			"Imports geographical information (shape) of variable elements"
    		TaskImportationInfo importVariableElementsShape(String variableUrn, URL shapeFileUrl) throws MetamacException;
			"Imports geographical information (points) of variable elements"
    		TaskImportationInfo importVariableElementsPoints(String variableUrn, URL shapeFileUrl) throws MetamacException;
			"Exports variable elements in tsv format"
    		String exportVariableElementsTsv(String variableUrn) throws MetamacException;
    		    		
    		/**************************************************************************
		     * COMMON
		     **************************************************************************/
    		"
	    	 @param ctx                                                                          
			 @param contentDto                                                                           
			 @throws org.siemac.metamac.core.common.exception.MetamacException
	    	"
	    	TaskInfo importSDMXStructureMsg(@ContentInputDto contentDto) throws MetamacException;
	    	
	    	"
	    	 @throws org.siemac.metamac.core.common.exception.MetamacException
	    	"
	    	TaskInfo importSDMXStructureMsg(@ContentInputDto contentDto, Set<String> resourcesUrnToImport) throws MetamacException;
	    	
	    	"
	    	 @throws org.siemac.metamac.core.common.exception.MetamacException
	    	"
	    	List<@RelatedResourceDto> previewImportSDMXStructure(@ContentInputDto contentDto) throws MetamacException;
	   		
	    	"
	    	 @param ctx                                                                         
			 @param structureMsgDto                                                             
			 @return                                                                            
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			"
	    	String exportSDMXStructureMsg(@ReferenceResourceDto resourceToExport, org.sdmx.resources.sdmxml.rest.schemas.v2_1.types.StructureParameterDetailEnum detail, org.sdmx.resources.sdmxml.rest.schemas.v2_1.types.StructureParameterReferencesEnum references) throws MetamacException;

	   		"Finds information about tasks"
    		MetamacCriteriaResult<@TaskDto> findTasksByCondition(MetamacCriteria criteria) throws MetamacException;
    	}

		Service TasksMetamacServiceFacade {
			> @ConceptsMetamacService
			> @CategoriesMetamacService
			> @OrganisationsMetamacService
       		> @CodesMetamacService
       		> @TasksMetamacService

			"Imports concepts in tsv format"
    		processImportConceptsTsv(String conceptSchemeUrn, java.io.File tsvFile, String fileName, String jobKey, boolean updateAlreadyExisting) throws MetamacException;
			"Imports categories in tsv format"
    		processImportCategoriesTsv(String categorySchemeUrn, java.io.File tsvFile, String fileName, String jobKey, boolean updateAlreadyExisting) throws MetamacException;    		
    		"Imports organisations in tsv format"
    		processImportOrganisationsTsv(String organisationSchemeUrn, java.io.File tsvFile, String fileName, String jobKey, boolean updateAlreadyExisting) throws MetamacException;
    		"Imports codes in tsv format"
    		processImportCodesTsv(String codelistUrn, java.io.File tsvFile, String fileName, String jobKey, boolean updateAlreadyExisting) throws MetamacException;
			"Imports code orders in tsv format"
    		processImportCodeOrdersTsv(String codelistUrn, java.io.File tsvFile, String fileName, String jobKey) throws MetamacException;
    		"Imports variable elements in tsv format"
    		processImportVariableElementsTsv(String variableUrn, java.io.File tsvFile, String fileName, String jobKey, boolean updateAlreadyExisting) throws MetamacException;
			"Imports geographical information (shape) of variable elements"
    		processImportVariableElementsShape(String variableUrn, URL shapeFileUrl, String jobKey) throws MetamacException;
			"Imports geographical information (points) of variable elements"
    		processImportVariableElementsPoints(String variableUrn, URL shapeFileUrl, String jobKey) throws MetamacException;
    		"Perform a merge with temporal codelist"
			processPublishInternallyCodelist(String urnToCopy, boolean forceLatestFinal, String jobKey) throws MetamacException;

    		"Marks job as failed"
    		markTaskAsFailed(String job, java.lang.Exception exception) throws MetamacException;
    		"Mark a specific Item Scheme with a failed flag"
    		markTaskItemSchemeAsFailed(String urnToCopy) throws MetamacException;
 			
 			"Delete entities marked to delete"
    		deleteEntitiesMarkedToDelete() throws MetamacException;
    		
   		}
    }

}