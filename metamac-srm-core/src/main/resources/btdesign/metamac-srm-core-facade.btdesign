import "classpath:/btdesign/statistic-sdmx-v2_1-domain-dtos-trans.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-dtos-core.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-dtos-importations.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-dtos-common.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-enums.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-dtos-concepts.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-enums-concept.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-dtos-categories.btdesign"


import "classpath:/btdesign/metamac-core-common-dtos.btdesign"
import "classpath:/btdesign/metamac-core-common-enum.btdesign"

import "classpath:/btdesign/statistic-sdmx-core-structure.btdesign"
import "classpath:/btdesign/statistic-sdmx-core-concepts.btdesign"
import "classpath:/btdesign/statistic-sdmx-core-importation.btdesign"

import "classpath:/btdesign/metamac-srm-core-concepts.btdesign"
import "classpath:/btdesign/metamac-srm-core-organisations.btdesign"
import "classpath:/btdesign/metamac-srm-core-concepts-dtos.btdesign"
import "classpath:/btdesign/metamac-srm-core-organisations-dtos.btdesign"
import "classpath:/btdesign/metamac-srm-core-enum.btdesign"

import "classpath:/btdesign/metamac-srm-core-dsds.btdesign"
import "classpath:/btdesign/metamac-srm-core-dsds-dtos.btdesign"

import "classpath:/btdesign/metamac-srm-core-categories.btdesign"
import "classpath:/btdesign/metamac-srm-core-categories-dtos.btdesign"

import "classpath:/btdesign/metamac-srm-core-codes.btdesign"
import "classpath:/btdesign/metamac-srm-core-codes-dtos.btdesign"

Application SrmFacadeCore {
    basePackage=unused
    
    Module core_facades {
    	basePackage=org.siemac.metamac.srm.core.facade
    	
		Service SrmCoreServiceFacade {
       		> @ConceptsMetamacService
       		> @DsdsMetamacService
       		> @OrganisationsMetamacService
       		> @CategoriesMetamacService
       		> @CodesMetamacService
       		> @ImportationService

			"          
			 @param ctx  
			 @param dataStructureDefinitionDto                                                  
			 @return                                                                            
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			"
       		@DataStructureDefinitionMetamacDto createDataStructureDefinition(@DataStructureDefinitionMetamacDto dataStructureDefinitionMetamacDto) throws MetamacException;
       		
       		"          
			 @param ctx  
			 @param dataStructureDefinitionDto                                                  
			 @return                                                                            
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			"
       		@DataStructureDefinitionMetamacDto updateDataStructureDefinition(@DataStructureDefinitionMetamacDto dataStructureDefinitionMetamacDto) throws MetamacException;
       		
			"       		                                                                                    
			 @param ctx                                                                          
			 @param urn                                                   
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			" 
       		deleteDataStructureDefinition(String urn) throws MetamacException;
			
			"
			 Find DSDs by criteria                           
			 @param ctx                 
			 @param criteria           
			 @return                    
			"
	    	MetamacCriteriaResult<@DataStructureDefinitionMetamacDto> findDataStructureDefinitionsByCondition(MetamacCriteria criteria) throws MetamacException;

			"
          	 Retrieve a DSD without Grouping relationships.
		     @param ctx
		     @param urn
		     @param typeDozerCopyMode, in TypeDozerCopyMode.CREATE the object graph not contains id fields, always is a new DSD graph instance. Use TypeDozerCopyMode.UPDATE for normal use.
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
			@DataStructureDefinitionMetamacDto retrieveDataStructureDefinition(String urn, @TypeDozerCopyMode typeDozerCopyMode) throws MetamacException;
			
			" Retrieve a DSD by URN.
			 @param ctx
			 @param urn Parameter to find DSD
			 @return
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			"
			@DataStructureDefinitionMetamacDto retrieveDataStructureDefinitionByUrn(String urn) throws MetamacException;				    	

            "Retrieves all data structure definitions versions"
            List<@DataStructureDefinitionMetamacDto> retrieveDataStructureDefinitionVersions(String urn) throws MetamacException;
            
	    	"
	    	 Sends dsd to production validation
		     @param ctx
		     @param urn
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
	    	@DataStructureDefinitionMetamacDto sendDataStructureDefinitionToProductionValidation(String urn) throws MetamacException;
    		
    		"
    		 Sends to diffusion validation
		     @param ctx
		     @param urn Urn of DataStructureDefinition
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
    		@DataStructureDefinitionMetamacDto sendDataStructureDefinitionToDiffusionValidation(String urn) throws MetamacException;
	    	
	    	"
	    	 Rejects production validation of dsd   		
		     @param ctx
		     @param urn Urn of DataStructureDefinition
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
	    	@DataStructureDefinitionMetamacDto rejectDataStructureDefinitionProductionValidation(String urn) throws MetamacException;
	    	
	    	"
	    	 Rejects diffusion validation of dsd  		
		     @param ctx
		     @param urn Urn of DataStructureDefinition
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
	    	@DataStructureDefinitionMetamacDto rejectDataStructureDefinitionDiffusionValidation(String urn) throws MetamacException; 
	    	
	    	"
	    	 Publishes internally a dsd  		
		     @param ctx
		     @param urn Urn of DataStructureDefinition
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
	    	@DataStructureDefinitionMetamacDto publishDataStructureDefinitionInternally(String urn) throws MetamacException;
	    	
	    	"
	    	 Publishes externally a dsd  		
		     @param ctx
		     @param urn Urn of DataStructureDefinition
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
	    	@DataStructureDefinitionMetamacDto publishDataStructureDefinitionExternally(String urn) throws MetamacException;
    		
    		"
	    	 Creates a new version of a dsd, copying metadata from version with provided urn  		
		     @param ctx
		     @param urnToCopy Urn of DataStructureDefinition to copy
		     @param versionType MAJOR or MINOR version
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
    		@DataStructureDefinitionMetamacDto versioningDataStructureDefinition(String urnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		
    		"
	    	 Ends the dsd scheme validity  		
		     @param ctx
		     @param urn Urn of DataStructureDefinition
		     @return
		     @throws org.siemac.metamac.core.common.exception.MetamacException
		    "
    		@DataStructureDefinitionMetamacDto endDataStructureDefinitionValidity(String urn) throws MetamacException;
	    	
			"
			 @param ctx                                                                         
			 @param urnDsd of DSD                                                                       
			 @param typeComponentList                                                           
			 @return                                                                            
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			"
          	List<@DescriptorDto> findDescriptorsForDataStructureDefinition(String urnDsd, @TypeComponentList typeComponentList) throws MetamacException;
          	
          	"
          	 @param ctx                                                                         
			 @param urnDsd of DSD                                                                         
			 @return                                                                            
			 @throws org.siemac.metamac.core.common.exception.MetamacException
          	"
          	List<@DescriptorDto> findDescriptorsForDataStructureDefinition(String urnDsd) throws MetamacException;
	   		
	   		"                                                                                    
			 @param ctx                                                                          
			 @param urnDsd of DSD                                                                          
			 @param descriptorDto                                                                
			 @return                                                                             
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			" 
	   		@DescriptorDto saveDescriptorForDataStructureDefinition(String urnDsd, @DescriptorDto descriptorDto) throws MetamacException;
	   		
	   		"
	   		 @param ctx                                                                          
			 @param urnDsd of DSD                                                                        
			 @param descriptorDto                                                                
			 @throws org.siemac.metamac.core.common.exception.MetamacException 
	   		"
	   		deleteDescriptorForDataStructureDefinition(String urnDsd, @DescriptorDto descriptorDto)throws MetamacException;
	   
	   		"
			 @param ctx                                                                         
			 @param urnDsd of DSD                                                                       
			 @param componentDto                                                                
			 @param typeComponentList                                                           
			 @return                                                                            
			 @throws org.siemac.metamac.core.common.exception.MetamacException
	   		"
	   		@ComponentDto saveComponentForDataStructureDefinition(String urnDsd, @ComponentDto componentDto) throws MetamacException;
	   		
	   		"                                                                                    
			 @param ctx                                                                          
			 @param urnDsd of DSD                                                                        
			 @param componentDto                                                                 
			 @param typeComponentList                                                            
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			" 
	   		deleteComponentForDataStructureDefinition(String urnDsd, @ComponentDto componentDto) throws MetamacException;

    		"Find concept schemes with concepts can be primary measure"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdPrimaryMeasureByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concepts can be primary measure"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdPrimaryMeasureByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concept schemes with concepts can be time dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdTimeDimensionByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concepts can be time dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdTimeDimensionByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concept schemes with concepts can be measure dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdMeasureDimensionByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concepts can be measure dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdMeasureDimensionByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concept schemes with concepts can be dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdDimensionByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concepts can be dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdDimensionByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concept schemes with concepts can be role"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdRoleByCondition(MetamacCriteria criteria) throws MetamacException;
    		"Find concepts can be role"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdRoleByCondition(MetamacCriteria criteria) throws MetamacException;
    		"Find codelists belong to same variable of concept"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodelistsCanBeEnumeratedRepresentationForDsdDimensionByCondition(MetamacCriteria criteria, String conceptUrn) throws MetamacException;
    		"Find concept schemes to enumerated representation of measure dimension"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesCanBeEnumeratedRepresentationForDsdMeasureDimensionByCondition(MetamacCriteria criteria) throws MetamacException;
    		"Find codelists to enumerated representation of primary measure"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodelistsCanBeEnumeratedRepresentationForDsdPrimaryMeasureByCondition(MetamacCriteria criteria) throws MetamacException;
    		"Find concept schemes with concepts can be concept of attribute"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesWithConceptsCanBeDsdAttributeByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find concepts can be concept of attribute"
    		MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeDsdAttributeByCondition(MetamacCriteria criteria, String dsdUrn) throws MetamacException;
    		"Find codelists belong to same variable of concept"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodelistsCanBeEnumeratedRepresentationForDsdAttributeByCondition(MetamacCriteria criteria, String conceptUrn) throws MetamacException;
    		
	    	/**************************************************************************
		     * ORGANISATIONS
		     **************************************************************************/
       		"Creates organisation scheme"
	   		@OrganisationSchemeMetamacDto createOrganisationScheme(@OrganisationSchemeMetamacDto organisationSchemeDto) throws MetamacException;
	   		"Updates organisation scheme"
            @OrganisationSchemeMetamacDto updateOrganisationScheme(@OrganisationSchemeMetamacDto organisationSchemeDto) throws MetamacException;
            "Deletes organisation scheme"
            deleteOrganisationScheme(String urn) throws MetamacException;
            "Finds organisation schemes by criteria"
            MetamacCriteriaResult<@OrganisationSchemeMetamacDto> findOrganisationSchemesByCondition(MetamacCriteria criteria) throws MetamacException;
            "Retrieves a organisation scheme by URN"
            @OrganisationSchemeMetamacDto retrieveOrganisationSchemeByUrn(String urn) throws MetamacException;
            "Retrieves all organisation scheme versions"
            List<@OrganisationSchemeMetamacDto> retrieveOrganisationSchemeVersions(String urn) throws MetamacException;
            
            "Sends organisation scheme to production validation"
	    	@OrganisationSchemeMetamacDto sendOrganisationSchemeToProductionValidation(String urn) throws MetamacException;
    		"Sends to diffusion validation"
    		@OrganisationSchemeMetamacDto sendOrganisationSchemeToDiffusionValidation(String urn) throws MetamacException;
	    	"Rejects production validation of organisation scheme"    		
	    	@OrganisationSchemeMetamacDto rejectOrganisationSchemeProductionValidation(String urn) throws MetamacException;
	    	"Rejects diffusion validation of organisation scheme"
	    	@OrganisationSchemeMetamacDto rejectOrganisationSchemeDiffusionValidation(String urn) throws MetamacException; 
	    	"Publishes internally a organisation scheme"
	    	@OrganisationSchemeMetamacDto publishOrganisationSchemeInternally(String urn) throws MetamacException;
	    	"Publishes externally a organisation scheme"
	    	@OrganisationSchemeMetamacDto publishOrganisationSchemeExternally(String urn) throws MetamacException;
    		"Creates a new version of a organisation scheme, copying metadata from version with provided urn"
    		@OrganisationSchemeMetamacDto versioningOrganisationScheme(String urnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		"Ends the organisation scheme validity"
    		@OrganisationSchemeMetamacDto endOrganisationSchemeValidity(String urn) throws MetamacException;
            
			"Creates organisation"
	   		@OrganisationMetamacDto createOrganisation(@OrganisationMetamacDto organisationMetamacDto) throws MetamacException;
	   		"Updates organisation"
            @OrganisationMetamacDto updateOrganisation(@OrganisationMetamacDto organisationDto) throws MetamacException;
	   		"Retrieves a organisation by URN"
            @OrganisationMetamacDto retrieveOrganisationByUrn(String urn) throws MetamacException;
            "Finds organisations by criteria"
            MetamacCriteriaResult<@OrganisationMetamacDto> findOrganisationsByCondition(MetamacCriteria criteria) throws MetamacException;
    		"Retrieve organisation that must be maintainer of all created artefacts"
    		@OrganisationMetamacDto retrieveMaintainerDefault() throws MetamacException;
			"Deletes organisation"
            deleteOrganisation(String urn) throws MetamacException;
    		"Retrieves organisations by organisation scheme, in tree structure"
    		List<@ItemHierarchyDto> retrieveOrganisationsByOrganisationSchemeUrn(String organisationSchemeUrn) throws MetamacException;       		
       		
       		/**************************************************************************
		     * CONCEPTS
		     *************************************************************************/     		
	   		"Creates concept scheme"
	   		@ConceptSchemeMetamacDto createConceptScheme(@ConceptSchemeMetamacDto conceptSchemeDto) throws MetamacException;
	   		"Updates concept scheme"
            @ConceptSchemeMetamacDto updateConceptScheme(@ConceptSchemeMetamacDto conceptSchemeDto) throws MetamacException;
            "Deletes concept scheme"
            deleteConceptScheme(String urn) throws MetamacException;
            "Finds concepts schemes by criteria"
            MetamacCriteriaResult<@ConceptSchemeMetamacDto> findConceptSchemesByCondition(MetamacCriteria criteria) throws MetamacException;
            "Finds concepts schemes by criteria with concepts that can be role"
            MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesByConditionWithConceptsCanBeRole(MetamacCriteria criteria) throws MetamacException;
            "Finds concepts schemes by criteria with concepts that can be extended"
            MetamacCriteriaResult<@RelatedResourceDto> findConceptSchemesByConditionWithConceptsCanBeExtended(MetamacCriteria criteria) throws MetamacException;
            "Retrieves a concept scheme by URN"
            @ConceptSchemeMetamacDto retrieveConceptSchemeByUrn(String urn) throws MetamacException;
            "Retrieves all concept scheme versions"
            List<@ConceptSchemeMetamacDto> retrieveConceptSchemeVersions(String urn) throws MetamacException;
	    	"Sends concept scheme to production validation"
	    	@ConceptSchemeMetamacDto sendConceptSchemeToProductionValidation(String urn) throws MetamacException;
    		"Sends to diffusion validation"
    		@ConceptSchemeMetamacDto sendConceptSchemeToDiffusionValidation(String urn) throws MetamacException;
	    	"Rejects production validation of concept scheme"    		
	    	@ConceptSchemeMetamacDto rejectConceptSchemeProductionValidation(String urn) throws MetamacException;
	    	"Rejects diffusion validation of concept scheme"
	    	@ConceptSchemeMetamacDto rejectConceptSchemeDiffusionValidation(String urn) throws MetamacException; 
	    	"Publishes internally a concept scheme"
	    	@ConceptSchemeMetamacDto publishConceptSchemeInternally(String urn) throws MetamacException;
	    	"Publishes externally a concept scheme"
	    	@ConceptSchemeMetamacDto publishConceptSchemeExternally(String urn) throws MetamacException;
    		"Creates a new version of a concept scheme, copying metadata from version with provided urn"
    		@ConceptSchemeMetamacDto versioningConceptScheme(String urnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		"Ends the concept scheme validity"
    		@ConceptSchemeMetamacDto endConceptSchemeValidity(String urn) throws MetamacException;
    		
    		"Creates concept"
	   		@ConceptMetamacDto createConcept(@ConceptMetamacDto conceptMetamacDto) throws MetamacException;
	   		"Updates concept"
            @ConceptMetamacDto updateConcept(@ConceptMetamacDto conceptDto) throws MetamacException;
	   		"Retrieves a concept by URN"
            @ConceptMetamacDto retrieveConceptByUrn(String urn) throws MetamacException;
            "Finds concepts by criteria"
            MetamacCriteriaResult<@ConceptMetamacDto> findConceptsByCondition(MetamacCriteria criteria) throws MetamacException;
            "Finds concepts that can be role by criteria"
            MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeRoleByCondition(MetamacCriteria criteria) throws MetamacException;
            "Finds concepts that can be extended by criteria"
            MetamacCriteriaResult<@RelatedResourceDto> findConceptsCanBeExtendedByCondition(MetamacCriteria criteria) throws MetamacException;
			"Deletes concept"
            deleteConcept(String urn) throws MetamacException;
    		"Retrieves concepts by concept scheme, in tree structure"
    		List<@ItemHierarchyDto> retrieveConceptsByConceptSchemeUrn(String conceptSchemeUrn) throws MetamacException;
    		
    		"Adds a concepts relation (related concepts)"
    		addRelatedConcept(String urn1, String urn2) throws MetamacException;
    		"Deletes a concepts relation (related concepts)"
    		deleteRelatedConcept(String urn1, String urn2) throws MetamacException;
    		"Retrieves all related concepts with a concept (related concepts)"
    		List<@ConceptMetamacDto> retrieveRelatedConcepts(String urn) throws MetamacException;
    		"Adds a concepts relation of type 'roles'"
    		addRoleConcept(String urn, String conceptRoleUrn) throws MetamacException;
    		"Deletes a concepts relation of type 'roles'"
    		deleteRoleConcept(String urn, String conceptRoleUrn) throws MetamacException;
    		"Retrieves all related concepts with a concept with relation 'roles'"
    		List<@ConceptMetamacDto> retrieveRoleConcepts(String urn) throws MetamacException;

    		"Finds all concept types"
    		List<@ConceptTypeDto> findAllConceptTypes throws MetamacException;
    		"Retrieves concept type by identifier"
    		@ConceptTypeDto retrieveConceptTypeByIdentifier(String identifier) throws MetamacException;
    		
    		"Find codelists belong to same variable of concept"
    		MetamacCriteriaResult<@RelatedResourceDto> findCodelistsCanBeEnumeratedRepresentationForConceptByCondition(MetamacCriteria criteria, String conceptUrn) throws MetamacException;

	    	/**************************************************************************
		     * CATEGORIES
		     **************************************************************************/

       		"Creates category scheme"
	   		@CategorySchemeMetamacDto createCategoryScheme(@CategorySchemeMetamacDto categorySchemeDto) throws MetamacException;
	   		"Updates category scheme"
            @CategorySchemeMetamacDto updateCategoryScheme(@CategorySchemeMetamacDto categorySchemeDto) throws MetamacException;
            "Deletes category scheme"
            deleteCategoryScheme(String urn) throws MetamacException;
            "Finds category schemes by criteria"
            MetamacCriteriaResult<@CategorySchemeMetamacDto> findCategorySchemesByCondition(MetamacCriteria criteria) throws MetamacException;
            "Retrieves a category scheme by URN"
            @CategorySchemeMetamacDto retrieveCategorySchemeByUrn(String urn) throws MetamacException;
            "Retrieves all category scheme versions"
            List<@CategorySchemeMetamacDto> retrieveCategorySchemeVersions(String urn) throws MetamacException;
            
            "Sends category scheme to production validation"
	    	@CategorySchemeMetamacDto sendCategorySchemeToProductionValidation(String urn) throws MetamacException;
    		"Sends to diffusion validation"
    		@CategorySchemeMetamacDto sendCategorySchemeToDiffusionValidation(String urn) throws MetamacException;
	    	"Rejects production validation of category scheme"    		
	    	@CategorySchemeMetamacDto rejectCategorySchemeProductionValidation(String urn) throws MetamacException;
	    	"Rejects diffusion validation of category scheme"
	    	@CategorySchemeMetamacDto rejectCategorySchemeDiffusionValidation(String urn) throws MetamacException; 
	    	"Publishes internally a category scheme"
	    	@CategorySchemeMetamacDto publishCategorySchemeInternally(String urn) throws MetamacException;
	    	"Publishes externally a category scheme"
	    	@CategorySchemeMetamacDto publishCategorySchemeExternally(String urn) throws MetamacException;
    		"Creates a new version of a category scheme, copying metadata from version with provided urn"
    		@CategorySchemeMetamacDto versioningCategoryScheme(String urnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		"Ends the category scheme validity"
    		@CategorySchemeMetamacDto endCategorySchemeValidity(String urn) throws MetamacException;
            
			"Creates category"
	   		@CategoryMetamacDto createCategory(@CategoryMetamacDto categoryMetamacDto) throws MetamacException;
	   		"Updates category"
            @CategoryMetamacDto updateCategory(@CategoryMetamacDto categoryDto) throws MetamacException;
	   		"Retrieves a category by URN"
            @CategoryMetamacDto retrieveCategoryByUrn(String urn) throws MetamacException;
            "Finds categories by criteria"
            MetamacCriteriaResult<@CategoryMetamacDto> findCategoriesByCondition(MetamacCriteria criteria) throws MetamacException;
			"Deletes category"
            deleteCategory(String urn) throws MetamacException;
    		"Retrieves categories by category scheme, in tree structure"
    		List<@ItemHierarchyDto> retrieveCategoriesByCategorySchemeUrn(String categorySchemeUrn) throws MetamacException;
    		
    		// Categorisations
    		"Creates categorisation"
    		@CategorisationDto createCategorisation(String categoryUrn, String artefactCategorisedUrn, String maintainerUrn) throws MetamacException;
    		"Retrieves categorisation by urn"
    		@CategorisationDto retrieveCategorisationByUrn(String urn) throws MetamacException;
    		"Deletes categorisation"
    		deleteCategorisation(String urn) throws MetamacException;
    		"Retrieves all categorisations by categorised artefact"
    		List<@CategorisationDto> retrieveCategorisationsByArtefact(String urn) throws MetamacException;
    		
	    	/**************************************************************************
		     * CODES
		     **************************************************************************/

       		"Creates codelist"
	   		@CodelistMetamacDto createCodelist(@CodelistMetamacDto codelistDto) throws MetamacException;
	   		"Updates codelist" 
            @CodelistMetamacDto updateCodelist(@CodelistMetamacDto codelistDto) throws MetamacException;
            "Deletes codelist"
            deleteCodelist(String urn) throws MetamacException;
            "Finds codelist by criteria"
            MetamacCriteriaResult<@CodelistMetamacDto> findCodelistsByCondition(MetamacCriteria criteria) throws MetamacException;
            "Retrieves a codelist by URN"
            @CodelistMetamacDto retrieveCodelistByUrn(String urn) throws MetamacException;
            "Retrieves all codelist versions"
            List<@CodelistMetamacDto> retrieveCodelistVersions(String urn) throws MetamacException;
            
            "Sends Codelist to production validation"
	    	@CodelistMetamacDto sendCodelistToProductionValidation(String urn) throws MetamacException;
    		"Sends to diffusion validation"
    		@CodelistMetamacDto sendCodelistToDiffusionValidation(String urn) throws MetamacException;
	    	"Rejects production validation of Codelist"    		
	    	@CodelistMetamacDto rejectCodelistProductionValidation(String urn) throws MetamacException;
	    	"Rejects diffusion validation of Codelist"
	    	@CodelistMetamacDto rejectCodelistDiffusionValidation(String urn) throws MetamacException; 
	    	"Publishes internally a Codelist"
	    	@CodelistMetamacDto publishCodelistInternally(String urn) throws MetamacException;
	    	"Publishes externally a Codelist"
	    	@CodelistMetamacDto publishCodelistExternally(String urn) throws MetamacException;
    		"Creates a new version of a Codelist, copying metadata from version with provided urn"
    		@CodelistMetamacDto versioningCodelist(String urnToCopy, Boolean versioningCodes, @VersionTypeEnum versionType) throws MetamacException;
    		"Ends the Codelist validity"
    		@CodelistMetamacDto endCodelistValidity(String urn) throws MetamacException;
    		
    		"Creates code"
	   		@CodeMetamacDto createCode(@CodeMetamacDto codeMetamacDto) throws MetamacException;
    		"Creates a list of hierarchical codes"
	   		createCodesHierarchy(String codelistUrn, String parentUrn, List<@ItemHierarchyDto> codesMetamacDto) throws MetamacException;
	   		"Updates code"
            @CodeMetamacDto updateCode(@CodeMetamacDto codeDto) throws MetamacException;
			"Change variable element to code"
			@CodeMetamacDto updateCodeVariableElement(String codeUrn, String variableElementUrn) throws MetamacException;
			"Updates parent of code. parentUrn is null when code is moved to first level. Code is moved at the end of new level"
			updateCodeParent(String codeUrn, String newParentUrn) throws MetamacException;
			"Updates position of code to visualisation requested"
			updateCodeInOrderVisualisation(String codeUrn, String codelistOrderVisualisationUrn, Long newCodeIndex) throws MetamacException;
	   		"Retrieves a code by URN"
            @CodeMetamacDto retrieveCodeByUrn(String urn) throws MetamacException;
            "Finds codes by criteria"
            MetamacCriteriaResult<@CodeMetamacDto> findCodesByCondition(MetamacCriteria criteria) throws MetamacException;
			"Deletes code"
            deleteCode(String urn) throws MetamacException;
    		"Retrieves codes by code scheme in locale and visualisation requested"
    		List<CodeMetamacVisualisationResult> retrieveCodesByCodelistUrn(String codelistUrn, String locale, String orderVisualisationUrn) throws MetamacException;
    		
    		"Creates visualisation"
    		@CodelistOrderVisualisationDto createCodelistOrderVisualisation(@CodelistOrderVisualisationDto codelistOrderVisualisationDto) throws MetamacException;
			"Updates visualisation"
			@CodelistOrderVisualisationDto updateCodelistOrderVisualisation(@CodelistOrderVisualisationDto codelistOrderVisualisationDto) throws MetamacException;
    		"Retrieves visualisation by identifier"
    		@CodelistOrderVisualisationDto retrieveCodelistOrderVisualisationByUrn(String urn) throws MetamacException;
    		"Retrieve visualisations by codelist"
    		List<@CodelistOrderVisualisationDto> retrieveCodelistOrderVisualisationsByCodelist(String codelistUrn)  throws MetamacException;
			"Deletes visualisation"
    		deleteCodelistOrderVisualisation(String urn) throws MetamacException;
    		
			"Creates codelist family"
			@CodelistFamilyDto createCodelistFamily(@CodelistFamilyDto codelistFamilyDto) throws MetamacException;
			"Updates codelist family"
			@CodelistFamilyDto updateCodelistFamily(@CodelistFamilyDto codelistFamilyDto) throws MetamacException;
    		"Retrieves codelist family by urn"
    		@CodelistFamilyDto retrieveCodelistFamilyByUrn(String urn) throws MetamacException;
    		"Finds codelist families by criteria"
    		MetamacCriteriaResult<@CodelistFamilyDto> findCodelistFamiliesByCondition(MetamacCriteria criteria) throws MetamacException;
			"Deletes codelist family"
    		deleteCodelistFamily(String urn) throws MetamacException;
			"Creates codelist family"
			addCodelistsToCodelistFamily(List<String> codelistUrns, String codelistFamilyUrn) throws MetamacException;
			"Removes codelist from family"
			removeCodelistFromCodelistFamily(String codelistUrn, String codelistFamilyUrn) throws MetamacException;
    		
    		"Creates variable family"
			@VariableFamilyDto createVariableFamily(@VariableFamilyDto variableFamily) throws MetamacException;
			"Updates variable family"
			@VariableFamilyDto updateVariableFamily(@VariableFamilyDto variableFamily) throws MetamacException;
    		"Retrieves variable family by urn"
    		@VariableFamilyDto retrieveVariableFamilyByUrn(String urn) throws MetamacException;
    		"Finds variable families by criteria"
    		MetamacCriteriaResult<@VariableFamilyDto> findVariableFamiliesByCondition(MetamacCriteria criteria) throws MetamacException;
			"Deletes variable family"
    		deleteVariableFamily(String urn) throws MetamacException;
    		
    		"Creates variable"
			@VariableDto createVariable(@VariableDto variable) throws MetamacException;
			"Updates variable"
			@VariableDto updateVariable(@VariableDto variable) throws MetamacException;
    		"Retrieves variable by urn"
    		@VariableDto retrieveVariableByUrn(String urn) throws MetamacException;
    		"Finds variables by criteria"
    		MetamacCriteriaResult<@VariableDto> findVariablesByCondition(MetamacCriteria criteria) throws MetamacException;
			"Deletes variable"
    		deleteVariable(String urn) throws MetamacException;
    		"Adds variables to a family"
    		addVariablesToVariableFamily(List<String> variableUrn, String familyUrn) throws MetamacException;
    		"Removes a variable from a family"
    		removeVariableFromVariableFamily(String variableUrn, String familyUrn) throws MetamacException;
    		
    		"Creates variable element"
			@VariableElementDto createVariableElement(@VariableElementDto variableElement) throws MetamacException;
			"Updates variable element"
			@VariableElementDto updateVariableElement(@VariableElementDto variableElement) throws MetamacException;
    		"Retrieves variable element by urn"
    		@VariableElementDto retrieveVariableElementByUrn(String urn) throws MetamacException;
    		"Finds variable elements by criteria"
    		MetamacCriteriaResult<@VariableElementDto> findVariableElementsByCondition(MetamacCriteria criteria) throws MetamacException;
    		"Find variable elements can be for codes of codelist"
    		MetamacCriteriaResult<@RelatedResourceDto> findVariableElementsForCodesByCondition(MetamacCriteria criteria, String codelistUrn) throws MetamacException;
			"Deletes variable element"
    		deleteVariableElement(String urn) throws MetamacException;
    		"Adds variable elements to a variable"
    		addVariableElementsToVariable(List<String> variableElementUrn, String variableUrn) throws MetamacException;
    		"Creates fusion operation"
    		@VariableElementOperationDto createVariableElementFusionOperation(List<String> sourcesUrn, String targetUrn) throws MetamacException;
    		"Creates segregation operation"
    		@VariableElementOperationDto createVariableElementSegregationOperation(String sourceUrn, List<String> targetsUrn) throws MetamacException;
    		"Retrieves variable element operation by code"
    		@VariableElementOperationDto retrieveVariableElementOperationByCode(String code) throws MetamacException;
    		"Delete fusion or segregation operation"
    		deleteVariableElementOperation(String code) throws MetamacException;
    		"Retrieves all variable elements operations of one variable"
 			List<@VariableElementOperationDto> retrieveVariableElementsOperationsByVariable(String variableUrn) throws MetamacException;
 			"Retrieves all variable elements operations of one variable element"
 			List<@VariableElementOperationDto> retrieveVariableElementsOperationsByVariableElement(String variableElementUrn) throws MetamacException;
    		    		
    		/**************************************************************************
		     * COMMON
		     **************************************************************************/
    		"
	    	 @param ctx                                                                          
			 @param contentDto                                                                           
			 @throws org.siemac.metamac.core.common.exception.MetamacException
	    	"
	    	importSDMXStructureMsg(@ContentInputDto contentDto) throws MetamacException;
	   		
	   		"Find information about importations jobs"
    		MetamacCriteriaResult<@ImportDataDto> findImportDataByCondition(MetamacCriteria criteria) throws MetamacException;
    		
	    	"
	    	 @param ctx                                                                         
			 @param structureMsgDto                                                             
			 @return                                                                            
			 @throws org.siemac.metamac.core.common.exception.MetamacException
			"
	    	String exportSDMXStructureMsg(@StructureMsgDto structureMsgDto) throws MetamacException;
    	}

    }

}