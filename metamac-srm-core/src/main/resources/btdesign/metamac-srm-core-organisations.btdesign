import "classpath:/btdesign/export/metamac-core-common-entity.btdesign"
import "classpath:/btdesign/metamac-core-common-enum.btdesign"
import "classpath:/btdesign/statistic-sdmx-core-organisations.btdesign"
import "classpath:/btdesign/statistic-sdmx-v2_1-domain-enums.btdesign"
import "classpath:/btdesign/metamac-srm-core-base.btdesign"

Application OrganisationsMetamac {
	basePackage=unused

	Module domain_organisations_metamac {
		basePackage=org.siemac.metamac.srm.core.organisation

		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------  
		"Provides access to Organisations"
		Service OrganisationsMetamacService {
			
			> @OrganisationSchemeVersionMetamacRepository
			> @OrganisationMetamacRepository
			
			"Creates organisation scheme"
			@OrganisationSchemeVersionMetamac createOrganisationScheme(@OrganisationSchemeVersionMetamac organisationSchemeVersion) throws MetamacException;
			"Pre-Create organisation scheme"
			@OrganisationSchemeVersionMetamac preCreateOrganisationScheme(@OrganisationSchemeVersionMetamac organisationSchemeVersion) throws MetamacException;
			"Updates organisation scheme"
			@OrganisationSchemeVersionMetamac updateOrganisationScheme(@OrganisationSchemeVersionMetamac organisationSchemeVersion) throws MetamacException;
			"Retrieves organisation scheme by urn"
			@OrganisationSchemeVersionMetamac retrieveOrganisationSchemeByUrn(String urn) throws MetamacException;
			"Retrieves all organisation schemes versions"
			List<@OrganisationSchemeVersionMetamac> retrieveOrganisationSchemeVersions(String urn) throws MetamacException;
			"Finds organisation schemes by criteria"
    		PagedResult<@OrganisationSchemeVersionMetamac> findOrganisationSchemesByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		"Sends organisation scheme to production validation"
    		@OrganisationSchemeVersionMetamac sendOrganisationSchemeToProductionValidation(String urn) throws MetamacException;
    		"Sends organisation scheme to diffusion validation"
    		@OrganisationSchemeVersionMetamac sendOrganisationSchemeToDiffusionValidation(String urn) throws MetamacException;
	    	"Rejects production validation of organisation scheme"    		
	    	@OrganisationSchemeVersionMetamac rejectOrganisationSchemeProductionValidation(String urn) throws MetamacException;
	    	"Rejects diffusion validation of organisation scheme"
	    	@OrganisationSchemeVersionMetamac rejectOrganisationSchemeDiffusionValidation(String urn) throws MetamacException;
	    	"Publish internally a organisation scheme"
	    	@OrganisationSchemeVersionMetamac publishInternallyOrganisationScheme(String urn, Boolean forceLatestFinal) throws MetamacException;
	    	"Publish externally a organisation scheme"
	    	@OrganisationSchemeVersionMetamac publishExternallyOrganisationScheme(String urn) throws MetamacException;
			"Deletes organisation scheme version. This must be last version and no published"
    		deleteOrganisationScheme(String urn) throws MetamacException;
    		"Creates a new version of a organisation scheme, copying metadata from version with provided urn"
    		@OrganisationSchemeVersionMetamac versioningOrganisationScheme(String urnToCopy, @VersionTypeEnum versionType) throws MetamacException;
    		"Ends the organisation scheme validity"
    		@OrganisationSchemeVersionMetamac endOrganisationSchemeValidity(String urn) throws MetamacException;
    		"Retrieves organisations scheme by organisation urn"
    		@OrganisationSchemeVersionMetamac retrieveOrganisationSchemeByOrganisationUrn(String organisationUrn) throws MetamacException;
    		
			"Creates organisation"
			@OrganisationMetamac createOrganisation(String organisationSchemeUrn, @OrganisationMetamac organisation) throws MetamacException;
			"Pre-Create organisation"
			@OrganisationMetamac preCreateOrganisation(String organisationSchemeUrn, @OrganisationMetamac organisation) throws MetamacException;
			"Updates organisation"
			@OrganisationMetamac updateOrganisation(@OrganisationMetamac organisation) throws MetamacException;
    		"Retrieves organisation by urn"
    		@OrganisationMetamac retrieveOrganisationByUrn(String urn) throws MetamacException;
    		"Finds organisations by criteria"
    		PagedResult<@OrganisationMetamac> findOrganisationsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
    		"Retrieve organisation that must be maintainer of all created artefacts"
    		@OrganisationMetamac retrieveMaintainerDefault() throws MetamacException;
			"Deletes organisation"
    		deleteOrganisation(String urn) throws MetamacException;
    		"Retrieves organisations by organisation scheme, in tree structure"
    		List<@OrganisationMetamac> retrieveOrganisationsByOrganisationSchemeUrn(String organisationSchemeUrn) throws MetamacException;

    		"Finds contacts by criteria"
    		PagedResult<@Contact> findOrganisationContactsByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter)  throws MetamacException;
		}
		
		// ----------------------------------------------------------------
		// 							ENTITIES
		// ----------------------------------------------------------------
		Entity OrganisationSchemeVersionMetamac extends @OrganisationSchemeVersion {
			databaseTable="TB_M_ORG_SCHEMES_VERSIONS"
			hint="idSequence=M_ORG_SCHEMES_VERSIONS"
			
			"Life cycle information"
			- @SrmLifeCycleMetadata lifeCycleMetadata databaseColumn="";
			
			Repository OrganisationSchemeVersionMetamacRepository {
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				findByCondition(PagingParameter pagingParameter);
				@OrganisationSchemeVersionMetamac findByUrn(String urn);
				@OrganisationSchemeVersionMetamac retrieveOrganisationSchemeVersionByProcStatus(String urn, ArrayProcStatusEnum procStatus) throws MetamacException;
				@OrganisationSchemeVersionMetamac findByOrganisation(String urn);
			}			
		}
		
		Entity OrganisationMetamac extends @Organisation {
			databaseTable="TB_M_ORGANISATIONS"
			hint="idSequence=M_ORGANISATIONS"
			
			Repository OrganisationMetamacRepository {
				findByQuery;
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				@OrganisationMetamac findByUrn(String urn);
				findByCondition(PagingParameter pagingParameter);
			}
		}
	}
}