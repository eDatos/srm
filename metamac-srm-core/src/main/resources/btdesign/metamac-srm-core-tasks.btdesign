import "classpath:/btdesign/statistic-sdmx-core-tasks.btdesign"

Application TaskMetamac {
	basePackage=unused

	Module domain_task_metamac {
		basePackage=org.siemac.metamac.srm.core.task

		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------  
		Service TasksMetamacService {
			// IMPORTATION
			"Imports file in sdmx format"
			TaskInfo importSDMXStructure(InputStream inputMessage, String fileName, Set<String> resourcesUrnToImport) throws MetamacException;
			"Does a preview of sdmx importation, without persist"
    		List<Object> previewImportSDMXStructure(InputStream inputMessage) throws MetamacException;

			"Prepares importation of codes in tsv format"
    		String plannifyImportCodesTsvInBackground(String codelistUrn, java.io.File file, String fileName, boolean updateAlreadyExisting) throws MetamacException;
			"Prepares importation of concepts in tsv format"
    		String plannifyImportConceptsTsvInBackground(String conceptSchemeUrn, java.io.File file, String fileName, boolean updateAlreadyExisting) throws MetamacException;
			"Prepares importation of categories in tsv format"
    		String plannifyImportCategoriesTsvInBackground(String categorySchemeUrn, java.io.File file, String fileName, boolean updateAlreadyExisting) throws MetamacException;       		
			"Prepares importation of organisations in tsv format"
    		String plannifyImportOrganisationsTsvInBackground(String organisationSchemeUrn, java.io.File file, String fileName, boolean updateAlreadyExisting) throws MetamacException;
			"Prepares importation of code orders in tsv format"
    		String plannifyImportCodeOrdersTsvInBackground(String codelistUrn, java.io.File file, String fileName) throws MetamacException;
			"Prepares importation of variable elements in tsv format"
    		String plannifyImportVariableElementsTsvInBackground(String variableUrn, java.io.File file, String fileName, boolean updateAlreadyExisting) throws MetamacException;
			"Prepares importation of geographical information (shape) of variable elements"
    		String plannifyImportVariableElementsShapeInBackground(String variableUrn, URL shapeFileUrl) throws MetamacException;
			"Prepares importation of geographical information (points) of variable elements"
    		String plannifyImportVariableElementsPointsInBackground(String variableUrn, URL shapeFileUrl) throws MetamacException;
    		"Prepares a merge between codelists"
    		String plannifyPublicationInternallyCodelist(String urn, Boolean forceLatestFinal) throws MetamacException;

			// TASKS
    		"Retrieves task"
    		@Task retrieveTaskByJob(String job) throws MetamacException;
    		"Marks job as finished"
    		markTaskAsFinished(String job, List<MetamacExceptionItem> informationItems) throws MetamacException;
    		"Marks job as failed"
    		markTaskAsFailed(String job, java.lang.Exception exception) throws MetamacException;
    		"Find information about tasks"
			PagedResult<@Task> findTasksByCondition(List<ConditionalCriteria> conditions, PagingParameter pagingParameter) throws MetamacException;

			// MISC
			"Delete entities marked to delete"
    		deleteEntitiesMarkedToDelete() throws MetamacException;
		}
	}
}