<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="   http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context-3.0.xsd   http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   http://www.springframework.org/schema/jee   http://www.springframework.org/schema/jee/spring-jee-3.0.xsd   http://www.springframework.org/schema/tx   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!-- Flush Eager -->
    <bean id="jpaInterceptorFlushEagerCore" class="org.springframework.orm.jpa.JpaInterceptor">
        <property name="entityManagerFactory" ref="entityManagerFactoryCore" />
        <!-- Need to flush to detect OptimisticLockingException and do proper rollback. -->
        <property name="flushEager" value="true" />
    </bean>

    <!-- Flush interceptor -->
    <bean id="flushingHandlingAdvice" class="org.siemac.metamac.srm.core.common.aop.FlushingInterceptor" />

    <!-- Disable flush interceptor -->
    <bean id="disableFlushHandlingAdvice" class="org.siemac.metamac.srm.core.common.aop.DisableFlushInterceptor" />

    <tx:advice id="txAdviceCore" transaction-manager="txManagerCore">
        <tx:attributes>
            <!-- all methods starting with 'get' or 'find' are read-only -->
            <tx:method name="get*" read-only="true" />
            <tx:method name="find*" read-only="true" />
            <!-- all other methods are transactional and ApplicationException will cause rollback -->
            <tx:method name="*" read-only="false" rollback-for="org.siemac.metamac.core.common.exception.MetamacException,org.fornax.cartridges.sculptor.framework.errorhandling.ApplicationException" />
        </tx:attributes>
    </tx:advice>
    
    <tx:advice id="requiresNewTxAdvice" transaction-manager="txManagerCore">
		<tx:attributes>
	    	<tx:method name="import*" propagation="REQUIRES_NEW"/>
	    </tx:attributes>
	</tx:advice>

    <aop:config>
    
    	<!-- Pointcut for the advice of force flush -->
        <aop:pointcut id="updateServicePointCut"
                    expression="(execution(public * org.siemac.metamac.srm..serviceapi.*Service.*(..)) and not (execution(public * org.siemac.metamac.srm..serviceapi.*Service.retrieve*(..)) or execution(public * org.siemac.metamac.srm..serviceapi.*Service.find*(..)) or execution(public * org.siemac.metamac.srm..serviceapi.*Service.pre*(..)))) or
                                (execution(public * com.arte.statistic.sdmx.srm..serviceapi.*Service.*(..)) and not (execution(public * com.arte.statistic.sdmx.srm..serviceapi.*Service.retrieve*(..)) or execution(public * com.arte.statistic.sdmx.srm..serviceapi.*Service.find*(..))))" />
        
        <!-- Pointcut for transactional -->
        <aop:pointcut id="serviceFacadePointCut" expression="execution(public * org.siemac.metamac.srm..*Facade.*(..)) or execution(public * com.arte.statistic.sdmx.srm..*Facade.*(..))" />
        
        <!-- Pointcut for disable flushing -->
        <aop:pointcut id="disableFlushingPointCut" expression="execution(public * org.siemac.metamac.srm..mapper.*2DoMapper.*(..)) or
                                                               execution(public * com.arte.statistic.sdmx.srm..mapper.*2DoMapper.*(..)) or
                                                               execution(public * com.arte.statistic.sdmx.srm..*Repository.findIfExistAPreviousVersion(..)) or
                                                               execution(public * org.siemac.metamac.srm..*Repository.findByCodeWithoutFlushing(..)) or
                                                               execution(public * org.siemac.metamac.srm..CodeMetamacRepository.*order*(..)) or
                                                               execution(public * org.siemac.metamac.srm..CodeMetamacRepository.*Order*(..))
                                                               "/>
 
        <!-- Pointcut for the advice of jpa eager flush -->
        <aop:pointcut id="updatingServiceFacade"
            expression="(execution(public * org.siemac.metamac.srm..*Facade.*(..)) and not (execution(public * org.siemac.metamac.srm..*Facade.retrieve*(..)) or execution(public * org.siemac.metamac.srm..*Facade.find*(..)))) or
                        (execution(public * com.arte.statistic.sdmx.srm..service.*Facade.*(..)) and not (execution(public * com.arte.statistic.sdmx.srm..service.*Facade.retrieve*(..)) or execution(public * com.arte.statistic.sdmx.srm..service.*Facade.find*(..))))" />

		<!-- Pointcut for requires new transaction -->
        <aop:pointcut id="serviceImportPointCut" expression="execution(public * com.arte.statistic.sdmx.srm..serviceapi.*Service.import*(..)) and not execution(public * com.arte.statistic.sdmx.srm..serviceapi.TasksService.*(..))" />
        
        <aop:advisor pointcut-ref="serviceFacadePointCut" advice-ref="txAdviceCore" order="1" />
        <aop:advisor pointcut-ref="serviceFacadePointCut" advice-ref="serviceContextStoreAdvice" order="2" />
        <aop:advisor pointcut-ref="serviceFacadePointCut" advice-ref="errorHandlingAdvice" order="3" />
        <aop:advisor pointcut-ref="serviceFacadePointCut" advice-ref="hibernateErrorHandlingAdvice" order="4" />
        <aop:advisor pointcut-ref="updatingServiceFacade" advice-ref="jpaInterceptorFlushEagerCore" order="5" />
        <aop:advisor pointcut-ref="serviceImportPointCut" advice-ref="requiresNewTxAdvice" order="6" />

        <!-- Flushing interceptor -->
        <aop:aspect id="flushing" ref="flushingHandlingAdvice">
            <aop:after-returning pointcut-ref="updateServicePointCut" method="forceFlushToOptimisticLocking" />
        </aop:aspect>

        <!-- Flush mode interceptor -->
        <aop:aspect id="flushingMode" ref="disableFlushHandlingAdvice">
            <aop:around method="manageFlushMode" pointcut-ref="disableFlushingPointCut" />
        </aop:aspect>
    </aop:config>
</beans>