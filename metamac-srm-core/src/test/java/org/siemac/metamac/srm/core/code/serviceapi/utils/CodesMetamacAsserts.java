package org.siemac.metamac.srm.core.code.serviceapi.utils;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import org.apache.commons.lang.time.DateUtils;
import org.siemac.metamac.srm.core.base.utils.BaseAsserts;
import org.siemac.metamac.srm.core.code.domain.CodeMetamac;
import org.siemac.metamac.srm.core.code.domain.CodelistFamily;
import org.siemac.metamac.srm.core.code.domain.CodelistVersionMetamac;
import org.siemac.metamac.srm.core.code.domain.Variable;
import org.siemac.metamac.srm.core.code.domain.VariableFamily;
import org.siemac.metamac.srm.core.code.dto.CodeMetamacDto;
import org.siemac.metamac.srm.core.code.dto.CodelistFamilyDto;
import org.siemac.metamac.srm.core.code.dto.CodelistMetamacDto;

import com.arte.statistic.sdmx.srm.core.code.serviceapi.utils.CodesAsserts;
import com.arte.statistic.sdmx.v2_1.domain.dto.common.RelatedResourceDto;

public class CodesMetamacAsserts extends CodesAsserts {

    // ------------------------------------------------------------------------------------
    // CODELIST
    // ------------------------------------------------------------------------------------

    public static void assertEqualsCodelist(CodelistVersionMetamac expected, CodelistVersionMetamac actual) {
        BaseAsserts.assertEqualsLifeCycle(expected.getLifeCycleMetadata(), actual.getLifeCycleMetadata());
        assertEqualsCodelistWithoutLifeCycleMetadata(expected, actual);
    }

    public static void assertEqualsCodelistWithoutLifeCycleMetadata(CodelistVersionMetamac expected, CodelistVersionMetamac actual) {
        // Metamac
        assertEqualsInternationalString(expected.getShortName(), actual.getShortName());
        assertEquals(expected.getIsRecommended(), actual.getIsRecommended());
        assertEquals(expected.getAccessType(), actual.getAccessType());
        assertEqualsNullability(expected.getReplacedByCodelist(), actual.getReplacedByCodelist());
        if (expected.getReplacedByCodelist() != null) {
            assertEquals(expected.getReplacedByCodelist().getMaintainableArtefact().getUrn(), actual.getReplacedByCodelist().getMaintainableArtefact().getUrn());
        }
        // cannot check here due to flush restrictions in create method
        // assertEquals(expected.getReplaceToCodelists().size(), actual.getReplaceToCodelists().size());
        // for (int i = 0; i < expected.getReplaceToCodelists().size(); i++) {
        // assertEquals(expected.getReplaceToCodelists().get(i).getMaintainableArtefact().getUrn(), actual.getReplaceToCodelists().get(i).getMaintainableArtefact().getUrn());
        // }

        // Sdmx
        CodesAsserts.assertEqualsCodelist(expected, actual);
    }

    public static void assertEqualsCodelistMetamacDto(CodelistMetamacDto expected, CodelistMetamacDto actual) {
        // Metamac
        assertEqualsInternationalStringDto(expected.getShortName(), actual.getShortName());
        assertEquals(expected.getIsRecommended(), actual.getIsRecommended());
        assertEquals(expected.getAccessType(), actual.getAccessType());
        assertEqualsCodelistRelatedResourceDto(expected.getReplacedByCodelist(), actual.getReplacedByCodelist());
        assertEquals(expected.getReplaceToCodelists().size(), actual.getReplaceToCodelists().size());
        for (int i = 0; i < expected.getReplaceToCodelists().size(); i++) {
            assertEqualsCodelistRelatedResourceDto(expected.getReplaceToCodelists().get(i), actual.getReplaceToCodelists().get(i));
        }
        // SDMX
        CodesAsserts.assertEqualsCodelistDto(expected, actual);
    }
    public static void assertEqualsCodelist(CodelistVersionMetamac expected, CodelistMetamacDto actual) {
        assertEqualsCodelist(expected, actual, MapperEnum.DO2DTO);
    }

    public static void assertEqualsCodelist(CodelistMetamacDto expected, CodelistVersionMetamac actual) {
        assertEqualsCodelist(actual, expected, MapperEnum.DTO2DO);
    }

    public static void assertEqualsCodelistRelatedResourceDto(RelatedResourceDto expected, RelatedResourceDto actual) {
        assertEqualsNullability(expected, actual);
        if (expected == null) {
            return;
        }
        assertEquals(expected.getCode(), actual.getCode());
        assertEquals(expected.getUrn(), actual.getUrn());
        assertEquals(expected.getUrnProvider(), actual.getUrnProvider());
        assertEquals(expected.getType(), actual.getType());
    }

    private static void assertEqualsCodelist(CodelistVersionMetamac entity, CodelistMetamacDto dto, MapperEnum mapperEnum) {
        // Metamac
        if (MapperEnum.DO2DTO.equals(mapperEnum)) {
            // generated by service
            BaseAsserts.assertEqualsLifeCycle(entity.getLifeCycleMetadata(), dto.getLifeCycle());
        }
        assertEqualsInternationalString(entity.getShortName(), dto.getShortName());
        assertEquals(entity.getIsRecommended(), dto.getIsRecommended());
        assertEquals(entity.getAccessType(), dto.getAccessType());
        assertEqualsNullability(entity.getReplacedByCodelist(), dto.getReplacedByCodelist());
        if (entity.getReplacedByCodelist() != null) {
            assertEquals(entity.getReplacedByCodelist().getMaintainableArtefact().getUrn(), dto.getReplacedByCodelist().getUrn());
        }
        assertEquals(entity.getReplaceToCodelists().size(), dto.getReplaceToCodelists().size());
        for (int i = 0; i < entity.getReplaceToCodelists().size(); i++) {
            assertEquals(entity.getReplaceToCodelists().get(i).getMaintainableArtefact().getUrn(), dto.getReplaceToCodelists().get(i).getUrn());
        }
        assertEqualsCodelistFamilyRelatedResource(entity.getFamily(), dto.getFamily(), mapperEnum);
        // TODO variable

        // SDMX
        CodesAsserts.assertEqualsCodelist(entity, dto, mapperEnum);
    }
    // ------------------------------------------------------------------------------------
    // CODE
    // ------------------------------------------------------------------------------------

    public static void assertEqualsCode(CodeMetamac expected, CodeMetamac actual) {
        // Metamac

        // SDMX
        CodesAsserts.assertEqualsCode(expected, actual);
    }

    public static void assertEqualsCodeDto(CodeMetamacDto expected, CodeMetamacDto actual) {
        // Metamac

        // SDMX
        CodesAsserts.assertEqualsCodeDto(expected, actual);
    }

    public static void assertEqualsCode(CodeMetamac expected, CodeMetamacDto actual) {
        assertEqualsCode(expected, actual, MapperEnum.DO2DTO);
    }

    public static void assertEqualsCode(CodeMetamacDto expected, CodeMetamac actual) {
        assertEqualsCode(actual, expected, MapperEnum.DTO2DO);
    }

    private static void assertEqualsCode(CodeMetamac entity, CodeMetamacDto dto, MapperEnum mapperEnum) {
        // Metamac
        // TODO elemento variable

        // SDMX
        CodesAsserts.assertEqualsCode(entity, dto, mapperEnum);
    }

    // ------------------------------------------------------------------------------------
    // CODELIST FAMILIES
    // ------------------------------------------------------------------------------------

    public static void assertEqualsCodelistFamily(CodelistFamily expected, CodelistFamily actual) {
        // other artefacts
        assertEqualsNameableArtefact(expected.getNameableArtefact(), actual.getNameableArtefact());
    }

    public static void assertEqualsCodelistFamilyDto(CodelistFamilyDto expected, CodelistFamilyDto actual) {
        CodesAsserts.assertEqualsNameableArtefactDto(expected, actual);
    }

    public static void assertEqualsCodelistFamily(CodelistFamily expected, CodelistFamilyDto actual) {
        assertEqualsCodelistFamily(expected, actual, MapperEnum.DO2DTO);
    }

    public static void assertEqualsCodelistFamily(CodelistFamilyDto actual, CodelistFamily expected) {
        assertEqualsCodelistFamily(expected, actual, MapperEnum.DTO2DO);
    }

    private static void assertEqualsCodelistFamily(CodelistFamily entity, CodelistFamilyDto dto, MapperEnum mapperEnum) {
        if (MapperEnum.DO2DTO.equals(mapperEnum)) {
            assertEquals(entity.getId(), dto.getId());

            assertNotNull(entity.getUuid());
            assertEquals(entity.getUuid(), dto.getUuid());

            assertNotNull(entity.getCreatedBy());
            assertEquals(entity.getCreatedBy(), dto.getCreatedBy());

            assertNotNull(entity.getCreatedDate());
            assertTrue(DateUtils.isSameInstant(entity.getCreatedDate().toDate(), dto.getCreatedDate()));

            assertNotNull(entity.getLastUpdatedBy());
            assertEquals(entity.getLastUpdatedBy(), dto.getLastUpdatedBy());

            assertNotNull(entity.getLastUpdated());
            assertTrue(DateUtils.isSameInstant(entity.getLastUpdated().toDate(), dto.getLastUpdated()));

            assertNotNull(entity.getVersion());
            assertEquals(entity.getVersion(), dto.getVersion());
            assertEquals(entity.getVersion(), dto.getVersionOptimisticLocking());
        }

        // other artefacts
        assertEqualsNameableArtefact(entity.getNameableArtefact(), dto, mapperEnum);
    }

    private static void assertEqualsCodelistFamilyRelatedResource(CodelistFamily entity, RelatedResourceDto dto, MapperEnum mapperEnum) {
        assertEqualsNullability(entity, dto);
        if (entity == null) {
            return;
        }
        assertEquals(entity.getNameableArtefact().getCode(), dto.getCode());
        assertEquals(entity.getNameableArtefact().getUrn(), dto.getUrn());
        assertEquals(entity.getNameableArtefact().getUrnProvider(), dto.getUrnProvider());
    }

    // ------------------------------------------------------------------------------------
    // VARIABLE FAMILIES
    // ------------------------------------------------------------------------------------

    public static void assertEqualsVariableFamily(VariableFamily expected, VariableFamily actual) {
        // other artefacts
        assertEqualsNameableArtefact(expected.getNameableArtefact(), actual.getNameableArtefact());
    }

    // ------------------------------------------------------------------------------------
    // VARIABLES
    // ------------------------------------------------------------------------------------

    public static void assertEqualsVariable(Variable expected, Variable actual) {
        assertEqualsNullability(expected, actual);
        if (expected == null) {
            return;
        }
        assertEqualsInternationalString(expected.getShortName(), actual.getShortName());
        assertEqualsDate(expected.getValidFrom(), actual.getValidFrom());
        assertEqualsDate(expected.getValidTo(), actual.getValidTo());

        // other artefacts
        assertEqualsNameableArtefact(expected.getNameableArtefact(), actual.getNameableArtefact());
    }

    public static void assertEqualsVariable(RelatedResourceDto expected, RelatedResourceDto actual) {
        assertEqualsNullability(expected, actual);
        if (expected == null) {
            return;
        }
        assertEquals(expected.getUrn(), actual.getUrn());
    }

    public static void assertEqualsVariable(Variable entity, RelatedResourceDto dto, MapperEnum mapperEnum) {
        assertEqualsNullability(entity, dto);
        if (entity == null) {
            return;
        }
        assertEquals(entity.getNameableArtefact().getUrn(), dto.getUrn());
    }
}
