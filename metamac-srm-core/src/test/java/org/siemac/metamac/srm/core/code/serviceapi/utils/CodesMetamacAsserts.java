package org.siemac.metamac.srm.core.code.serviceapi.utils;

import static org.junit.Assert.assertEquals;

import org.siemac.metamac.srm.core.base.utils.BaseAsserts;
import org.siemac.metamac.srm.core.code.domain.CodeMetamac;
import org.siemac.metamac.srm.core.code.domain.CodelistFamily;
import org.siemac.metamac.srm.core.code.domain.CodelistVersionMetamac;
import org.siemac.metamac.srm.core.code.domain.Variable;
import org.siemac.metamac.srm.core.code.domain.VariableFamily;
import org.siemac.metamac.srm.core.code.dto.CodeMetamacDto;
import org.siemac.metamac.srm.core.code.dto.CodelistMetamacDto;

import com.arte.statistic.sdmx.srm.core.code.serviceapi.utils.CodesAsserts;

public class CodesMetamacAsserts extends CodesAsserts {

    // ------------------------------------------------------------------------------------
    // CODELIST
    // ------------------------------------------------------------------------------------

    public static void assertEqualsCodelist(CodelistVersionMetamac expected, CodelistVersionMetamac actual) {
        BaseAsserts.assertEqualsLifeCycle(expected.getLifeCycleMetadata(), actual.getLifeCycleMetadata());
        assertEqualsCodelistWithoutLifeCycleMetadata(expected, actual);
    }

    public static void assertEqualsCodelistWithoutLifeCycleMetadata(CodelistVersionMetamac expected, CodelistVersionMetamac actual) {
        // Metamac
        assertEqualsInternationalString(expected.getShortName(), actual.getShortName());
        assertEquals(expected.getIsRecommended(), actual.getIsRecommended());
        assertEquals(expected.getAccessType(), actual.getAccessType());
        assertEqualsNullability(expected.getReplacedByCodelist(), actual.getReplacedByCodelist());
        if (expected.getReplacedByCodelist() != null) {
            assertEquals(expected.getReplacedByCodelist().getMaintainableArtefact().getUrn(), actual.getReplacedByCodelist().getMaintainableArtefact().getUrn());
        }
        // cannot check here due to flush restrictions in create method
        // assertEquals(expected.getReplaceToCodelists().size(), actual.getReplaceToCodelists().size());
        // for (int i = 0; i < expected.getReplaceToCodelists().size(); i++) {
        // assertEquals(expected.getReplaceToCodelists().get(i).getMaintainableArtefact().getUrn(), actual.getReplaceToCodelists().get(i).getMaintainableArtefact().getUrn());
        // }

        // Sdmx
        CodesAsserts.assertEqualsCodelist(expected, actual);
    }

    public static void assertEqualsCodelistMetamacDto(CodelistMetamacDto expected, CodelistMetamacDto actual) {
        // Metamac
        assertEqualsInternationalStringDto(expected.getShortName(), actual.getShortName());
        assertEquals(expected.getIsRecommended(), actual.getIsRecommended());
        assertEquals(expected.getAccessType(), actual.getAccessType());
        assertEquals(expected.getReplacedByCodelistUrn(), actual.getReplacedByCodelistUrn());
        assertEquals(expected.getReplaceToCodelistsUrn().size(), actual.getReplaceToCodelistsUrn().size());
        for (int i = 0; i < expected.getReplaceToCodelistsUrn().size(); i++) {
            assertEquals(expected.getReplaceToCodelistsUrn().get(i), actual.getReplaceToCodelistsUrn().get(i));
        }
        // SDMX
        CodesAsserts.assertEqualsCodelistDto(expected, actual);
    }

    public static void assertEqualsCodelist(CodelistVersionMetamac expected, CodelistMetamacDto actual) {
        assertEqualsCodelist(expected, actual, MapperEnum.DO2DTO);
    }

    public static void assertEqualsCodelist(CodelistMetamacDto expected, CodelistVersionMetamac actual) {
        assertEqualsCodelist(actual, expected, MapperEnum.DTO2DO);
    }

    private static void assertEqualsCodelist(CodelistVersionMetamac entity, CodelistMetamacDto dto, MapperEnum mapperEnum) {
        // Metamac
        if (MapperEnum.DO2DTO.equals(mapperEnum)) {
            // generated by service
            BaseAsserts.assertEqualsLifeCycle(entity.getLifeCycleMetadata(), dto.getLifeCycle());
        }
        assertEqualsInternationalString(entity.getShortName(), dto.getShortName());
        assertEquals(entity.getIsRecommended(), dto.getIsRecommended());
        assertEquals(entity.getAccessType(), dto.getAccessType());
        assertEqualsNullability(entity.getReplacedByCodelist(), dto.getReplacedByCodelistUrn());
        if (entity.getReplacedByCodelist() != null) {
            assertEquals(entity.getReplacedByCodelist().getMaintainableArtefact().getUrn(), dto.getReplacedByCodelistUrn());
        }
        assertEquals(entity.getReplaceToCodelists().size(), dto.getReplaceToCodelistsUrn().size());
        for (int i = 0; i < entity.getReplaceToCodelists().size(); i++) {
            assertEquals(entity.getReplaceToCodelists().get(i).getMaintainableArtefact().getUrn(), dto.getReplaceToCodelistsUrn().get(i));
        }

        // SDMX
        CodesAsserts.assertEqualsCodelist(entity, dto, mapperEnum);
    }

    // ------------------------------------------------------------------------------------
    // CODE
    // ------------------------------------------------------------------------------------

    public static void assertEqualsCode(CodeMetamac expected, CodeMetamac actual) {
        // Metamac

        // SDMX
        CodesAsserts.assertEqualsCode(expected, actual);
    }

    public static void assertEqualsCodeDto(CodeMetamacDto expected, CodeMetamacDto actual) {
        // Metamac

        // SDMX
        CodesAsserts.assertEqualsCodeDto(expected, actual);
    }

    public static void assertEqualsCode(CodeMetamac expected, CodeMetamacDto actual) {
        assertEqualsCode(expected, actual, MapperEnum.DO2DTO);
    }

    public static void assertEqualsCode(CodeMetamacDto expected, CodeMetamac actual) {
        assertEqualsCode(actual, expected, MapperEnum.DTO2DO);
    }

    private static void assertEqualsCode(CodeMetamac entity, CodeMetamacDto dto, MapperEnum mapperEnum) {
        // Metamac

        // SDMX
        CodesAsserts.assertEqualsCode(entity, dto, mapperEnum);
    }

    // ------------------------------------------------------------------------------------
    // CODELIST FAMILIES
    // ------------------------------------------------------------------------------------

    public static void assertEqualsCodelistFamily(CodelistFamily expected, CodelistFamily actual) {
        assertEquals(expected.getIdentifier(), actual.getIdentifier());
        assertEqualsInternationalString(expected.getName(), actual.getName());
    }

    // ------------------------------------------------------------------------------------
    // VARIABLE FAMILIES
    // ------------------------------------------------------------------------------------

    public static void assertEqualsVariableFamily(VariableFamily expected, VariableFamily actual) {
        assertEquals(expected.getIdentifier(), actual.getIdentifier());
        assertEqualsInternationalString(expected.getName(), actual.getName());
    }

    // ------------------------------------------------------------------------------------
    // VARIABLES
    // ------------------------------------------------------------------------------------

    public static void assertEqualsVariable(Variable expected, Variable actual) {
        assertEquals(expected.getIdentifier(), actual.getIdentifier());
        assertEqualsInternationalString(expected.getName(), actual.getName());
        assertEqualsInternationalString(expected.getShortName(), actual.getShortName());
        assertEqualsDate(expected.getValidFrom(), actual.getValidFrom());
        assertEqualsDate(expected.getValidTo(), actual.getValidTo());
    }

}
