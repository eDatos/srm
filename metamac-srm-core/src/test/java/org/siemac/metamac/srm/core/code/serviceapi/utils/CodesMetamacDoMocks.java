package org.siemac.metamac.srm.core.code.serviceapi.utils;

import org.joda.time.DateTime;
import org.siemac.metamac.common.test.utils.MetamacMocks;
import org.siemac.metamac.srm.core.base.utils.BaseDoMocks;
import org.siemac.metamac.srm.core.code.domain.CodeMetamac;
import org.siemac.metamac.srm.core.code.domain.CodelistFamily;
import org.siemac.metamac.srm.core.code.domain.CodelistVersionMetamac;
import org.siemac.metamac.srm.core.code.domain.Variable;
import org.siemac.metamac.srm.core.code.domain.VariableFamily;
import org.siemac.metamac.srm.core.code.enume.domain.AccessTypeEnum;
import org.siemac.metamac.srm.core.organisation.domain.OrganisationMetamac;

import com.arte.statistic.sdmx.srm.core.code.serviceapi.utils.CodesDoMocks;

public class CodesMetamacDoMocks extends CodesDoMocks {

    // ------------------------------------------------------------------------------------
    // CODELISTS
    // ------------------------------------------------------------------------------------

    public static CodelistVersionMetamac mockCodelist(OrganisationMetamac maintainer) {
        CodelistVersionMetamac codelistVersion = new CodelistVersionMetamac();

        codelistVersion.setShortName(mockInternationalString());
        codelistVersion.setIsRecommended(Boolean.FALSE);
        codelistVersion.setAccessType(AccessTypeEnum.RESTRICTED);

        mockCodelist(codelistVersion, maintainer);
        return codelistVersion;
    }

    public static void fillCodelistAutogeneratedMetadata(CodelistVersionMetamac entity) {
        entity.setLifeCycleMetadata(BaseDoMocks.mockLifeCycle());
        CodesDoMocks.fillCodelistAutogeneratedMetadata(entity);
    }

    // ------------------------------------------------------------------------------------
    // CODES
    // ------------------------------------------------------------------------------------

    public static CodeMetamac mockCode() {
        CodeMetamac codeMetamac = new CodeMetamac();
        mockCode(codeMetamac);
        return codeMetamac;
    }

    public static void fillCodeAutogeneratedMetadata(CodeMetamac entity) {
        CodesDoMocks.fillCodeAutogeneratedMetadata(entity);
    }

    // ------------------------------------------------------------------------------------
    // CODELIST FAMILIES
    // ------------------------------------------------------------------------------------

    public static CodelistFamily mockCodelistFamily() {
        CodelistFamily codelistFamily = new CodelistFamily();
        codelistFamily.setNameableArtefact(mockNameableArtefact("code-" + MetamacMocks.mockString(5)));
        return codelistFamily;
    }

    public static void fillCodelistFamilyAutogeneratedMetadata(CodelistFamily entity) {
        entity.getUuid(); // generate uuid

        entity.setCreatedBy("user" + MetamacMocks.mockString(10));
        entity.setCreatedDate(new DateTime(2012, 10, 1, 10, 12, 13, 14));
        entity.setLastUpdatedBy("user" + MetamacMocks.mockString(10));
        entity.setLastUpdated(new DateTime(2012, 11, 5, 10, 12, 13, 14));
        entity.setVersion(Long.valueOf(3));

        // other artefacts
        fillNameableArtefactAutogeneratedMetadata(entity.getNameableArtefact());
    }

    // ------------------------------------------------------------------------------------
    // VARIABLE FAMILIES
    // ------------------------------------------------------------------------------------

    public static VariableFamily mockVariableFamily() {
        VariableFamily variableFamily = new VariableFamily();
        variableFamily.setNameableArtefact(mockNameableArtefact("code-" + MetamacMocks.mockString(5)));
        return variableFamily;
    }
    // ------------------------------------------------------------------------------------
    // VARIABLES
    // ------------------------------------------------------------------------------------

    public static Variable mockVariable() {
        Variable variable = new Variable();
        variable.setNameableArtefact(mockNameableArtefact("code-" + MetamacMocks.mockString(5)));
        variable.setShortName(BaseDoMocks.mockInternationalString());
        variable.setValidFrom(new DateTime());
        variable.setValidTo(new DateTime());
        return variable;
    }
}
