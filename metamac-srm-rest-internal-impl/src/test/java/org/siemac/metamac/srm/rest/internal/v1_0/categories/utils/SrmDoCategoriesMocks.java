package org.siemac.metamac.srm.rest.internal.v1_0.categories.utils;

import org.siemac.metamac.srm.core.category.domain.CategoryMetamac;
import org.siemac.metamac.srm.core.category.domain.CategorySchemeVersionMetamac;
import org.siemac.metamac.srm.core.category.serviceapi.utils.CategoriesMetamacDoMocks;
import org.siemac.metamac.srm.rest.internal.v1_0.utils.SrmDoMocks;

import com.arte.statistic.sdmx.srm.core.base.domain.ItemSchemeVersion;

public class SrmDoCategoriesMocks extends SrmDoMocks {

    public static CategorySchemeVersionMetamac mockCategoryScheme(String agencyID, String resourceID, String version) {
        CategorySchemeVersionMetamac target = CategoriesMetamacDoMocks.mockCategoryScheme(mockMaintainer(agencyID));
        CategoriesMetamacDoMocks.fillCategorySchemeAutogeneratedMetadata(target);
        fillMaintainableArtefactWithInmutableValues(agencyID, resourceID, version, target.getMaintainableArtefact());
        return target;
    }

    public static CategorySchemeVersionMetamac mockCategorySchemeWithCategories(String agencyID, String resourceID, String version) {

        CategorySchemeVersionMetamac categorySchemeVersion = mockCategoryScheme(agencyID, resourceID, version);

        // categorys
        CategoryMetamac category1 = mockCategory("category1", categorySchemeVersion, null);
        CategoryMetamac category2 = mockCategory("category2", categorySchemeVersion, null);
        CategoryMetamac category2A = mockCategory("category2A", categorySchemeVersion, category2);
        CategoryMetamac category2B = mockCategory("category2B", categorySchemeVersion, category2);

        // categorys hierarchy
        categorySchemeVersion.addItem(category1);
        categorySchemeVersion.addItemsFirstLevel(category1);
        categorySchemeVersion.addItem(category2);
        categorySchemeVersion.addItemsFirstLevel(category2);
        categorySchemeVersion.addItem(category2A);
        categorySchemeVersion.addItem(category2B);
        category2.addChildren(category2A);
        category2.addChildren(category2B);

        return categorySchemeVersion;
    }

    public static CategoryMetamac mockCategory(String resourceID, ItemSchemeVersion itemSchemeVersion, CategoryMetamac parent) {

        CategoryMetamac category = CategoriesMetamacDoMocks.mockCategory();
        CategoriesMetamacDoMocks.fillCategoryAutogeneratedMetadata(category);

        // relations
        category.setParent(parent);
        category.setItemSchemeVersion(itemSchemeVersion);

        // metadata
        fillNameableArtefactWithInmutableValues(resourceID, category.getNameableArtefact()); // immutable values to test xml streams
        return category;
    }
}