package org.siemac.metamac.srm.rest.internal.v1_0.code.utils;

import org.siemac.metamac.srm.core.code.domain.CodeMetamac;
import org.siemac.metamac.srm.core.code.domain.CodelistVersionMetamac;
import org.siemac.metamac.srm.core.code.serviceapi.utils.CodesMetamacDoMocks;
import org.siemac.metamac.srm.rest.internal.v1_0.utils.DoMocks;

import com.arte.statistic.sdmx.srm.core.base.domain.ItemSchemeVersion;

public class CodesDoMocks extends DoMocks {

    public static CodelistVersionMetamac mockCodelist(String agencyID, String resourceID, String version) {
        CodelistVersionMetamac target = CodesMetamacDoMocks.mockCodelist(mockMaintainer(agencyID));
        CodesMetamacDoMocks.fillCodelistAutogeneratedMetadata(target);
        fillMaintainableArtefactWithInmutableValues(agencyID, resourceID, version, target.getMaintainableArtefact());
        return target;
    }

    public static CodelistVersionMetamac mockCodelistWithCodes(String agencyID, String resourceID, String version) {

        CodelistVersionMetamac codelistVersion = mockCodelist(agencyID, resourceID, version);

        // codes
        CodeMetamac code1 = mockCode("code1", codelistVersion, null);
        CodeMetamac code2 = mockCode("code2", codelistVersion, null);
        CodeMetamac code2A = mockCode("code2A", codelistVersion, code2);
        CodeMetamac code2B = mockCode("code2B", codelistVersion, code2);

        // codes hierarchy
        codelistVersion.addItem(code1);
        codelistVersion.addItemsFirstLevel(code1);
        codelistVersion.addItem(code2);
        codelistVersion.addItemsFirstLevel(code2);
        codelistVersion.addItem(code2A);
        codelistVersion.addItem(code2B);
        code2.addChildren(code2A);
        code2.addChildren(code2B);

        return codelistVersion;
    }

    public static CodeMetamac mockCode(String resourceID, ItemSchemeVersion itemSchemeVersion, CodeMetamac parent) {

        CodeMetamac code = CodesMetamacDoMocks.mockCode();
        CodesMetamacDoMocks.fillCodeAutogeneratedMetadata(code);

        // relations
        code.setParent(parent);
        code.setItemSchemeVersion(itemSchemeVersion);

        // metadata
        fillNameableArtefactWithInmutableValues(resourceID, code.getNameableArtefact()); // immutable values to test xml streams

        return code;
    }
}