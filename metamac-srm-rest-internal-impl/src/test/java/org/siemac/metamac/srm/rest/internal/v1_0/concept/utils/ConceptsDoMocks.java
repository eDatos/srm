package org.siemac.metamac.srm.rest.internal.v1_0.concept.utils;

import java.util.ArrayList;
import java.util.List;

import org.siemac.metamac.srm.core.concept.domain.ConceptMetamac;
import org.siemac.metamac.srm.core.concept.domain.ConceptSchemeVersionMetamac;
import org.siemac.metamac.srm.core.concept.domain.ConceptType;
import org.siemac.metamac.srm.core.concept.serviceapi.utils.ConceptsMetamacDoMocks;
import org.siemac.metamac.srm.rest.internal.v1_0.utils.DoMocks;

import com.arte.statistic.sdmx.srm.core.base.domain.ItemSchemeVersion;

public class ConceptsDoMocks extends DoMocks {

    public static ConceptSchemeVersionMetamac mockConceptScheme(String agencyID, String resourceID, String version) {
        ConceptSchemeVersionMetamac target = ConceptsMetamacDoMocks.mockConceptScheme(mockMaintainer(agencyID));
        ConceptsMetamacDoMocks.fillConceptSchemeAutogeneratedMetadata(target);
        fillMaintainableArtefactWithInmutableValues(agencyID, resourceID, version, target.getMaintainableArtefact());
        return target;
    }

    public static ConceptSchemeVersionMetamac mockConceptSchemeWithConcepts(String agencyID, String resourceID, String version) {

        ConceptSchemeVersionMetamac conceptSchemeVersion = mockConceptScheme(agencyID, resourceID, version);

        // concepts
        ConceptMetamac concept1 = mockConcept("concept1", conceptSchemeVersion, null);
        ConceptMetamac concept2 = mockConcept("concept2", conceptSchemeVersion, null);
        ConceptMetamac concept2A = mockConcept("concept2A", conceptSchemeVersion, concept2);
        ConceptMetamac concept2B = mockConcept("concept2B", conceptSchemeVersion, concept2);

        // concepts hierarchy
        conceptSchemeVersion.addItem(concept1);
        conceptSchemeVersion.addItemsFirstLevel(concept1);
        conceptSchemeVersion.addItem(concept2);
        conceptSchemeVersion.addItemsFirstLevel(concept2);
        conceptSchemeVersion.addItem(concept2A);
        conceptSchemeVersion.addItem(concept2B);
        concept2.addChildren(concept2A);
        concept2.addChildren(concept2B);

        // concept relations
        concept1.setConceptExtends(mockConcept("1_conceptExtends1", null, null));
        concept1.addRoleConcept(mockConcept("1_conceptRole1", null, null));
        concept1.addRoleConcept(mockConcept("1_conceptRole2", null, null));

        concept2A.setConceptExtends(mockConcept("2A_conceptExtends1", null, null));
        concept2A.addRoleConcept(mockConcept("2A_conceptRole1", null, null));
        concept2A.addRoleConcept(mockConcept("2A_conceptRole2", null, null));
        concept2A.addRoleConcept(mockConcept("2A_conceptRole3", null, null));

        concept1.addRelatedConcept(concept2);
        concept2.addRelatedConcept(concept1);

        concept1.addRelatedConcept(concept2B);
        concept2B.addRelatedConcept(concept1);

        concept2A.addRelatedConcept(concept2B);
        concept2B.addRelatedConcept(concept2A);

        return conceptSchemeVersion;
    }

    public static ConceptMetamac mockConcept(String resourceID, ItemSchemeVersion itemSchemeVersion, ConceptMetamac parent) {

        ConceptMetamac concept = ConceptsMetamacDoMocks.mockConcept(mockConceptType("conceptType1"));
        ConceptsMetamacDoMocks.fillConceptAutogeneratedMetadata(concept);

        // relations
        concept.setParent(parent);
        concept.setItemSchemeVersion(itemSchemeVersion);

        // metadata
        fillNameableArtefactWithInmutableValues(resourceID, concept.getNameableArtefact()); // immutable values to test xml streams
        concept.setPluralName(mockInternationalString("pluralName", resourceID));
        concept.setAcronym(mockInternationalString("acronym", resourceID));
        concept.setDescriptionSource(mockInternationalString("descriptionSource", resourceID));
        concept.setContext(mockInternationalString("context", resourceID));
        concept.setDocMethod(mockInternationalString("docMethod", resourceID));
        concept.setDerivation(mockInternationalString("derivation", resourceID));
        concept.setLegalActs(mockInternationalString("legalActs", resourceID));

        return concept;
    }

    public static ConceptMetamac mockConceptWithConceptRelations(String resourceID, ItemSchemeVersion itemSchemeVersion, ConceptMetamac parent) {

        ConceptMetamac concept = mockConcept(resourceID, itemSchemeVersion, parent);

        // relations
        concept.setConceptExtends(mockConcept("1_conceptExtends1", null, null));
        concept.addRoleConcept(mockConcept("1_conceptRole1", null, null));
        concept.addRoleConcept(mockConcept("1_conceptRole2", null, null));
        concept.addRelatedConcept(mockConcept("1_conceptRelated1", null, null));
        concept.addRelatedConcept(mockConcept("1_conceptRelated2", null, null));
        concept.addRelatedConcept(mockConcept("1_conceptRelated3", null, null));

        return concept;
    }

    public static List<ConceptType> mockConceptTypes() {
        List<ConceptType> conceptTypes = new ArrayList<ConceptType>();
        conceptTypes.add(mockConceptType("conceptType1"));
        conceptTypes.add(mockConceptType("conceptType2"));
        conceptTypes.add(mockConceptType("conceptType3"));
        return conceptTypes;
    }

    private static ConceptType mockConceptType(String identifier) {
        ConceptType conceptType = new ConceptType();
        conceptType.setIdentifier(identifier);
        conceptType.setDescription(mockInternationalString("description", identifier));
        return conceptType;
    }
}