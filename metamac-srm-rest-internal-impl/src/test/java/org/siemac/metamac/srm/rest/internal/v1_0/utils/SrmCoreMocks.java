package org.siemac.metamac.srm.rest.internal.v1_0.utils;

import org.siemac.metamac.srm.core.concept.domain.ConceptMetamac;
import org.siemac.metamac.srm.core.concept.domain.ConceptSchemeVersionMetamac;
import org.siemac.metamac.srm.core.concept.domain.ConceptType;
import org.siemac.metamac.srm.core.concept.serviceapi.utils.ConceptsMetamacDoMocks;
import org.siemac.metamac.srm.core.organisation.domain.OrganisationMetamac;
import org.siemac.metamac.srm.core.organisation.serviceapi.utils.OrganisationsMetamacDoMocks;

import com.arte.statistic.sdmx.v2_1.domain.enume.organisation.domain.OrganisationTypeEnum;

public class SrmCoreMocks {

    public static ConceptSchemeVersionMetamac mockConceptScheme(String agencyID, String resourceID, String version) {
        
        // maintainer
        OrganisationMetamac organisation = OrganisationsMetamacDoMocks.mockOrganisation(OrganisationTypeEnum.AGENCY);
        organisation.getNameableArtefact().setCode(agencyID);
        OrganisationsMetamacDoMocks.fillOrganisationAutogeneratedMetadata(organisation);
        
        // concept scheme
        ConceptSchemeVersionMetamac conceptSchemeVersion = ConceptsMetamacDoMocks.mockConceptScheme(organisation);
        ConceptsMetamacDoMocks.fillConceptSchemeAutogeneratedMetadata(conceptSchemeVersion);
        conceptSchemeVersion.getMaintainableArtefact().setCode(resourceID);
        conceptSchemeVersion.getMaintainableArtefact().setVersionLogic(version);
        conceptSchemeVersion.getMaintainableArtefact().setUrn("urn:" + resourceID + ":" + version);
        
        // concepts
        ConceptMetamac concept1 = mockConcept("concept1", null);
        ConceptMetamac concept2 = mockConcept("concept2", null);
        ConceptMetamac concept2A = mockConcept("concept2A", concept2);
        ConceptMetamac concept2B = mockConcept("concept2B", concept2);
        conceptSchemeVersion.addItem(concept1);
        conceptSchemeVersion.addItemsFirstLevel(concept1);
        conceptSchemeVersion.addItem(concept2);
        conceptSchemeVersion.addItemsFirstLevel(concept2);
        conceptSchemeVersion.addItem(concept2A);
        conceptSchemeVersion.addItem(concept2B);
        concept2.addChildren(concept2A);
        concept2.addChildren(concept2B);
        
        // concept extends
        ConceptMetamac concept1AnotherScheme = mockConcept("concept1", null);
        concept2A.setConceptExtends(concept1AnotherScheme);
        
        return conceptSchemeVersion;
    }
    
    private static ConceptMetamac mockConcept(String resourceID, ConceptMetamac parent) {
        ConceptType conceptType = new ConceptType();
        conceptType.setIdentifier("conceptType");
        
        ConceptMetamac conceptMetamac = ConceptsMetamacDoMocks.mockConcept(conceptType);
        ConceptsMetamacDoMocks.fillConceptAutogeneratedMetadata(conceptMetamac);
        conceptMetamac.getNameableArtefact().setCode(resourceID);
        conceptMetamac.setParent(parent);
        return conceptMetamac;
    }
}