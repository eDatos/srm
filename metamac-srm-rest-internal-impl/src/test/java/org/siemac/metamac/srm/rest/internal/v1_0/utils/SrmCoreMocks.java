package org.siemac.metamac.srm.rest.internal.v1_0.utils;

import org.siemac.metamac.core.common.ent.domain.InternationalString;
import org.siemac.metamac.core.common.ent.domain.LocalisedString;
import org.siemac.metamac.srm.core.concept.domain.ConceptMetamac;
import org.siemac.metamac.srm.core.concept.domain.ConceptSchemeVersionMetamac;
import org.siemac.metamac.srm.core.concept.domain.ConceptType;
import org.siemac.metamac.srm.core.concept.serviceapi.utils.ConceptsMetamacDoMocks;
import org.siemac.metamac.srm.core.organisation.domain.OrganisationMetamac;
import org.siemac.metamac.srm.core.organisation.serviceapi.utils.OrganisationsMetamacDoMocks;

import com.arte.statistic.sdmx.v2_1.domain.enume.organisation.domain.OrganisationTypeEnum;

public class SrmCoreMocks {

    public static ConceptSchemeVersionMetamac mockConceptScheme(String agencyID, String resourceID, String version) {

        // maintainer
        OrganisationMetamac organisation = OrganisationsMetamacDoMocks.mockOrganisation(OrganisationTypeEnum.AGENCY);
        organisation.getNameableArtefact().setCode(agencyID);
        OrganisationsMetamacDoMocks.fillOrganisationAutogeneratedMetadata(organisation);

        // concept scheme
        ConceptSchemeVersionMetamac conceptSchemeVersion = ConceptsMetamacDoMocks.mockConceptScheme(organisation);
        ConceptsMetamacDoMocks.fillConceptSchemeAutogeneratedMetadata(conceptSchemeVersion);

        // immutable values to test xml streams
        conceptSchemeVersion.getMaintainableArtefact().setCode(resourceID);
        conceptSchemeVersion.getMaintainableArtefact().setName(mockInternationalString("name", resourceID + "v" + version));
        conceptSchemeVersion.getMaintainableArtefact().setDescription(mockInternationalString("description", resourceID + "v" + version));
        conceptSchemeVersion.getMaintainableArtefact().setVersionLogic(version);
        conceptSchemeVersion.getMaintainableArtefact().setUrn("urn:" + resourceID + ":" + version);

        // concepts
        ConceptMetamac concept1 = mockConcept("concept1", null);
        ConceptMetamac concept2 = mockConcept("concept2", null);
        ConceptMetamac concept2A = mockConcept("concept2A", concept2);
        ConceptMetamac concept2B = mockConcept("concept2B", concept2);
        conceptSchemeVersion.addItem(concept1);
        conceptSchemeVersion.addItemsFirstLevel(concept1);
        conceptSchemeVersion.addItem(concept2);
        conceptSchemeVersion.addItemsFirstLevel(concept2);
        conceptSchemeVersion.addItem(concept2A);
        conceptSchemeVersion.addItem(concept2B);
        concept2.addChildren(concept2A);
        concept2.addChildren(concept2B);

        // concept relations
        concept1.setConceptExtends(mockConcept("1_conceptExtends1", null));
        concept1.addRoleConcept(mockConcept("1_conceptRole1", null));
        concept1.addRoleConcept(mockConcept("1_conceptRole2", null));

        concept2A.setConceptExtends(mockConcept("2A_conceptExtends1", null));
        concept2A.addRoleConcept(mockConcept("2A_conceptRole1", null));
        concept2A.addRoleConcept(mockConcept("2A_conceptRole2", null));
        concept2A.addRoleConcept(mockConcept("2A_conceptRole3", null));

        concept1.addRelatedConcept(concept2);
        concept2.addRelatedConcept(concept1);

        concept1.addRelatedConcept(concept2B);
        concept2B.addRelatedConcept(concept1);

        concept2A.addRelatedConcept(concept2B);
        concept2B.addRelatedConcept(concept2A);

        return conceptSchemeVersion;
    }

    private static ConceptMetamac mockConcept(String resourceID, ConceptMetamac parent) {
        ConceptType conceptType = new ConceptType();
        conceptType.setIdentifier("conceptType");

        ConceptMetamac concept = ConceptsMetamacDoMocks.mockConcept(conceptType);
        ConceptsMetamacDoMocks.fillConceptAutogeneratedMetadata(concept);
        concept.setParent(parent);

        // immutable values to test xml streams
        concept.getNameableArtefact().setUrn("urn:" + resourceID);
        concept.getNameableArtefact().setCode(resourceID);
        concept.getNameableArtefact().setName(mockInternationalString("name", resourceID));
        concept.getNameableArtefact().setDescription(mockInternationalString("description", resourceID));
        concept.setPluralName(mockInternationalString("pluralName", resourceID));
        concept.setAcronym(mockInternationalString("acronym", resourceID));
        concept.setDescriptionSource(mockInternationalString("descriptionSource", resourceID));
        concept.setContext(mockInternationalString("context", resourceID));
        concept.setDocMethod(mockInternationalString("docMethod", resourceID));
        concept.setDerivation(mockInternationalString("derivation", resourceID));
        concept.setLegalActs(mockInternationalString("legalActs", resourceID));

        return concept;
    }

    private static InternationalString mockInternationalString(String metadata, String subCode) {
        String subTitle = subCode != null ? metadata + "-" + subCode : metadata;
        return mockInternationalString("es", subTitle + " en Espa√±ol", "en", subTitle + " in English");
    }

    private static InternationalString mockInternationalString(String locale1, String label1, String locale2, String label2) {

        InternationalString internationalString = new InternationalString();

        LocalisedString internationalStringLocale1 = new LocalisedString();
        internationalStringLocale1.setLocale(locale1);
        internationalStringLocale1.setLabel(label1);
        internationalString.addText(internationalStringLocale1);

        LocalisedString internationalStringLocale2 = new LocalisedString();
        internationalStringLocale2.setLocale(locale2);
        internationalStringLocale2.setLabel(label2);
        internationalString.addText(internationalStringLocale2);

        return internationalString;
    }

}